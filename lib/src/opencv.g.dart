// opencv_dart - OpenCV bindings for Dart language
//    c wrappers were from gocv: https://github.com/hybridgroup/gocv
//    License: Apache-2.0 https://github.com/hybridgroup/gocv/blob/release/LICENSE.txt
// Author: Rainyl
// License: Apache-2.0
// Date: 2024/01/28

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Native bindings for OpenCV
///
class CvNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvNative(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ArucoDetectorParameters ArucoDetectorParameters_Create() {
    return _ArucoDetectorParameters_Create();
  }

  late final _ArucoDetectorParameters_CreatePtr =
      _lookup<ffi.NativeFunction<ArucoDetectorParameters Function()>>(
          'ArucoDetectorParameters_Create');
  late final _ArucoDetectorParameters_Create =
      _ArucoDetectorParameters_CreatePtr.asFunction<
          ArucoDetectorParameters Function()>();

  void ArucoDetectorParameters_Close(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_Close(
      ap,
    );
  }

  late final _ArucoDetectorParameters_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_Close');
  late final _ArucoDetectorParameters_Close = _ArucoDetectorParameters_ClosePtr
      .asFunction<void Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMin,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin(
      ap,
      adaptiveThreshWinSizeMin,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMinPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMinPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMinPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMinPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeMax,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax(
      ap,
      adaptiveThreshWinSizeMax,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMaxPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeMaxPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMaxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeMaxPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
    ArucoDetectorParameters ap,
    int adaptiveThreshWinSizeStep,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep(
      ap,
      adaptiveThreshWinSizeStep,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStepPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep');
  late final _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep =
      _ArucoDetectorParameters_SetAdaptiveThreshWinSizeStepPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep');
  late final _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep =
      _ArucoDetectorParameters_GetAdaptiveThreshWinSizeStepPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAdaptiveThreshConstant(
    ArucoDetectorParameters ap,
    double adaptiveThreshConstant,
  ) {
    return _ArucoDetectorParameters_SetAdaptiveThreshConstant(
      ap,
      adaptiveThreshConstant,
    );
  }

  late final _ArucoDetectorParameters_SetAdaptiveThreshConstantPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetAdaptiveThreshConstant');
  late final _ArucoDetectorParameters_SetAdaptiveThreshConstant =
      _ArucoDetectorParameters_SetAdaptiveThreshConstantPtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetAdaptiveThreshConstant(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAdaptiveThreshConstant(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAdaptiveThreshConstantPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAdaptiveThreshConstant');
  late final _ArucoDetectorParameters_GetAdaptiveThreshConstant =
      _ArucoDetectorParameters_GetAdaptiveThreshConstantPtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMinMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    double minMarkerPerimeterRate,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerPerimeterRate(
      ap,
      minMarkerPerimeterRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetMinMarkerPerimeterRate');
  late final _ArucoDetectorParameters_SetMinMarkerPerimeterRate =
      _ArucoDetectorParameters_SetMinMarkerPerimeterRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMinMarkerPerimeterRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerPerimeterRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMinMarkerPerimeterRate');
  late final _ArucoDetectorParameters_GetMinMarkerPerimeterRate =
      _ArucoDetectorParameters_GetMinMarkerPerimeterRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
    ArucoDetectorParameters ap,
    double maxMarkerPerimeterRate,
  ) {
    return _ArucoDetectorParameters_SetMaxMarkerPerimeterRate(
      ap,
      maxMarkerPerimeterRate,
    );
  }

  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
      'ArucoDetectorParameters_SetMaxMarkerPerimeterRate');
  late final _ArucoDetectorParameters_SetMaxMarkerPerimeterRate =
      _ArucoDetectorParameters_SetMaxMarkerPerimeterRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMaxMarkerPerimeterRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMaxMarkerPerimeterRate');
  late final _ArucoDetectorParameters_GetMaxMarkerPerimeterRate =
      _ArucoDetectorParameters_GetMaxMarkerPerimeterRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
    ArucoDetectorParameters ap,
    double polygonalApproxAccuracyRate,
  ) {
    return _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate(
      ap,
      polygonalApproxAccuracyRate,
    );
  }

  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetPolygonalApproxAccuracyRate');
  late final _ArucoDetectorParameters_SetPolygonalApproxAccuracyRate =
      _ArucoDetectorParameters_SetPolygonalApproxAccuracyRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetPolygonalApproxAccuracyRate');
  late final _ArucoDetectorParameters_GetPolygonalApproxAccuracyRate =
      _ArucoDetectorParameters_GetPolygonalApproxAccuracyRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMinCornerDistanceRate(
    ArucoDetectorParameters ap,
    double minCornerDistanceRate,
  ) {
    return _ArucoDetectorParameters_SetMinCornerDistanceRate(
      ap,
      minCornerDistanceRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinCornerDistanceRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinCornerDistanceRate');
  late final _ArucoDetectorParameters_SetMinCornerDistanceRate =
      _ArucoDetectorParameters_SetMinCornerDistanceRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMinCornerDistanceRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMinCornerDistanceRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMinCornerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMinCornerDistanceRate');
  late final _ArucoDetectorParameters_GetMinCornerDistanceRate =
      _ArucoDetectorParameters_GetMinCornerDistanceRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMinDistanceToBorder(
    ArucoDetectorParameters ap,
    int minDistanceToBorder,
  ) {
    return _ArucoDetectorParameters_SetMinDistanceToBorder(
      ap,
      minDistanceToBorder,
    );
  }

  late final _ArucoDetectorParameters_SetMinDistanceToBorderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetMinDistanceToBorder');
  late final _ArucoDetectorParameters_SetMinDistanceToBorder =
      _ArucoDetectorParameters_SetMinDistanceToBorderPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetMinDistanceToBorder(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMinDistanceToBorder(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMinDistanceToBorderPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMinDistanceToBorder');
  late final _ArucoDetectorParameters_GetMinDistanceToBorder =
      _ArucoDetectorParameters_GetMinDistanceToBorderPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMinMarkerDistanceRate(
    ArucoDetectorParameters ap,
    double minMarkerDistanceRate,
  ) {
    return _ArucoDetectorParameters_SetMinMarkerDistanceRate(
      ap,
      minMarkerDistanceRate,
    );
  }

  late final _ArucoDetectorParameters_SetMinMarkerDistanceRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinMarkerDistanceRate');
  late final _ArucoDetectorParameters_SetMinMarkerDistanceRate =
      _ArucoDetectorParameters_SetMinMarkerDistanceRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMinMarkerDistanceRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMinMarkerDistanceRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMinMarkerDistanceRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMinMarkerDistanceRate');
  late final _ArucoDetectorParameters_GetMinMarkerDistanceRate =
      _ArucoDetectorParameters_GetMinMarkerDistanceRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetCornerRefinementMethod(
    ArucoDetectorParameters ap,
    int cornerRefinementMethod,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMethod(
      ap,
      cornerRefinementMethod,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMethodPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetCornerRefinementMethod');
  late final _ArucoDetectorParameters_SetCornerRefinementMethod =
      _ArucoDetectorParameters_SetCornerRefinementMethodPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetCornerRefinementMethod(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMethod(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetCornerRefinementMethod');
  late final _ArucoDetectorParameters_GetCornerRefinementMethod =
      _ArucoDetectorParameters_GetCornerRefinementMethodPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetCornerRefinementWinSize(
    ArucoDetectorParameters ap,
    int cornerRefinementWinSize,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementWinSize(
      ap,
      cornerRefinementWinSize,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementWinSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetCornerRefinementWinSize');
  late final _ArucoDetectorParameters_SetCornerRefinementWinSize =
      _ArucoDetectorParameters_SetCornerRefinementWinSizePtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetCornerRefinementWinSize(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementWinSize(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementWinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetCornerRefinementWinSize');
  late final _ArucoDetectorParameters_GetCornerRefinementWinSize =
      _ArucoDetectorParameters_GetCornerRefinementWinSizePtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetCornerRefinementMaxIterations(
    ArucoDetectorParameters ap,
    int cornerRefinementMaxIterations,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMaxIterations(
      ap,
      cornerRefinementMaxIterations,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterationsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
          'ArucoDetectorParameters_SetCornerRefinementMaxIterations');
  late final _ArucoDetectorParameters_SetCornerRefinementMaxIterations =
      _ArucoDetectorParameters_SetCornerRefinementMaxIterationsPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetCornerRefinementMaxIterations(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMaxIterations(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterationsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetCornerRefinementMaxIterations');
  late final _ArucoDetectorParameters_GetCornerRefinementMaxIterations =
      _ArucoDetectorParameters_GetCornerRefinementMaxIterationsPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
    ArucoDetectorParameters ap,
    double cornerRefinementMinAccuracy,
  ) {
    return _ArucoDetectorParameters_SetCornerRefinementMinAccuracy(
      ap,
      cornerRefinementMinAccuracy,
    );
  }

  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracyPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetCornerRefinementMinAccuracy');
  late final _ArucoDetectorParameters_SetCornerRefinementMinAccuracy =
      _ArucoDetectorParameters_SetCornerRefinementMinAccuracyPtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetCornerRefinementMinAccuracy(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetCornerRefinementMinAccuracy');
  late final _ArucoDetectorParameters_GetCornerRefinementMinAccuracy =
      _ArucoDetectorParameters_GetCornerRefinementMinAccuracyPtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMarkerBorderBits(
    ArucoDetectorParameters ap,
    int markerBorderBits,
  ) {
    return _ArucoDetectorParameters_SetMarkerBorderBits(
      ap,
      markerBorderBits,
    );
  }

  late final _ArucoDetectorParameters_SetMarkerBorderBitsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetMarkerBorderBits');
  late final _ArucoDetectorParameters_SetMarkerBorderBits =
      _ArucoDetectorParameters_SetMarkerBorderBitsPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetMarkerBorderBits(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMarkerBorderBits(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMarkerBorderBitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMarkerBorderBits');
  late final _ArucoDetectorParameters_GetMarkerBorderBits =
      _ArucoDetectorParameters_GetMarkerBorderBitsPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
    ArucoDetectorParameters ap,
    int perspectiveRemovePixelPerCell,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell(
      ap,
      perspectiveRemovePixelPerCell,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
          'ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell');
  late final _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell =
      _ArucoDetectorParameters_SetPerspectiveRemovePixelPerCellPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell');
  late final _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell =
      _ArucoDetectorParameters_GetPerspectiveRemovePixelPerCellPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParameters ap,
    double perspectiveRemoveIgnoredMarginPerCell,
  ) {
    return _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell(
      ap,
      perspectiveRemoveIgnoredMarginPerCell,
    );
  }

  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell');
  late final _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell =
      _ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCellPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell');
  late final _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell =
      _ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCellPtr
          .asFunction<double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
    ArucoDetectorParameters ap,
    double maxErroneousBitsInBorderRate,
  ) {
    return _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate(
      ap,
      maxErroneousBitsInBorderRate,
    );
  }

  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>(
          'ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate');
  late final _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate =
      _ArucoDetectorParameters_SetMaxErroneousBitsInBorderRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate');
  late final _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate =
      _ArucoDetectorParameters_GetMaxErroneousBitsInBorderRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetMinOtsuStdDev(
    ArucoDetectorParameters ap,
    double minOtsuStdDev,
  ) {
    return _ArucoDetectorParameters_SetMinOtsuStdDev(
      ap,
      minOtsuStdDev,
    );
  }

  late final _ArucoDetectorParameters_SetMinOtsuStdDevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetMinOtsuStdDev');
  late final _ArucoDetectorParameters_SetMinOtsuStdDev =
      _ArucoDetectorParameters_SetMinOtsuStdDevPtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetMinOtsuStdDev(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetMinOtsuStdDev(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetMinOtsuStdDevPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetMinOtsuStdDev');
  late final _ArucoDetectorParameters_GetMinOtsuStdDev =
      _ArucoDetectorParameters_GetMinOtsuStdDevPtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetErrorCorrectionRate(
    ArucoDetectorParameters ap,
    double errorCorrectionRate,
  ) {
    return _ArucoDetectorParameters_SetErrorCorrectionRate(
      ap,
      errorCorrectionRate,
    );
  }

  late final _ArucoDetectorParameters_SetErrorCorrectionRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Double)>>('ArucoDetectorParameters_SetErrorCorrectionRate');
  late final _ArucoDetectorParameters_SetErrorCorrectionRate =
      _ArucoDetectorParameters_SetErrorCorrectionRatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetErrorCorrectionRate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetErrorCorrectionRate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetErrorCorrectionRatePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetErrorCorrectionRate');
  late final _ArucoDetectorParameters_GetErrorCorrectionRate =
      _ArucoDetectorParameters_GetErrorCorrectionRatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagQuadDecimate(
    ArucoDetectorParameters ap,
    double aprilTagQuadDecimate,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadDecimate(
      ap,
      aprilTagQuadDecimate,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadDecimatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagQuadDecimate');
  late final _ArucoDetectorParameters_SetAprilTagQuadDecimate =
      _ArucoDetectorParameters_SetAprilTagQuadDecimatePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetAprilTagQuadDecimate(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadDecimate(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadDecimatePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagQuadDecimate');
  late final _ArucoDetectorParameters_GetAprilTagQuadDecimate =
      _ArucoDetectorParameters_GetAprilTagQuadDecimatePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagQuadSigma(
    ArucoDetectorParameters ap,
    double aprilTagQuadSigma,
  ) {
    return _ArucoDetectorParameters_SetAprilTagQuadSigma(
      ap,
      aprilTagQuadSigma,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagQuadSigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagQuadSigma');
  late final _ArucoDetectorParameters_SetAprilTagQuadSigma =
      _ArucoDetectorParameters_SetAprilTagQuadSigmaPtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetAprilTagQuadSigma(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagQuadSigma(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagQuadSigmaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagQuadSigma');
  late final _ArucoDetectorParameters_GetAprilTagQuadSigma =
      _ArucoDetectorParameters_GetAprilTagQuadSigmaPtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagMinClusterPixels(
    ArucoDetectorParameters ap,
    int aprilTagMinClusterPixels,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinClusterPixels(
      ap,
      aprilTagMinClusterPixels,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixelsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAprilTagMinClusterPixels');
  late final _ArucoDetectorParameters_SetAprilTagMinClusterPixels =
      _ArucoDetectorParameters_SetAprilTagMinClusterPixelsPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAprilTagMinClusterPixels(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinClusterPixels(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagMinClusterPixels');
  late final _ArucoDetectorParameters_GetAprilTagMinClusterPixels =
      _ArucoDetectorParameters_GetAprilTagMinClusterPixelsPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagMaxNmaxima(
    ArucoDetectorParameters ap,
    int aprilTagMaxNmaxima,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxNmaxima(
      ap,
      aprilTagMaxNmaxima,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxNmaximaPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAprilTagMaxNmaxima');
  late final _ArucoDetectorParameters_SetAprilTagMaxNmaxima =
      _ArucoDetectorParameters_SetAprilTagMaxNmaximaPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAprilTagMaxNmaxima(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxNmaxima(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxNmaximaPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagMaxNmaxima');
  late final _ArucoDetectorParameters_GetAprilTagMaxNmaxima =
      _ArucoDetectorParameters_GetAprilTagMaxNmaximaPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagCriticalRad(
    ArucoDetectorParameters ap,
    double aprilTagCriticalRad,
  ) {
    return _ArucoDetectorParameters_SetAprilTagCriticalRad(
      ap,
      aprilTagCriticalRad,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagCriticalRadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagCriticalRad');
  late final _ArucoDetectorParameters_SetAprilTagCriticalRad =
      _ArucoDetectorParameters_SetAprilTagCriticalRadPtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetAprilTagCriticalRad(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagCriticalRad(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagCriticalRadPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagCriticalRad');
  late final _ArucoDetectorParameters_GetAprilTagCriticalRad =
      _ArucoDetectorParameters_GetAprilTagCriticalRadPtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
    ArucoDetectorParameters ap,
    double aprilTagMaxLineFitMse,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMaxLineFitMse(
      ap,
      aprilTagMaxLineFitMse,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Float)>>('ArucoDetectorParameters_SetAprilTagMaxLineFitMse');
  late final _ArucoDetectorParameters_SetAprilTagMaxLineFitMse =
      _ArucoDetectorParameters_SetAprilTagMaxLineFitMsePtr.asFunction<
          void Function(ArucoDetectorParameters, double)>();

  double ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMaxLineFitMse(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMsePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagMaxLineFitMse');
  late final _ArucoDetectorParameters_GetAprilTagMaxLineFitMse =
      _ArucoDetectorParameters_GetAprilTagMaxLineFitMsePtr.asFunction<
          double Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
    ArucoDetectorParameters ap,
    int aprilTagMinWhiteBlackDiff,
  ) {
    return _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff(
      ap,
      aprilTagMinWhiteBlackDiff,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiffPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff');
  late final _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff =
      _ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiffPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiffPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff');
  late final _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff =
      _ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiffPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetAprilTagDeglitch(
    ArucoDetectorParameters ap,
    int aprilTagDeglitch,
  ) {
    return _ArucoDetectorParameters_SetAprilTagDeglitch(
      ap,
      aprilTagDeglitch,
    );
  }

  late final _ArucoDetectorParameters_SetAprilTagDeglitchPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>(
      'ArucoDetectorParameters_SetAprilTagDeglitch');
  late final _ArucoDetectorParameters_SetAprilTagDeglitch =
      _ArucoDetectorParameters_SetAprilTagDeglitchPtr.asFunction<
          void Function(ArucoDetectorParameters, int)>();

  int ArucoDetectorParameters_GetAprilTagDeglitch(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetAprilTagDeglitch(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetAprilTagDeglitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetAprilTagDeglitch');
  late final _ArucoDetectorParameters_GetAprilTagDeglitch =
      _ArucoDetectorParameters_GetAprilTagDeglitchPtr.asFunction<
          int Function(ArucoDetectorParameters)>();

  void ArucoDetectorParameters_SetDetectInvertedMarker(
    ArucoDetectorParameters ap,
    bool detectInvertedMarker,
  ) {
    return _ArucoDetectorParameters_SetDetectInvertedMarker(
      ap,
      detectInvertedMarker,
    );
  }

  late final _ArucoDetectorParameters_SetDetectInvertedMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ArucoDetectorParameters,
              ffi.Bool)>>('ArucoDetectorParameters_SetDetectInvertedMarker');
  late final _ArucoDetectorParameters_SetDetectInvertedMarker =
      _ArucoDetectorParameters_SetDetectInvertedMarkerPtr.asFunction<
          void Function(ArucoDetectorParameters, bool)>();

  bool ArucoDetectorParameters_GetDetectInvertedMarker(
    ArucoDetectorParameters ap,
  ) {
    return _ArucoDetectorParameters_GetDetectInvertedMarker(
      ap,
    );
  }

  late final _ArucoDetectorParameters_GetDetectInvertedMarkerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ArucoDetectorParameters)>>(
          'ArucoDetectorParameters_GetDetectInvertedMarker');
  late final _ArucoDetectorParameters_GetDetectInvertedMarker =
      _ArucoDetectorParameters_GetDetectInvertedMarkerPtr.asFunction<
          bool Function(ArucoDetectorParameters)>();

  ArucoDictionary getPredefinedDictionary(
    int dictionaryId,
  ) {
    return _getPredefinedDictionary(
      dictionaryId,
    );
  }

  late final _getPredefinedDictionaryPtr =
      _lookup<ffi.NativeFunction<ArucoDictionary Function(ffi.Int)>>(
          'getPredefinedDictionary');
  late final _getPredefinedDictionary =
      _getPredefinedDictionaryPtr.asFunction<ArucoDictionary Function(int)>();

  ArucoDetector ArucoDetector_New() {
    return _ArucoDetector_New();
  }

  late final _ArucoDetector_NewPtr =
      _lookup<ffi.NativeFunction<ArucoDetector Function()>>(
          'ArucoDetector_New');
  late final _ArucoDetector_New =
      _ArucoDetector_NewPtr.asFunction<ArucoDetector Function()>();

  ArucoDetector ArucoDetector_NewWithParams(
    ArucoDictionary dictionary,
    ArucoDetectorParameters params,
  ) {
    return _ArucoDetector_NewWithParams(
      dictionary,
      params,
    );
  }

  late final _ArucoDetector_NewWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ArucoDetector Function(ArucoDictionary,
              ArucoDetectorParameters)>>('ArucoDetector_NewWithParams');
  late final _ArucoDetector_NewWithParams =
      _ArucoDetector_NewWithParamsPtr.asFunction<
          ArucoDetector Function(ArucoDictionary, ArucoDetectorParameters)>();

  void ArucoDetector_Close(
    ArucoDetector ad,
  ) {
    return _ArucoDetector_Close(
      ad,
    );
  }

  late final _ArucoDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ArucoDetector)>>(
          'ArucoDetector_Close');
  late final _ArucoDetector_Close =
      _ArucoDetector_ClosePtr.asFunction<void Function(ArucoDetector)>();

  void ArucoDetector_DetectMarkers(
    ArucoDetector ad,
    Mat inputArr,
    Points2fVector markerCorners,
    ffi.Pointer<IntVector> markerIds,
    Points2fVector rejectedCandidates,
  ) {
    return _ArucoDetector_DetectMarkers(
      ad,
      inputArr,
      markerCorners,
      markerIds,
      rejectedCandidates,
    );
  }

  late final _ArucoDetector_DetectMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ArucoDetector,
              Mat,
              Points2fVector,
              ffi.Pointer<IntVector>,
              Points2fVector)>>('ArucoDetector_DetectMarkers');
  late final _ArucoDetector_DetectMarkers =
      _ArucoDetector_DetectMarkersPtr.asFunction<
          void Function(ArucoDetector, Mat, Points2fVector,
              ffi.Pointer<IntVector>, Points2fVector)>();

  void ArucoDrawDetectedMarkers(
    Mat image,
    Points2fVector markerCorners,
    IntVector markerIds,
    Scalar borderColor,
  ) {
    return _ArucoDrawDetectedMarkers(
      image,
      markerCorners,
      markerIds,
      borderColor,
    );
  }

  late final _ArucoDrawDetectedMarkersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Points2fVector, IntVector,
              Scalar)>>('ArucoDrawDetectedMarkers');
  late final _ArucoDrawDetectedMarkers = _ArucoDrawDetectedMarkersPtr
      .asFunction<void Function(Mat, Points2fVector, IntVector, Scalar)>();

  void ArucoGenerateImageMarker(
    int dictionaryId,
    int id,
    int sidePixels,
    Mat img,
    int borderBits,
  ) {
    return _ArucoGenerateImageMarker(
      dictionaryId,
      id,
      sidePixels,
      img,
      borderBits,
    );
  }

  late final _ArucoGenerateImageMarkerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, Mat,
              ffi.Int)>>('ArucoGenerateImageMarker');
  late final _ArucoGenerateImageMarker = _ArucoGenerateImageMarkerPtr
      .asFunction<void Function(int, int, int, Mat, int)>();

  AsyncArray AsyncArray_New() {
    return _AsyncArray_New();
  }

  late final _AsyncArray_NewPtr =
      _lookup<ffi.NativeFunction<AsyncArray Function()>>('AsyncArray_New');
  late final _AsyncArray_New =
      _AsyncArray_NewPtr.asFunction<AsyncArray Function()>();

  ffi.Pointer<ffi.Char> AsyncArray_GetAsync(
    AsyncArray async_out,
    Mat out,
  ) {
    return _AsyncArray_GetAsync(
      async_out,
      out,
    );
  }

  late final _AsyncArray_GetAsyncPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(AsyncArray, Mat)>>(
      'AsyncArray_GetAsync');
  late final _AsyncArray_GetAsync = _AsyncArray_GetAsyncPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(AsyncArray, Mat)>();

  void AsyncArray_Close(
    AsyncArray a,
  ) {
    return _AsyncArray_Close(
      a,
    );
  }

  late final _AsyncArray_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AsyncArray)>>(
          'AsyncArray_Close');
  late final _AsyncArray_Close =
      _AsyncArray_ClosePtr.asFunction<void Function(AsyncArray)>();

  AsyncArray Net_forwardAsync(
    Net net,
    ffi.Pointer<ffi.Char> outputName,
  ) {
    return _Net_forwardAsync(
      net,
      outputName,
    );
  }

  late final _Net_forwardAsyncPtr = _lookup<
          ffi.NativeFunction<AsyncArray Function(Net, ffi.Pointer<ffi.Char>)>>(
      'Net_forwardAsync');
  late final _Net_forwardAsync = _Net_forwardAsyncPtr.asFunction<
      AsyncArray Function(Net, ffi.Pointer<ffi.Char>)>();

  /// Calib
  void Fisheye_UndistortImage(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
  ) {
    return _Fisheye_UndistortImage(
      distorted,
      undistorted,
      k,
      d,
    );
  }

  late final _Fisheye_UndistortImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Fisheye_UndistortImage');
  late final _Fisheye_UndistortImage = _Fisheye_UndistortImagePtr.asFunction<
      void Function(Mat, Mat, Mat, Mat)>();

  void Fisheye_UndistortImageWithParams(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat knew,
    Size size,
  ) {
    return _Fisheye_UndistortImageWithParams(
      distorted,
      undistorted,
      k,
      d,
      knew,
      size,
    );
  }

  late final _Fisheye_UndistortImageWithParamsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Size)>>(
      'Fisheye_UndistortImageWithParams');
  late final _Fisheye_UndistortImageWithParams =
      _Fisheye_UndistortImageWithParamsPtr.asFunction<
          void Function(Mat, Mat, Mat, Mat, Mat, Size)>();

  void Fisheye_UndistortPoints(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat R,
    Mat P,
  ) {
    return _Fisheye_UndistortPoints(
      distorted,
      undistorted,
      k,
      d,
      R,
      P,
    );
  }

  late final _Fisheye_UndistortPointsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>(
      'Fisheye_UndistortPoints');
  late final _Fisheye_UndistortPoints = _Fisheye_UndistortPointsPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat, Mat, Mat)>();

  void Fisheye_EstimateNewCameraMatrixForUndistortRectify(
    Mat k,
    Mat d,
    Size imgSize,
    Mat r,
    Mat p,
    double balance,
    Size newSize,
    double fovScale,
  ) {
    return _Fisheye_EstimateNewCameraMatrixForUndistortRectify(
      k,
      d,
      imgSize,
      r,
      p,
      balance,
      newSize,
      fovScale,
    );
  }

  late final _Fisheye_EstimateNewCameraMatrixForUndistortRectifyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Size, Mat, Mat, ffi.Double, Size, ffi.Double)>>(
      'Fisheye_EstimateNewCameraMatrixForUndistortRectify');
  late final _Fisheye_EstimateNewCameraMatrixForUndistortRectify =
      _Fisheye_EstimateNewCameraMatrixForUndistortRectifyPtr.asFunction<
          void Function(Mat, Mat, Size, Mat, Mat, double, Size, double)>();

  void InitUndistortRectifyMap(
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat r,
    Mat newCameraMatrix,
    Size size,
    int m1type,
    Mat map1,
    Mat map2,
  ) {
    return _InitUndistortRectifyMap(
      cameraMatrix,
      distCoeffs,
      r,
      newCameraMatrix,
      size,
      m1type,
      map1,
      map2,
    );
  }

  late final _InitUndistortRectifyMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, Mat, Size, ffi.Int, Mat,
              Mat)>>('InitUndistortRectifyMap');
  late final _InitUndistortRectifyMap = _InitUndistortRectifyMapPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat, Size, int, Mat, Mat)>();

  Mat GetOptimalNewCameraMatrixWithParams(
    Mat cameraMatrix,
    Mat distCoeffs,
    Size size,
    double alpha,
    Size newImgSize,
    ffi.Pointer<Rect> validPixROI,
    bool centerPrincipalPoint,
  ) {
    return _GetOptimalNewCameraMatrixWithParams(
      cameraMatrix,
      distCoeffs,
      size,
      alpha,
      newImgSize,
      validPixROI,
      centerPrincipalPoint,
    );
  }

  late final _GetOptimalNewCameraMatrixWithParamsPtr = _lookup<
      ffi.NativeFunction<
          Mat Function(Mat, Mat, Size, ffi.Double, Size, ffi.Pointer<Rect>,
              ffi.Bool)>>('GetOptimalNewCameraMatrixWithParams');
  late final _GetOptimalNewCameraMatrixWithParams =
      _GetOptimalNewCameraMatrixWithParamsPtr.asFunction<
          Mat Function(
              Mat, Mat, Size, double, Size, ffi.Pointer<Rect>, bool)>();

  double CalibrateCamera(
    Points3fVector objectPoints,
    Points2fVector imagePoints,
    Size imageSize,
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat rvecs,
    Mat tvecs,
    int flag,
  ) {
    return _CalibrateCamera(
      objectPoints,
      imagePoints,
      imageSize,
      cameraMatrix,
      distCoeffs,
      rvecs,
      tvecs,
      flag,
    );
  }

  late final _CalibrateCameraPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(Points3fVector, Points2fVector, Size, Mat, Mat,
              Mat, Mat, ffi.Int)>>('CalibrateCamera');
  late final _CalibrateCamera = _CalibrateCameraPtr.asFunction<
      double Function(
          Points3fVector, Points2fVector, Size, Mat, Mat, Mat, Mat, int)>();

  void Undistort(
    Mat src,
    Mat dst,
    Mat cameraMatrix,
    Mat distCoeffs,
    Mat newCameraMatrix,
  ) {
    return _Undistort(
      src,
      dst,
      cameraMatrix,
      distCoeffs,
      newCameraMatrix,
    );
  }

  late final _UndistortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat)>>(
          'Undistort');
  late final _Undistort =
      _UndistortPtr.asFunction<void Function(Mat, Mat, Mat, Mat, Mat)>();

  void UndistortPoints(
    Mat distorted,
    Mat undistorted,
    Mat k,
    Mat d,
    Mat r,
    Mat p,
  ) {
    return _UndistortPoints(
      distorted,
      undistorted,
      k,
      d,
      r,
      p,
    );
  }

  late final _UndistortPointsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>(
      'UndistortPoints');
  late final _UndistortPoints = _UndistortPointsPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat, Mat, Mat)>();

  bool FindChessboardCorners(
    Mat image,
    Size patternSize,
    Mat corners,
    int flags,
  ) {
    return _FindChessboardCorners(
      image,
      patternSize,
      corners,
      flags,
    );
  }

  late final _FindChessboardCornersPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int)>>(
          'FindChessboardCorners');
  late final _FindChessboardCorners = _FindChessboardCornersPtr.asFunction<
      bool Function(Mat, Size, Mat, int)>();

  bool FindChessboardCornersSB(
    Mat image,
    Size patternSize,
    Mat corners,
    int flags,
  ) {
    return _FindChessboardCornersSB(
      image,
      patternSize,
      corners,
      flags,
    );
  }

  late final _FindChessboardCornersSBPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int)>>(
          'FindChessboardCornersSB');
  late final _FindChessboardCornersSB = _FindChessboardCornersSBPtr.asFunction<
      bool Function(Mat, Size, Mat, int)>();

  bool FindChessboardCornersSBWithMeta(
    Mat image,
    Size patternSize,
    Mat corners,
    int flags,
    Mat meta,
  ) {
    return _FindChessboardCornersSBWithMeta(
      image,
      patternSize,
      corners,
      flags,
      meta,
    );
  }

  late final _FindChessboardCornersSBWithMetaPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int, Mat)>>(
      'FindChessboardCornersSBWithMeta');
  late final _FindChessboardCornersSBWithMeta =
      _FindChessboardCornersSBWithMetaPtr.asFunction<
          bool Function(Mat, Size, Mat, int, Mat)>();

  void DrawChessboardCorners(
    Mat image,
    Size patternSize,
    Mat corners,
    bool patternWasFound,
  ) {
    return _DrawChessboardCorners(
      image,
      patternSize,
      corners,
      patternWasFound,
    );
  }

  late final _DrawChessboardCornersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Size, Mat, ffi.Bool)>>(
          'DrawChessboardCorners');
  late final _DrawChessboardCorners = _DrawChessboardCornersPtr.asFunction<
      void Function(Mat, Size, Mat, bool)>();

  Mat EstimateAffinePartial2D(
    Point2fVector from,
    Point2fVector to,
  ) {
    return _EstimateAffinePartial2D(
      from,
      to,
    );
  }

  late final _EstimateAffinePartial2DPtr =
      _lookup<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>(
          'EstimateAffinePartial2D');
  late final _EstimateAffinePartial2D = _EstimateAffinePartial2DPtr.asFunction<
      Mat Function(Point2fVector, Point2fVector)>();

  Mat EstimateAffinePartial2DWithParams(
    Point2fVector from,
    Point2fVector to,
    Mat inliers,
    int method,
    double ransacReprojThreshold,
    int maxIters,
    double confidence,
    int refineIters,
  ) {
    return _EstimateAffinePartial2DWithParams(
      from,
      to,
      inliers,
      method,
      ransacReprojThreshold,
      maxIters,
      confidence,
      refineIters,
    );
  }

  late final _EstimateAffinePartial2DWithParamsPtr = _lookup<
      ffi.NativeFunction<
          Mat Function(
              Point2fVector,
              Point2fVector,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Size,
              ffi.Double,
              ffi.Size)>>('EstimateAffinePartial2DWithParams');
  late final _EstimateAffinePartial2DWithParams =
      _EstimateAffinePartial2DWithParamsPtr.asFunction<
          Mat Function(Point2fVector, Point2fVector, Mat, int, double, int,
              double, int)>();

  Mat EstimateAffine2D(
    Point2fVector from,
    Point2fVector to,
  ) {
    return _EstimateAffine2D(
      from,
      to,
    );
  }

  late final _EstimateAffine2DPtr =
      _lookup<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>(
          'EstimateAffine2D');
  late final _EstimateAffine2D = _EstimateAffine2DPtr.asFunction<
      Mat Function(Point2fVector, Point2fVector)>();

  Mat EstimateAffine2DWithParams(
    Point2fVector from,
    Point2fVector to,
    Mat inliers,
    int method,
    double ransacReprojThreshold,
    int maxIters,
    double confidence,
    int refineIters,
  ) {
    return _EstimateAffine2DWithParams(
      from,
      to,
      inliers,
      method,
      ransacReprojThreshold,
      maxIters,
      confidence,
      refineIters,
    );
  }

  late final _EstimateAffine2DWithParamsPtr = _lookup<
      ffi.NativeFunction<
          Mat Function(Point2fVector, Point2fVector, Mat, ffi.Int, ffi.Double,
              ffi.Size, ffi.Double, ffi.Size)>>('EstimateAffine2DWithParams');
  late final _EstimateAffine2DWithParams =
      _EstimateAffine2DWithParamsPtr.asFunction<
          Mat Function(Point2fVector, Point2fVector, Mat, int, double, int,
              double, int)>();

  InputOutputArray noArray() {
    return _noArray();
  }

  late final _noArrayPtr =
      _lookup<ffi.NativeFunction<InputOutputArray Function()>>('noArray');
  late final _noArray = _noArrayPtr.asFunction<InputOutputArray Function()>();

  Mats Mats_New() {
    return _Mats_New();
  }

  late final _Mats_NewPtr =
      _lookup<ffi.NativeFunction<Mats Function()>>('Mats_New');
  late final _Mats_New = _Mats_NewPtr.asFunction<Mats Function()>();

  /// void Mats_Append(Mats mats, Mat mat);
  Mat Mats_get(
    Mats mats,
    int i,
  ) {
    return _Mats_get(
      mats,
      i,
    );
  }

  late final _Mats_getPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mats, ffi.Int)>>('Mats_get');
  late final _Mats_get = _Mats_getPtr.asFunction<Mat Function(Mats, int)>();

  DMatches MultiDMatches_get(
    MultiDMatches mds,
    int index,
  ) {
    return _MultiDMatches_get(
      mds,
      index,
    );
  }

  late final _MultiDMatches_getPtr =
      _lookup<ffi.NativeFunction<DMatches Function(MultiDMatches, ffi.Int)>>(
          'MultiDMatches_get');
  late final _MultiDMatches_get =
      _MultiDMatches_getPtr.asFunction<DMatches Function(MultiDMatches, int)>();

  ByteArray toByteArray(
    ffi.Pointer<ffi.Char> buf,
    int len,
  ) {
    return _toByteArray(
      buf,
      len,
    );
  }

  late final _toByteArrayPtr = _lookup<
      ffi.NativeFunction<
          ByteArray Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('toByteArray');
  late final _toByteArray = _toByteArrayPtr
      .asFunction<ByteArray Function(ffi.Pointer<ffi.Char>, int)>();

  void ByteArray_Release(
    ByteArray buf,
  ) {
    return _ByteArray_Release(
      buf,
    );
  }

  late final _ByteArray_ReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ByteArray)>>(
          'ByteArray_Release');
  late final _ByteArray_Release =
      _ByteArray_ReleasePtr.asFunction<void Function(ByteArray)>();

  void Contours_Close(
    Contours cs,
  ) {
    return _Contours_Close(
      cs,
    );
  }

  late final _Contours_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Contours)>>(
          'Contours_Close');
  late final _Contours_Close =
      _Contours_ClosePtr.asFunction<void Function(Contours)>();

  void KeyPoints_Close(
    KeyPoints ks,
  ) {
    return _KeyPoints_Close(
      ks,
    );
  }

  late final _KeyPoints_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KeyPoints)>>(
          'KeyPoints_Close');
  late final _KeyPoints_Close =
      _KeyPoints_ClosePtr.asFunction<void Function(KeyPoints)>();

  void Rects_Close(
    Rects rs,
  ) {
    return _Rects_Close(
      rs,
    );
  }

  late final _Rects_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Rects)>>('Rects_Close');
  late final _Rects_Close = _Rects_ClosePtr.asFunction<void Function(Rects)>();

  void Mats_Close(
    Mats mats,
  ) {
    return _Mats_Close(
      mats,
    );
  }

  late final _Mats_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mats)>>('Mats_Close');
  late final _Mats_Close = _Mats_ClosePtr.asFunction<void Function(Mats)>();

  void Point_Close(
    Point p,
  ) {
    return _Point_Close(
      p,
    );
  }

  late final _Point_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point)>>('Point_Close');
  late final _Point_Close = _Point_ClosePtr.asFunction<void Function(Point)>();

  void Point2f_Close(
    Point2f p,
  ) {
    return _Point2f_Close(
      p,
    );
  }

  late final _Point2f_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point2f)>>('Point2f_Close');
  late final _Point2f_Close =
      _Point2f_ClosePtr.asFunction<void Function(Point2f)>();

  void Point3f_Close(
    Point3f p,
  ) {
    return _Point3f_Close(
      p,
    );
  }

  late final _Point3f_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point3f)>>('Point3f_Close');
  late final _Point3f_Close =
      _Point3f_ClosePtr.asFunction<void Function(Point3f)>();

  void Points_Close(
    Points ps,
  ) {
    return _Points_Close(
      ps,
    );
  }

  late final _Points_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Points)>>('Points_Close');
  late final _Points_Close =
      _Points_ClosePtr.asFunction<void Function(Points)>();

  void DMatches_Close(
    DMatches ds,
  ) {
    return _DMatches_Close(
      ds,
    );
  }

  late final _DMatches_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DMatches)>>(
          'DMatches_Close');
  late final _DMatches_Close =
      _DMatches_ClosePtr.asFunction<void Function(DMatches)>();

  void MultiDMatches_Close(
    MultiDMatches mds,
  ) {
    return _MultiDMatches_Close(
      mds,
    );
  }

  late final _MultiDMatches_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MultiDMatches)>>(
          'MultiDMatches_Close');
  late final _MultiDMatches_Close =
      _MultiDMatches_ClosePtr.asFunction<void Function(MultiDMatches)>();

  Mat Mat_New() {
    return _Mat_New();
  }

  late final _Mat_NewPtr =
      _lookup<ffi.NativeFunction<Mat Function()>>('Mat_New');
  late final _Mat_New = _Mat_NewPtr.asFunction<Mat Function()>();

  Mat Mat_NewWithSize(
    int rows,
    int cols,
    int type,
  ) {
    return _Mat_NewWithSize(
      rows,
      cols,
      type,
    );
  }

  late final _Mat_NewWithSizePtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Mat_NewWithSize');
  late final _Mat_NewWithSize =
      _Mat_NewWithSizePtr.asFunction<Mat Function(int, int, int)>();

  Mat Mat_NewWithSizes(
    IntVector sizes,
    int type,
  ) {
    return _Mat_NewWithSizes(
      sizes,
      type,
    );
  }

  late final _Mat_NewWithSizesPtr =
      _lookup<ffi.NativeFunction<Mat Function(IntVector, ffi.Int)>>(
          'Mat_NewWithSizes');
  late final _Mat_NewWithSizes =
      _Mat_NewWithSizesPtr.asFunction<Mat Function(IntVector, int)>();

  Mat Mat_NewWithSizesFromScalar(
    IntVector sizes,
    int type,
    Scalar ar,
  ) {
    return _Mat_NewWithSizesFromScalar(
      sizes,
      type,
      ar,
    );
  }

  late final _Mat_NewWithSizesFromScalarPtr =
      _lookup<ffi.NativeFunction<Mat Function(IntVector, ffi.Int, Scalar)>>(
          'Mat_NewWithSizesFromScalar');
  late final _Mat_NewWithSizesFromScalar = _Mat_NewWithSizesFromScalarPtr
      .asFunction<Mat Function(IntVector, int, Scalar)>();

  Mat Mat_NewWithSizesFromBytes(
    IntVector sizes,
    int type,
    ByteArray buf,
  ) {
    return _Mat_NewWithSizesFromBytes(
      sizes,
      type,
      buf,
    );
  }

  late final _Mat_NewWithSizesFromBytesPtr =
      _lookup<ffi.NativeFunction<Mat Function(IntVector, ffi.Int, ByteArray)>>(
          'Mat_NewWithSizesFromBytes');
  late final _Mat_NewWithSizesFromBytes = _Mat_NewWithSizesFromBytesPtr
      .asFunction<Mat Function(IntVector, int, ByteArray)>();

  Mat Mat_NewFromScalar(
    Scalar ar,
    int type,
  ) {
    return _Mat_NewFromScalar(
      ar,
      type,
    );
  }

  late final _Mat_NewFromScalarPtr =
      _lookup<ffi.NativeFunction<Mat Function(Scalar, ffi.Int)>>(
          'Mat_NewFromScalar');
  late final _Mat_NewFromScalar =
      _Mat_NewFromScalarPtr.asFunction<Mat Function(Scalar, int)>();

  Mat Mat_NewWithSizeFromScalar(
    Scalar ar,
    int rows,
    int cols,
    int type,
  ) {
    return _Mat_NewWithSizeFromScalar(
      ar,
      rows,
      cols,
      type,
    );
  }

  late final _Mat_NewWithSizeFromScalarPtr = _lookup<
          ffi.NativeFunction<Mat Function(Scalar, ffi.Int, ffi.Int, ffi.Int)>>(
      'Mat_NewWithSizeFromScalar');
  late final _Mat_NewWithSizeFromScalar = _Mat_NewWithSizeFromScalarPtr
      .asFunction<Mat Function(Scalar, int, int, int)>();

  Mat Mat_NewFromBytes(
    int rows,
    int cols,
    int type,
    ByteArray buf,
  ) {
    return _Mat_NewFromBytes(
      rows,
      cols,
      type,
      buf,
    );
  }

  late final _Mat_NewFromBytesPtr = _lookup<
          ffi
          .NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int, ByteArray)>>(
      'Mat_NewFromBytes');
  late final _Mat_NewFromBytes =
      _Mat_NewFromBytesPtr.asFunction<Mat Function(int, int, int, ByteArray)>();

  Mat Mat_FromPtr(
    Mat m,
    int rows,
    int cols,
    int type,
    int prows,
    int pcols,
  ) {
    return _Mat_FromPtr(
      m,
      rows,
      cols,
      type,
      prows,
      pcols,
    );
  }

  late final _Mat_FromPtrPtr = _lookup<
      ffi.NativeFunction<
          Mat Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('Mat_FromPtr');
  late final _Mat_FromPtr =
      _Mat_FromPtrPtr.asFunction<Mat Function(Mat, int, int, int, int, int)>();

  void Mat_Close(
    Mat m,
  ) {
    return _Mat_Close(
      m,
    );
  }

  late final _Mat_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat)>>('Mat_Close');
  late final _Mat_Close = _Mat_ClosePtr.asFunction<void Function(Mat)>();

  bool Mat_Empty(
    Mat m,
  ) {
    return _Mat_Empty(
      m,
    );
  }

  late final _Mat_EmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_Empty');
  late final _Mat_Empty = _Mat_EmptyPtr.asFunction<bool Function(Mat)>();

  bool Mat_IsContinuous(
    Mat m,
  ) {
    return _Mat_IsContinuous(
      m,
    );
  }

  late final _Mat_IsContinuousPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_IsContinuous');
  late final _Mat_IsContinuous =
      _Mat_IsContinuousPtr.asFunction<bool Function(Mat)>();

  Mat Mat_Clone(
    Mat m,
  ) {
    return _Mat_Clone(
      m,
    );
  }

  late final _Mat_ClonePtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat)>>('Mat_Clone');
  late final _Mat_Clone = _Mat_ClonePtr.asFunction<Mat Function(Mat)>();

  void Mat_CopyTo(
    Mat m,
    Mat dst,
  ) {
    return _Mat_CopyTo(
      m,
      dst,
    );
  }

  late final _Mat_CopyToPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('Mat_CopyTo');
  late final _Mat_CopyTo = _Mat_CopyToPtr.asFunction<void Function(Mat, Mat)>();

  int Mat_Total(
    Mat m,
  ) {
    return _Mat_Total(
      m,
    );
  }

  late final _Mat_TotalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Total');
  late final _Mat_Total = _Mat_TotalPtr.asFunction<int Function(Mat)>();

  void Mat_Size(
    Mat m,
    ffi.Pointer<IntVector> res,
  ) {
    return _Mat_Size(
      m,
      res,
    );
  }

  late final _Mat_SizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<IntVector>)>>(
      'Mat_Size');
  late final _Mat_Size =
      _Mat_SizePtr.asFunction<void Function(Mat, ffi.Pointer<IntVector>)>();

  void Mat_CopyToWithMask(
    Mat m,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_CopyToWithMask(
      m,
      dst,
      mask,
    );
  }

  late final _Mat_CopyToWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_CopyToWithMask');
  late final _Mat_CopyToWithMask =
      _Mat_CopyToWithMaskPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_ConvertTo(
    Mat m,
    Mat dst,
    int type,
  ) {
    return _Mat_ConvertTo(
      m,
      dst,
      type,
    );
  }

  late final _Mat_ConvertToPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_ConvertTo');
  late final _Mat_ConvertTo =
      _Mat_ConvertToPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_ConvertToWithParams(
    Mat m,
    Mat dst,
    int type,
    double alpha,
    double beta,
  ) {
    return _Mat_ConvertToWithParams(
      m,
      dst,
      type,
      alpha,
      beta,
    );
  }

  late final _Mat_ConvertToWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Float,
              ffi.Float)>>('Mat_ConvertToWithParams');
  late final _Mat_ConvertToWithParams = _Mat_ConvertToWithParamsPtr.asFunction<
      void Function(Mat, Mat, int, double, double)>();

  ByteArray Mat_ToBytes(
    Mat m,
  ) {
    return _Mat_ToBytes(
      m,
    );
  }

  late final _Mat_ToBytesPtr =
      _lookup<ffi.NativeFunction<ByteArray Function(Mat)>>('Mat_ToBytes');
  late final _Mat_ToBytes =
      _Mat_ToBytesPtr.asFunction<ByteArray Function(Mat)>();

  ByteArray Mat_DataPtr(
    Mat m,
  ) {
    return _Mat_DataPtr(
      m,
    );
  }

  late final _Mat_DataPtrPtr =
      _lookup<ffi.NativeFunction<ByteArray Function(Mat)>>('Mat_DataPtr');
  late final _Mat_DataPtr =
      _Mat_DataPtrPtr.asFunction<ByteArray Function(Mat)>();

  Mat Mat_Region(
    Mat m,
    Rect r,
  ) {
    return _Mat_Region(
      m,
      r,
    );
  }

  late final _Mat_RegionPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, Rect)>>('Mat_Region');
  late final _Mat_Region = _Mat_RegionPtr.asFunction<Mat Function(Mat, Rect)>();

  Mat Mat_Reshape(
    Mat m,
    int cn,
    int rows,
  ) {
    return _Mat_Reshape(
      m,
      cn,
      rows,
    );
  }

  late final _Mat_ReshapePtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_Reshape');
  late final _Mat_Reshape =
      _Mat_ReshapePtr.asFunction<Mat Function(Mat, int, int)>();

  void Mat_PatchNaNs(
    Mat m,
    double val,
  ) {
    return _Mat_PatchNaNs(
      m,
      val,
    );
  }

  late final _Mat_PatchNaNsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double)>>(
          'Mat_PatchNaNs');
  late final _Mat_PatchNaNs =
      _Mat_PatchNaNsPtr.asFunction<void Function(Mat, double)>();

  Mat Mat_ConvertFp16(
    Mat m,
  ) {
    return _Mat_ConvertFp16(
      m,
    );
  }

  late final _Mat_ConvertFp16Ptr =
      _lookup<ffi.NativeFunction<Mat Function(Mat)>>('Mat_ConvertFp16');
  late final _Mat_ConvertFp16 =
      _Mat_ConvertFp16Ptr.asFunction<Mat Function(Mat)>();

  Scalar Mat_Mean(
    Mat m,
  ) {
    return _Mat_Mean(
      m,
    );
  }

  late final _Mat_MeanPtr =
      _lookup<ffi.NativeFunction<Scalar Function(Mat)>>('Mat_Mean');
  late final _Mat_Mean = _Mat_MeanPtr.asFunction<Scalar Function(Mat)>();

  Scalar Mat_MeanWithMask(
    Mat m,
    Mat mask,
  ) {
    return _Mat_MeanWithMask(
      m,
      mask,
    );
  }

  late final _Mat_MeanWithMaskPtr =
      _lookup<ffi.NativeFunction<Scalar Function(Mat, Mat)>>(
          'Mat_MeanWithMask');
  late final _Mat_MeanWithMask =
      _Mat_MeanWithMaskPtr.asFunction<Scalar Function(Mat, Mat)>();

  Mat Mat_Sqrt(
    Mat m,
  ) {
    return _Mat_Sqrt(
      m,
    );
  }

  late final _Mat_SqrtPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat)>>('Mat_Sqrt');
  late final _Mat_Sqrt = _Mat_SqrtPtr.asFunction<Mat Function(Mat)>();

  int Mat_Rows(
    Mat m,
  ) {
    return _Mat_Rows(
      m,
    );
  }

  late final _Mat_RowsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Rows');
  late final _Mat_Rows = _Mat_RowsPtr.asFunction<int Function(Mat)>();

  int Mat_Cols(
    Mat m,
  ) {
    return _Mat_Cols(
      m,
    );
  }

  late final _Mat_ColsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Cols');
  late final _Mat_Cols = _Mat_ColsPtr.asFunction<int Function(Mat)>();

  int Mat_Channels(
    Mat m,
  ) {
    return _Mat_Channels(
      m,
    );
  }

  late final _Mat_ChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Channels');
  late final _Mat_Channels = _Mat_ChannelsPtr.asFunction<int Function(Mat)>();

  int Mat_Type(
    Mat m,
  ) {
    return _Mat_Type(
      m,
    );
  }

  late final _Mat_TypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Type');
  late final _Mat_Type = _Mat_TypePtr.asFunction<int Function(Mat)>();

  int Mat_Step(
    Mat m,
  ) {
    return _Mat_Step(
      m,
    );
  }

  late final _Mat_StepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_Step');
  late final _Mat_Step = _Mat_StepPtr.asFunction<int Function(Mat)>();

  int Mat_ElemSize(
    Mat m,
  ) {
    return _Mat_ElemSize(
      m,
    );
  }

  late final _Mat_ElemSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_ElemSize');
  late final _Mat_ElemSize = _Mat_ElemSizePtr.asFunction<int Function(Mat)>();

  Mat Eye(
    int rows,
    int cols,
    int type,
  ) {
    return _Eye(
      rows,
      cols,
      type,
    );
  }

  late final _EyePtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Eye');
  late final _Eye = _EyePtr.asFunction<Mat Function(int, int, int)>();

  Mat Zeros(
    int rows,
    int cols,
    int type,
  ) {
    return _Zeros(
      rows,
      cols,
      type,
    );
  }

  late final _ZerosPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Zeros');
  late final _Zeros = _ZerosPtr.asFunction<Mat Function(int, int, int)>();

  Mat Ones(
    int rows,
    int cols,
    int type,
  ) {
    return _Ones(
      rows,
      cols,
      type,
    );
  }

  late final _OnesPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Ones');
  late final _Ones = _OnesPtr.asFunction<Mat Function(int, int, int)>();

  int Mat_GetUChar(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetUChar(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetUCharPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetUChar');
  late final _Mat_GetUChar =
      _Mat_GetUCharPtr.asFunction<int Function(Mat, int, int)>();

  int Mat_GetUChar3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetUChar3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetUChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_GetUChar3');
  late final _Mat_GetUChar3 =
      _Mat_GetUChar3Ptr.asFunction<int Function(Mat, int, int, int)>();

  int Mat_GetSChar(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetSChar(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetSCharPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetSChar');
  late final _Mat_GetSChar =
      _Mat_GetSCharPtr.asFunction<int Function(Mat, int, int)>();

  int Mat_GetSChar3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetSChar3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetSChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_GetSChar3');
  late final _Mat_GetSChar3 =
      _Mat_GetSChar3Ptr.asFunction<int Function(Mat, int, int, int)>();

  int Mat_GetShort(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetShort(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetShortPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetShort');
  late final _Mat_GetShort =
      _Mat_GetShortPtr.asFunction<int Function(Mat, int, int)>();

  int Mat_GetShort3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetShort3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_GetShort3');
  late final _Mat_GetShort3 =
      _Mat_GetShort3Ptr.asFunction<int Function(Mat, int, int, int)>();

  int Mat_GetInt(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetInt(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetIntPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetInt');
  late final _Mat_GetInt =
      _Mat_GetIntPtr.asFunction<int Function(Mat, int, int)>();

  int Mat_GetInt3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetInt3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_GetInt3');
  late final _Mat_GetInt3 =
      _Mat_GetInt3Ptr.asFunction<int Function(Mat, int, int, int)>();

  double Mat_GetFloat(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetFloat(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetFloat');
  late final _Mat_GetFloat =
      _Mat_GetFloatPtr.asFunction<double Function(Mat, int, int)>();

  double Mat_GetFloat3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetFloat3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_GetFloat3');
  late final _Mat_GetFloat3 =
      _Mat_GetFloat3Ptr.asFunction<double Function(Mat, int, int, int)>();

  double Mat_GetDouble(
    Mat m,
    int row,
    int col,
  ) {
    return _Mat_GetDouble(
      m,
      row,
      col,
    );
  }

  late final _Mat_GetDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_GetDouble');
  late final _Mat_GetDouble =
      _Mat_GetDoublePtr.asFunction<double Function(Mat, int, int)>();

  double Mat_GetDouble3(
    Mat m,
    int x,
    int y,
    int z,
  ) {
    return _Mat_GetDouble3(
      m,
      x,
      y,
      z,
    );
  }

  late final _Mat_GetDouble3Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>(
      'Mat_GetDouble3');
  late final _Mat_GetDouble3 =
      _Mat_GetDouble3Ptr.asFunction<double Function(Mat, int, int, int)>();

  void Mat_SetTo(
    Mat m,
    Scalar value,
  ) {
    return _Mat_SetTo(
      m,
      value,
    );
  }

  late final _Mat_SetToPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Scalar)>>('Mat_SetTo');
  late final _Mat_SetTo =
      _Mat_SetToPtr.asFunction<void Function(Mat, Scalar)>();

  void Mat_SetUChar(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetUChar(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetUCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>>('Mat_SetUChar');
  late final _Mat_SetUChar =
      _Mat_SetUCharPtr.asFunction<void Function(Mat, int, int, int)>();

  void Mat_SetUChar3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetUChar3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetUChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>>('Mat_SetUChar3');
  late final _Mat_SetUChar3 =
      _Mat_SetUChar3Ptr.asFunction<void Function(Mat, int, int, int, int)>();

  void Mat_SetSChar(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetSChar(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetSCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>>('Mat_SetSChar');
  late final _Mat_SetSChar =
      _Mat_SetSCharPtr.asFunction<void Function(Mat, int, int, int)>();

  void Mat_SetSChar3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetSChar3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetSChar3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>>('Mat_SetSChar3');
  late final _Mat_SetSChar3 =
      _Mat_SetSChar3Ptr.asFunction<void Function(Mat, int, int, int, int)>();

  void Mat_SetShort(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetShort(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetShortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>>('Mat_SetShort');
  late final _Mat_SetShort =
      _Mat_SetShortPtr.asFunction<void Function(Mat, int, int, int)>();

  void Mat_SetShort3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetShort3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetShort3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>>('Mat_SetShort3');
  late final _Mat_SetShort3 =
      _Mat_SetShort3Ptr.asFunction<void Function(Mat, int, int, int, int)>();

  void Mat_SetInt(
    Mat m,
    int row,
    int col,
    int val,
  ) {
    return _Mat_SetInt(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>>('Mat_SetInt');
  late final _Mat_SetInt =
      _Mat_SetIntPtr.asFunction<void Function(Mat, int, int, int)>();

  void Mat_SetInt3(
    Mat m,
    int x,
    int y,
    int z,
    int val,
  ) {
    return _Mat_SetInt3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>>('Mat_SetInt3');
  late final _Mat_SetInt3 =
      _Mat_SetInt3Ptr.asFunction<void Function(Mat, int, int, int, int)>();

  void Mat_SetFloat(
    Mat m,
    int row,
    int col,
    double val,
  ) {
    return _Mat_SetFloat(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Float)>>('Mat_SetFloat');
  late final _Mat_SetFloat =
      _Mat_SetFloatPtr.asFunction<void Function(Mat, int, int, double)>();

  void Mat_SetFloat3(
    Mat m,
    int x,
    int y,
    int z,
    double val,
  ) {
    return _Mat_SetFloat3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>>('Mat_SetFloat3');
  late final _Mat_SetFloat3 =
      _Mat_SetFloat3Ptr.asFunction<void Function(Mat, int, int, int, double)>();

  void Mat_SetDouble(
    Mat m,
    int row,
    int col,
    double val,
  ) {
    return _Mat_SetDouble(
      m,
      row,
      col,
      val,
    );
  }

  late final _Mat_SetDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Double)>>('Mat_SetDouble');
  late final _Mat_SetDouble =
      _Mat_SetDoublePtr.asFunction<void Function(Mat, int, int, double)>();

  void Mat_SetDouble3(
    Mat m,
    int x,
    int y,
    int z,
    double val,
  ) {
    return _Mat_SetDouble3(
      m,
      x,
      y,
      z,
      val,
    );
  }

  late final _Mat_SetDouble3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>>('Mat_SetDouble3');
  late final _Mat_SetDouble3 = _Mat_SetDouble3Ptr.asFunction<
      void Function(Mat, int, int, int, double)>();

  void Mat_AddUChar(
    Mat m,
    int val,
  ) {
    return _Mat_AddUChar(
      m,
      val,
    );
  }

  late final _Mat_AddUCharPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>(
          'Mat_AddUChar');
  late final _Mat_AddUChar =
      _Mat_AddUCharPtr.asFunction<void Function(Mat, int)>();

  void Mat_SubtractUChar(
    Mat m,
    int val,
  ) {
    return _Mat_SubtractUChar(
      m,
      val,
    );
  }

  late final _Mat_SubtractUCharPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>(
          'Mat_SubtractUChar');
  late final _Mat_SubtractUChar =
      _Mat_SubtractUCharPtr.asFunction<void Function(Mat, int)>();

  void Mat_MultiplyUChar(
    Mat m,
    int val,
  ) {
    return _Mat_MultiplyUChar(
      m,
      val,
    );
  }

  late final _Mat_MultiplyUCharPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>(
          'Mat_MultiplyUChar');
  late final _Mat_MultiplyUChar =
      _Mat_MultiplyUCharPtr.asFunction<void Function(Mat, int)>();

  void Mat_DivideUChar(
    Mat m,
    int val,
  ) {
    return _Mat_DivideUChar(
      m,
      val,
    );
  }

  late final _Mat_DivideUCharPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>(
          'Mat_DivideUChar');
  late final _Mat_DivideUChar =
      _Mat_DivideUCharPtr.asFunction<void Function(Mat, int)>();

  void Mat_AddFloat(
    Mat m,
    double val,
  ) {
    return _Mat_AddFloat(
      m,
      val,
    );
  }

  late final _Mat_AddFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>(
          'Mat_AddFloat');
  late final _Mat_AddFloat =
      _Mat_AddFloatPtr.asFunction<void Function(Mat, double)>();

  void Mat_SubtractFloat(
    Mat m,
    double val,
  ) {
    return _Mat_SubtractFloat(
      m,
      val,
    );
  }

  late final _Mat_SubtractFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>(
          'Mat_SubtractFloat');
  late final _Mat_SubtractFloat =
      _Mat_SubtractFloatPtr.asFunction<void Function(Mat, double)>();

  void Mat_MultiplyFloat(
    Mat m,
    double val,
  ) {
    return _Mat_MultiplyFloat(
      m,
      val,
    );
  }

  late final _Mat_MultiplyFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>(
          'Mat_MultiplyFloat');
  late final _Mat_MultiplyFloat =
      _Mat_MultiplyFloatPtr.asFunction<void Function(Mat, double)>();

  void Mat_DivideFloat(
    Mat m,
    double val,
  ) {
    return _Mat_DivideFloat(
      m,
      val,
    );
  }

  late final _Mat_DivideFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>(
          'Mat_DivideFloat');
  late final _Mat_DivideFloat =
      _Mat_DivideFloatPtr.asFunction<void Function(Mat, double)>();

  Mat Mat_MultiplyMatrix(
    Mat x,
    Mat y,
  ) {
    return _Mat_MultiplyMatrix(
      x,
      y,
    );
  }

  late final _Mat_MultiplyMatrixPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, Mat)>>('Mat_MultiplyMatrix');
  late final _Mat_MultiplyMatrix =
      _Mat_MultiplyMatrixPtr.asFunction<Mat Function(Mat, Mat)>();

  Mat Mat_T(
    Mat x,
  ) {
    return _Mat_T(
      x,
    );
  }

  late final _Mat_TPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat)>>('Mat_T');
  late final _Mat_T = _Mat_TPtr.asFunction<Mat Function(Mat)>();

  void LUT(
    Mat src,
    Mat lut,
    Mat dst,
  ) {
    return _LUT(
      src,
      lut,
      dst,
    );
  }

  late final _LUTPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('LUT');
  late final _LUT = _LUTPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_AbsDiff(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_AbsDiff(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_AbsDiffPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_AbsDiff');
  late final _Mat_AbsDiff =
      _Mat_AbsDiffPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Add(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Add(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_AddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('Mat_Add');
  late final _Mat_Add = _Mat_AddPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_AddWeighted(
    Mat src1,
    double alpha,
    Mat src2,
    double beta,
    double gamma,
    Mat dst,
  ) {
    return _Mat_AddWeighted(
      src1,
      alpha,
      src2,
      beta,
      gamma,
      dst,
    );
  }

  late final _Mat_AddWeightedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Double, Mat, ffi.Double, ffi.Double,
              Mat)>>('Mat_AddWeighted');
  late final _Mat_AddWeighted = _Mat_AddWeightedPtr.asFunction<
      void Function(Mat, double, Mat, double, double, Mat)>();

  void Mat_BitwiseAnd(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseAnd(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseAndPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_BitwiseAnd');
  late final _Mat_BitwiseAnd =
      _Mat_BitwiseAndPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_BitwiseAndWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseAndWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseAndWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Mat_BitwiseAndWithMask');
  late final _Mat_BitwiseAndWithMask = _Mat_BitwiseAndWithMaskPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat)>();

  void Mat_BitwiseNot(
    Mat src1,
    Mat dst,
  ) {
    return _Mat_BitwiseNot(
      src1,
      dst,
    );
  }

  late final _Mat_BitwiseNotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'Mat_BitwiseNot');
  late final _Mat_BitwiseNot =
      _Mat_BitwiseNotPtr.asFunction<void Function(Mat, Mat)>();

  void Mat_BitwiseNotWithMask(
    Mat src1,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseNotWithMask(
      src1,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseNotWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_BitwiseNotWithMask');
  late final _Mat_BitwiseNotWithMask =
      _Mat_BitwiseNotWithMaskPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_BitwiseOr(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseOr(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseOrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_BitwiseOr');
  late final _Mat_BitwiseOr =
      _Mat_BitwiseOrPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_BitwiseOrWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseOrWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseOrWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Mat_BitwiseOrWithMask');
  late final _Mat_BitwiseOrWithMask =
      _Mat_BitwiseOrWithMaskPtr.asFunction<void Function(Mat, Mat, Mat, Mat)>();

  void Mat_BitwiseXor(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_BitwiseXor(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_BitwiseXorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_BitwiseXor');
  late final _Mat_BitwiseXor =
      _Mat_BitwiseXorPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_BitwiseXorWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_BitwiseXorWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_BitwiseXorWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Mat_BitwiseXorWithMask');
  late final _Mat_BitwiseXorWithMask = _Mat_BitwiseXorWithMaskPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat)>();

  void Mat_Compare(
    Mat src1,
    Mat src2,
    Mat dst,
    int ct,
  ) {
    return _Mat_Compare(
      src1,
      src2,
      dst,
      ct,
    );
  }

  late final _Mat_ComparePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int)>>(
          'Mat_Compare');
  late final _Mat_Compare =
      _Mat_ComparePtr.asFunction<void Function(Mat, Mat, Mat, int)>();

  void Mat_BatchDistance(
    Mat src1,
    Mat src2,
    Mat dist,
    int dtype,
    Mat nidx,
    int normType,
    int K,
    Mat mask,
    int update,
    bool crosscheck,
  ) {
    return _Mat_BatchDistance(
      src1,
      src2,
      dist,
      dtype,
      nidx,
      normType,
      K,
      mask,
      update,
      crosscheck,
    );
  }

  late final _Mat_BatchDistancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, ffi.Int, Mat, ffi.Int, ffi.Int, Mat,
              ffi.Int, ffi.Bool)>>('Mat_BatchDistance');
  late final _Mat_BatchDistance = _Mat_BatchDistancePtr.asFunction<
      void Function(Mat, Mat, Mat, int, Mat, int, int, Mat, int, bool)>();

  int Mat_BorderInterpolate(
    int p,
    int len,
    int borderType,
  ) {
    return _Mat_BorderInterpolate(
      p,
      len,
      borderType,
    );
  }

  late final _Mat_BorderInterpolatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Mat_BorderInterpolate');
  late final _Mat_BorderInterpolate =
      _Mat_BorderInterpolatePtr.asFunction<int Function(int, int, int)>();

  void Mat_CalcCovarMatrix(
    Mat samples,
    Mat covar,
    Mat mean,
    int flags,
    int ctype,
  ) {
    return _Mat_CalcCovarMatrix(
      samples,
      covar,
      mean,
      flags,
      ctype,
    );
  }

  late final _Mat_CalcCovarMatrixPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>>(
      'Mat_CalcCovarMatrix');
  late final _Mat_CalcCovarMatrix = _Mat_CalcCovarMatrixPtr.asFunction<
      void Function(Mat, Mat, Mat, int, int)>();

  void Mat_CartToPolar(
    Mat x,
    Mat y,
    Mat magnitude,
    Mat angle,
    bool angleInDegrees,
  ) {
    return _Mat_CartToPolar(
      x,
      y,
      magnitude,
      angle,
      angleInDegrees,
    );
  }

  late final _Mat_CartToPolarPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Bool)>>(
      'Mat_CartToPolar');
  late final _Mat_CartToPolar =
      _Mat_CartToPolarPtr.asFunction<void Function(Mat, Mat, Mat, Mat, bool)>();

  bool Mat_CheckRange(
    Mat m,
  ) {
    return _Mat_CheckRange(
      m,
    );
  }

  late final _Mat_CheckRangePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat)>>('Mat_CheckRange');
  late final _Mat_CheckRange =
      _Mat_CheckRangePtr.asFunction<bool Function(Mat)>();

  void Mat_CompleteSymm(
    Mat m,
    bool lowerToUpper,
  ) {
    return _Mat_CompleteSymm(
      m,
      lowerToUpper,
    );
  }

  late final _Mat_CompleteSymmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Bool)>>(
          'Mat_CompleteSymm');
  late final _Mat_CompleteSymm =
      _Mat_CompleteSymmPtr.asFunction<void Function(Mat, bool)>();

  void Mat_ConvertScaleAbs(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
  ) {
    return _Mat_ConvertScaleAbs(
      src,
      dst,
      alpha,
      beta,
    );
  }

  late final _Mat_ConvertScaleAbsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double)>>(
      'Mat_ConvertScaleAbs');
  late final _Mat_ConvertScaleAbs = _Mat_ConvertScaleAbsPtr.asFunction<
      void Function(Mat, Mat, double, double)>();

  void Mat_CopyMakeBorder(
    Mat src,
    Mat dst,
    int top,
    int bottom,
    int left,
    int right,
    int borderType,
    Scalar value,
  ) {
    return _Mat_CopyMakeBorder(
      src,
      dst,
      top,
      bottom,
      left,
      right,
      borderType,
      value,
    );
  }

  late final _Mat_CopyMakeBorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Scalar)>>('Mat_CopyMakeBorder');
  late final _Mat_CopyMakeBorder = _Mat_CopyMakeBorderPtr.asFunction<
      void Function(Mat, Mat, int, int, int, int, int, Scalar)>();

  int Mat_CountNonZero(
    Mat src,
  ) {
    return _Mat_CountNonZero(
      src,
    );
  }

  late final _Mat_CountNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat)>>('Mat_CountNonZero');
  late final _Mat_CountNonZero =
      _Mat_CountNonZeroPtr.asFunction<int Function(Mat)>();

  void Mat_DCT(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_DCT(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_DCTPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_DCT');
  late final _Mat_DCT = _Mat_DCTPtr.asFunction<void Function(Mat, Mat, int)>();

  double Mat_Determinant(
    Mat m,
  ) {
    return _Mat_Determinant(
      m,
    );
  }

  late final _Mat_DeterminantPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat)>>('Mat_Determinant');
  late final _Mat_Determinant =
      _Mat_DeterminantPtr.asFunction<double Function(Mat)>();

  void Mat_DFT(
    Mat m,
    Mat dst,
    int flags,
  ) {
    return _Mat_DFT(
      m,
      dst,
      flags,
    );
  }

  late final _Mat_DFTPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_DFT');
  late final _Mat_DFT = _Mat_DFTPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_Divide(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Divide(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_DividePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Divide');
  late final _Mat_Divide =
      _Mat_DividePtr.asFunction<void Function(Mat, Mat, Mat)>();

  bool Mat_Eigen(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
  ) {
    return _Mat_Eigen(
      src,
      eigenvalues,
      eigenvectors,
    );
  }

  late final _Mat_EigenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat, Mat, Mat)>>(
          'Mat_Eigen');
  late final _Mat_Eigen =
      _Mat_EigenPtr.asFunction<bool Function(Mat, Mat, Mat)>();

  void Mat_EigenNonSymmetric(
    Mat src,
    Mat eigenvalues,
    Mat eigenvectors,
  ) {
    return _Mat_EigenNonSymmetric(
      src,
      eigenvalues,
      eigenvectors,
    );
  }

  late final _Mat_EigenNonSymmetricPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_EigenNonSymmetric');
  late final _Mat_EigenNonSymmetric =
      _Mat_EigenNonSymmetricPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_PCACompute(
    Mat src,
    Mat mean,
    Mat eigenvectors,
    Mat eigenvalues,
    int maxComponents,
  ) {
    return _Mat_PCACompute(
      src,
      mean,
      eigenvectors,
      eigenvalues,
      maxComponents,
    );
  }

  late final _Mat_PCAComputePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Int)>>(
      'Mat_PCACompute');
  late final _Mat_PCACompute =
      _Mat_PCAComputePtr.asFunction<void Function(Mat, Mat, Mat, Mat, int)>();

  void Mat_Exp(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Exp(
      src,
      dst,
    );
  }

  late final _Mat_ExpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('Mat_Exp');
  late final _Mat_Exp = _Mat_ExpPtr.asFunction<void Function(Mat, Mat)>();

  void Mat_ExtractChannel(
    Mat src,
    Mat dst,
    int coi,
  ) {
    return _Mat_ExtractChannel(
      src,
      dst,
      coi,
    );
  }

  late final _Mat_ExtractChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_ExtractChannel');
  late final _Mat_ExtractChannel =
      _Mat_ExtractChannelPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_FindNonZero(
    Mat src,
    Mat idx,
  ) {
    return _Mat_FindNonZero(
      src,
      idx,
    );
  }

  late final _Mat_FindNonZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'Mat_FindNonZero');
  late final _Mat_FindNonZero =
      _Mat_FindNonZeroPtr.asFunction<void Function(Mat, Mat)>();

  void Mat_Flip(
    Mat src,
    Mat dst,
    int flipCode,
  ) {
    return _Mat_Flip(
      src,
      dst,
      flipCode,
    );
  }

  late final _Mat_FlipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_Flip');
  late final _Mat_Flip =
      _Mat_FlipPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_Gemm(
    Mat src1,
    Mat src2,
    double alpha,
    Mat src3,
    double beta,
    Mat dst,
    int flags,
  ) {
    return _Mat_Gemm(
      src1,
      src2,
      alpha,
      src3,
      beta,
      dst,
      flags,
    );
  }

  late final _Mat_GemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Double, Mat, ffi.Double, Mat,
              ffi.Int)>>('Mat_Gemm');
  late final _Mat_Gemm = _Mat_GemmPtr.asFunction<
      void Function(Mat, Mat, double, Mat, double, Mat, int)>();

  int Mat_GetOptimalDFTSize(
    int vecsize,
  ) {
    return _Mat_GetOptimalDFTSize(
      vecsize,
    );
  }

  late final _Mat_GetOptimalDFTSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Mat_GetOptimalDFTSize');
  late final _Mat_GetOptimalDFTSize =
      _Mat_GetOptimalDFTSizePtr.asFunction<int Function(int)>();

  void Mat_Hconcat(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Hconcat(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_HconcatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Hconcat');
  late final _Mat_Hconcat =
      _Mat_HconcatPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Vconcat(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Vconcat(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_VconcatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Vconcat');
  late final _Mat_Vconcat =
      _Mat_VconcatPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Rotate(
    Mat src,
    Mat dst,
    int rotationCode,
  ) {
    return _Rotate(
      src,
      dst,
      rotationCode,
    );
  }

  late final _RotatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Rotate');
  late final _Rotate = _RotatePtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_Idct(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_Idct(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_IdctPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_Idct');
  late final _Mat_Idct =
      _Mat_IdctPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_Idft(
    Mat src,
    Mat dst,
    int flags,
    int nonzeroRows,
  ) {
    return _Mat_Idft(
      src,
      dst,
      flags,
      nonzeroRows,
    );
  }

  late final _Mat_IdftPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int)>>(
      'Mat_Idft');
  late final _Mat_Idft =
      _Mat_IdftPtr.asFunction<void Function(Mat, Mat, int, int)>();

  void Mat_InRange(
    Mat src,
    Mat lowerb,
    Mat upperb,
    Mat dst,
  ) {
    return _Mat_InRange(
      src,
      lowerb,
      upperb,
      dst,
    );
  }

  late final _Mat_InRangePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Mat_InRange');
  late final _Mat_InRange =
      _Mat_InRangePtr.asFunction<void Function(Mat, Mat, Mat, Mat)>();

  void Mat_InRangeWithScalar(
    Mat src,
    Scalar lowerb,
    Scalar upperb,
    Mat dst,
  ) {
    return _Mat_InRangeWithScalar(
      src,
      lowerb,
      upperb,
      dst,
    );
  }

  late final _Mat_InRangeWithScalarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar, Mat)>>(
          'Mat_InRangeWithScalar');
  late final _Mat_InRangeWithScalar = _Mat_InRangeWithScalarPtr.asFunction<
      void Function(Mat, Scalar, Scalar, Mat)>();

  void Mat_InsertChannel(
    Mat src,
    Mat dst,
    int coi,
  ) {
    return _Mat_InsertChannel(
      src,
      dst,
      coi,
    );
  }

  late final _Mat_InsertChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_InsertChannel');
  late final _Mat_InsertChannel =
      _Mat_InsertChannelPtr.asFunction<void Function(Mat, Mat, int)>();

  double Mat_Invert(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_Invert(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_InvertPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>(
          'Mat_Invert');
  late final _Mat_Invert =
      _Mat_InvertPtr.asFunction<double Function(Mat, Mat, int)>();

  double KMeans(
    Mat data,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
  ) {
    return _KMeans(
      data,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
    );
  }

  late final _KMeansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(Mat, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int,
              Mat)>>('KMeans');
  late final _KMeans = _KMeansPtr.asFunction<
      double Function(Mat, int, Mat, TermCriteria, int, int, Mat)>();

  double KMeansPoints(
    PointVector pts,
    int k,
    Mat bestLabels,
    TermCriteria criteria,
    int attempts,
    int flags,
    Mat centers,
  ) {
    return _KMeansPoints(
      pts,
      k,
      bestLabels,
      criteria,
      attempts,
      flags,
      centers,
    );
  }

  late final _KMeansPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(PointVector, ffi.Int, Mat, TermCriteria, ffi.Int,
              ffi.Int, Mat)>>('KMeansPoints');
  late final _KMeansPoints = _KMeansPointsPtr.asFunction<
      double Function(PointVector, int, Mat, TermCriteria, int, int, Mat)>();

  void Mat_Log(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Log(
      src,
      dst,
    );
  }

  late final _Mat_LogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('Mat_Log');
  late final _Mat_Log = _Mat_LogPtr.asFunction<void Function(Mat, Mat)>();

  void Mat_Magnitude(
    Mat x,
    Mat y,
    Mat magnitude,
  ) {
    return _Mat_Magnitude(
      x,
      y,
      magnitude,
    );
  }

  late final _Mat_MagnitudePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Magnitude');
  late final _Mat_Magnitude =
      _Mat_MagnitudePtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Max(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Max(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_MaxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('Mat_Max');
  late final _Mat_Max = _Mat_MaxPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_MeanStdDev(
    Mat src,
    Mat dstMean,
    Mat dstStdDev,
  ) {
    return _Mat_MeanStdDev(
      src,
      dstMean,
      dstStdDev,
    );
  }

  late final _Mat_MeanStdDevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_MeanStdDev');
  late final _Mat_MeanStdDev =
      _Mat_MeanStdDevPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Merge(
    Mats mats,
    Mat dst,
  ) {
    return _Mat_Merge(
      mats,
      dst,
    );
  }

  late final _Mat_MergePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mats, Mat)>>('Mat_Merge');
  late final _Mat_Merge = _Mat_MergePtr.asFunction<void Function(Mats, Mat)>();

  void Mat_Min(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Min(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_MinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('Mat_Min');
  late final _Mat_Min = _Mat_MinPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_MinMaxIdx(
    Mat m,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<ffi.Int> minIdx,
    ffi.Pointer<ffi.Int> maxIdx,
  ) {
    return _Mat_MinMaxIdx(
      m,
      minVal,
      maxVal,
      minIdx,
      maxIdx,
    );
  }

  late final _Mat_MinMaxIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('Mat_MinMaxIdx');
  late final _Mat_MinMaxIdx = _Mat_MinMaxIdxPtr.asFunction<
      void Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void Mat_MinMaxLoc(
    Mat m,
    ffi.Pointer<ffi.Double> minVal,
    ffi.Pointer<ffi.Double> maxVal,
    ffi.Pointer<Point> minLoc,
    ffi.Pointer<Point> maxLoc,
  ) {
    return _Mat_MinMaxLoc(
      m,
      minVal,
      maxVal,
      minLoc,
      maxLoc,
    );
  }

  late final _Mat_MinMaxLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<Point>,
              ffi.Pointer<Point>)>>('Mat_MinMaxLoc');
  late final _Mat_MinMaxLoc = _Mat_MinMaxLocPtr.asFunction<
      void Function(Mat, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<Point>, ffi.Pointer<Point>)>();

  void Mat_MixChannels(
    Mats src,
    Mats dst,
    IntVector fromTo,
  ) {
    return _Mat_MixChannels(
      src,
      dst,
      fromTo,
    );
  }

  late final _Mat_MixChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mats, Mats, IntVector)>>(
          'Mat_MixChannels');
  late final _Mat_MixChannels =
      _Mat_MixChannelsPtr.asFunction<void Function(Mats, Mats, IntVector)>();

  void Mat_MulSpectrums(
    Mat a,
    Mat b,
    Mat c,
    int flags,
  ) {
    return _Mat_MulSpectrums(
      a,
      b,
      c,
      flags,
    );
  }

  late final _Mat_MulSpectrumsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int)>>(
          'Mat_MulSpectrums');
  late final _Mat_MulSpectrums =
      _Mat_MulSpectrumsPtr.asFunction<void Function(Mat, Mat, Mat, int)>();

  void Mat_Multiply(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Multiply(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_MultiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Multiply');
  late final _Mat_Multiply =
      _Mat_MultiplyPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_MultiplyWithParams(
    Mat src1,
    Mat src2,
    Mat dst,
    double scale,
    int dtype,
  ) {
    return _Mat_MultiplyWithParams(
      src1,
      src2,
      dst,
      scale,
      dtype,
    );
  }

  late final _Mat_MultiplyWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Double, ffi.Int)>>('Mat_MultiplyWithParams');
  late final _Mat_MultiplyWithParams = _Mat_MultiplyWithParamsPtr.asFunction<
      void Function(Mat, Mat, Mat, double, int)>();

  void Mat_Subtract(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_Subtract(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_SubtractPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Subtract');
  late final _Mat_Subtract =
      _Mat_SubtractPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Normalize(
    Mat src,
    Mat dst,
    double alpha,
    double beta,
    int typ,
  ) {
    return _Mat_Normalize(
      src,
      dst,
      alpha,
      beta,
      typ,
    );
  }

  late final _Mat_NormalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>('Mat_Normalize');
  late final _Mat_Normalize = _Mat_NormalizePtr.asFunction<
      void Function(Mat, Mat, double, double, int)>();

  double Norm(
    Mat src1,
    int normType,
  ) {
    return _Norm(
      src1,
      normType,
    );
  }

  late final _NormPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, ffi.Int)>>('Norm');
  late final _Norm = _NormPtr.asFunction<double Function(Mat, int)>();

  double NormWithMats(
    Mat src1,
    Mat src2,
    int normType,
  ) {
    return _NormWithMats(
      src1,
      src2,
      normType,
    );
  }

  late final _NormWithMatsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>(
          'NormWithMats');
  late final _NormWithMats =
      _NormWithMatsPtr.asFunction<double Function(Mat, Mat, int)>();

  void Mat_PerspectiveTransform(
    Mat src,
    Mat dst,
    Mat tm,
  ) {
    return _Mat_PerspectiveTransform(
      src,
      dst,
      tm,
    );
  }

  late final _Mat_PerspectiveTransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_PerspectiveTransform');
  late final _Mat_PerspectiveTransform =
      _Mat_PerspectiveTransformPtr.asFunction<void Function(Mat, Mat, Mat)>();

  bool Mat_Solve(
    Mat src1,
    Mat src2,
    Mat dst,
    int flags,
  ) {
    return _Mat_Solve(
      src1,
      src2,
      dst,
      flags,
    );
  }

  late final _Mat_SolvePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Mat, Mat, Mat, ffi.Int)>>(
          'Mat_Solve');
  late final _Mat_Solve =
      _Mat_SolvePtr.asFunction<bool Function(Mat, Mat, Mat, int)>();

  int Mat_SolveCubic(
    Mat coeffs,
    Mat roots,
  ) {
    return _Mat_SolveCubic(
      coeffs,
      roots,
    );
  }

  late final _Mat_SolveCubicPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Mat, Mat)>>('Mat_SolveCubic');
  late final _Mat_SolveCubic =
      _Mat_SolveCubicPtr.asFunction<int Function(Mat, Mat)>();

  double Mat_SolvePoly(
    Mat coeffs,
    Mat roots,
    int maxIters,
  ) {
    return _Mat_SolvePoly(
      coeffs,
      roots,
      maxIters,
    );
  }

  late final _Mat_SolvePolyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>(
          'Mat_SolvePoly');
  late final _Mat_SolvePoly =
      _Mat_SolvePolyPtr.asFunction<double Function(Mat, Mat, int)>();

  void Mat_Reduce(
    Mat src,
    Mat dst,
    int dim,
    int rType,
    int dType,
  ) {
    return _Mat_Reduce(
      src,
      dst,
      dim,
      rType,
      dType,
    );
  }

  late final _Mat_ReducePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>('Mat_Reduce');
  late final _Mat_Reduce =
      _Mat_ReducePtr.asFunction<void Function(Mat, Mat, int, int, int)>();

  void Mat_ReduceArgMax(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
  ) {
    return _Mat_ReduceArgMax(
      src,
      dst,
      axis,
      lastIndex,
    );
  }

  late final _Mat_ReduceArgMaxPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Bool)>>(
      'Mat_ReduceArgMax');
  late final _Mat_ReduceArgMax =
      _Mat_ReduceArgMaxPtr.asFunction<void Function(Mat, Mat, int, bool)>();

  void Mat_ReduceArgMin(
    Mat src,
    Mat dst,
    int axis,
    bool lastIndex,
  ) {
    return _Mat_ReduceArgMin(
      src,
      dst,
      axis,
      lastIndex,
    );
  }

  late final _Mat_ReduceArgMinPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Bool)>>(
      'Mat_ReduceArgMin');
  late final _Mat_ReduceArgMin =
      _Mat_ReduceArgMinPtr.asFunction<void Function(Mat, Mat, int, bool)>();

  void Mat_Repeat(
    Mat src,
    int nY,
    int nX,
    Mat dst,
  ) {
    return _Mat_Repeat(
      src,
      nY,
      nX,
      dst,
    );
  }

  late final _Mat_RepeatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Mat)>>(
      'Mat_Repeat');
  late final _Mat_Repeat =
      _Mat_RepeatPtr.asFunction<void Function(Mat, int, int, Mat)>();

  void Mat_ScaleAdd(
    Mat src1,
    double alpha,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_ScaleAdd(
      src1,
      alpha,
      src2,
      dst,
    );
  }

  late final _Mat_ScaleAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, Mat, Mat)>>(
          'Mat_ScaleAdd');
  late final _Mat_ScaleAdd =
      _Mat_ScaleAddPtr.asFunction<void Function(Mat, double, Mat, Mat)>();

  void Mat_SetIdentity(
    Mat src,
    double scalar,
  ) {
    return _Mat_SetIdentity(
      src,
      scalar,
    );
  }

  late final _Mat_SetIdentityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double)>>(
          'Mat_SetIdentity');
  late final _Mat_SetIdentity =
      _Mat_SetIdentityPtr.asFunction<void Function(Mat, double)>();

  void Mat_Sort(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_Sort(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_SortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_Sort');
  late final _Mat_Sort =
      _Mat_SortPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_SortIdx(
    Mat src,
    Mat dst,
    int flags,
  ) {
    return _Mat_SortIdx(
      src,
      dst,
      flags,
    );
  }

  late final _Mat_SortIdxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'Mat_SortIdx');
  late final _Mat_SortIdx =
      _Mat_SortIdxPtr.asFunction<void Function(Mat, Mat, int)>();

  void Mat_Split(
    Mat src,
    ffi.Pointer<Mats> mats,
  ) {
    return _Mat_Split(
      src,
      mats,
    );
  }

  late final _Mat_SplitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<Mats>)>>(
          'Mat_Split');
  late final _Mat_Split =
      _Mat_SplitPtr.asFunction<void Function(Mat, ffi.Pointer<Mats>)>();

  Scalar Mat_Trace(
    Mat src,
  ) {
    return _Mat_Trace(
      src,
    );
  }

  late final _Mat_TracePtr =
      _lookup<ffi.NativeFunction<Scalar Function(Mat)>>('Mat_Trace');
  late final _Mat_Trace = _Mat_TracePtr.asFunction<Scalar Function(Mat)>();

  void Mat_Transform(
    Mat src,
    Mat dst,
    Mat tm,
  ) {
    return _Mat_Transform(
      src,
      dst,
      tm,
    );
  }

  late final _Mat_TransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_Transform');
  late final _Mat_Transform =
      _Mat_TransformPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_Transpose(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Transpose(
      src,
      dst,
    );
  }

  late final _Mat_TransposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('Mat_Transpose');
  late final _Mat_Transpose =
      _Mat_TransposePtr.asFunction<void Function(Mat, Mat)>();

  void Mat_PolarToCart(
    Mat magnitude,
    Mat degree,
    Mat x,
    Mat y,
    bool angleInDegrees,
  ) {
    return _Mat_PolarToCart(
      magnitude,
      degree,
      x,
      y,
      angleInDegrees,
    );
  }

  late final _Mat_PolarToCartPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Bool)>>(
      'Mat_PolarToCart');
  late final _Mat_PolarToCart =
      _Mat_PolarToCartPtr.asFunction<void Function(Mat, Mat, Mat, Mat, bool)>();

  void Mat_Pow(
    Mat src,
    double power,
    Mat dst,
  ) {
    return _Mat_Pow(
      src,
      power,
      dst,
    );
  }

  late final _Mat_PowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, Mat)>>(
          'Mat_Pow');
  late final _Mat_Pow =
      _Mat_PowPtr.asFunction<void Function(Mat, double, Mat)>();

  void Mat_Phase(
    Mat x,
    Mat y,
    Mat angle,
    bool angleInDegrees,
  ) {
    return _Mat_Phase(
      x,
      y,
      angle,
      angleInDegrees,
    );
  }

  late final _Mat_PhasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Bool)>>(
          'Mat_Phase');
  late final _Mat_Phase =
      _Mat_PhasePtr.asFunction<void Function(Mat, Mat, Mat, bool)>();

  Scalar Mat_Sum(
    Mat src1,
  ) {
    return _Mat_Sum(
      src1,
    );
  }

  late final _Mat_SumPtr =
      _lookup<ffi.NativeFunction<Scalar Function(Mat)>>('Mat_Sum');
  late final _Mat_Sum = _Mat_SumPtr.asFunction<Scalar Function(Mat)>();

  TermCriteria TermCriteria_New(
    int typ,
    int maxCount,
    double epsilon,
  ) {
    return _TermCriteria_New(
      typ,
      maxCount,
      epsilon,
    );
  }

  late final _TermCriteria_NewPtr = _lookup<
          ffi
          .NativeFunction<TermCriteria Function(ffi.Int, ffi.Int, ffi.Double)>>(
      'TermCriteria_New');
  late final _TermCriteria_New = _TermCriteria_NewPtr.asFunction<
      TermCriteria Function(int, int, double)>();

  int GetCVTickCount() {
    return _GetCVTickCount();
  }

  late final _GetCVTickCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('GetCVTickCount');
  late final _GetCVTickCount = _GetCVTickCountPtr.asFunction<int Function()>();

  double GetTickFrequency() {
    return _GetTickFrequency();
  }

  late final _GetTickFrequencyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetTickFrequency');
  late final _GetTickFrequency =
      _GetTickFrequencyPtr.asFunction<double Function()>();

  Mat Mat_rowRange(
    Mat m,
    int startrow,
    int endrow,
  ) {
    return _Mat_rowRange(
      m,
      startrow,
      endrow,
    );
  }

  late final _Mat_rowRangePtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_rowRange');
  late final _Mat_rowRange =
      _Mat_rowRangePtr.asFunction<Mat Function(Mat, int, int)>();

  Mat Mat_colRange(
    Mat m,
    int startrow,
    int endrow,
  ) {
    return _Mat_colRange(
      m,
      startrow,
      endrow,
    );
  }

  late final _Mat_colRangePtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>(
          'Mat_colRange');
  late final _Mat_colRange =
      _Mat_colRangePtr.asFunction<Mat Function(Mat, int, int)>();

  PointVector PointVector_New() {
    return _PointVector_New();
  }

  late final _PointVector_NewPtr =
      _lookup<ffi.NativeFunction<PointVector Function()>>('PointVector_New');
  late final _PointVector_New =
      _PointVector_NewPtr.asFunction<PointVector Function()>();

  PointVector PointVector_NewFromPoints(
    Contour points,
  ) {
    return _PointVector_NewFromPoints(
      points,
    );
  }

  late final _PointVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<PointVector Function(Contour)>>(
          'PointVector_NewFromPoints');
  late final _PointVector_NewFromPoints =
      _PointVector_NewFromPointsPtr.asFunction<PointVector Function(Contour)>();

  PointVector PointVector_NewFromMat(
    Mat mat,
  ) {
    return _PointVector_NewFromMat(
      mat,
    );
  }

  late final _PointVector_NewFromMatPtr =
      _lookup<ffi.NativeFunction<PointVector Function(Mat)>>(
          'PointVector_NewFromMat');
  late final _PointVector_NewFromMat =
      _PointVector_NewFromMatPtr.asFunction<PointVector Function(Mat)>();

  Point PointVector_At(
    PointVector pv,
    int idx,
  ) {
    return _PointVector_At(
      pv,
      idx,
    );
  }

  late final _PointVector_AtPtr =
      _lookup<ffi.NativeFunction<Point Function(PointVector, ffi.Int)>>(
          'PointVector_At');
  late final _PointVector_At =
      _PointVector_AtPtr.asFunction<Point Function(PointVector, int)>();

  void PointVector_Append(
    PointVector pv,
    Point p,
  ) {
    return _PointVector_Append(
      pv,
      p,
    );
  }

  late final _PointVector_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PointVector, Point)>>(
          'PointVector_Append');
  late final _PointVector_Append =
      _PointVector_AppendPtr.asFunction<void Function(PointVector, Point)>();

  int PointVector_Size(
    PointVector pv,
  ) {
    return _PointVector_Size(
      pv,
    );
  }

  late final _PointVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PointVector)>>(
          'PointVector_Size');
  late final _PointVector_Size =
      _PointVector_SizePtr.asFunction<int Function(PointVector)>();

  void PointVector_Close(
    PointVector pv,
  ) {
    return _PointVector_Close(
      pv,
    );
  }

  late final _PointVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PointVector)>>(
          'PointVector_Close');
  late final _PointVector_Close =
      _PointVector_ClosePtr.asFunction<void Function(PointVector)>();

  PointsVector PointsVector_New() {
    return _PointsVector_New();
  }

  late final _PointsVector_NewPtr =
      _lookup<ffi.NativeFunction<PointsVector Function()>>('PointsVector_New');
  late final _PointsVector_New =
      _PointsVector_NewPtr.asFunction<PointsVector Function()>();

  PointsVector PointsVector_NewFromPoints(
    Contours points,
  ) {
    return _PointsVector_NewFromPoints(
      points,
    );
  }

  late final _PointsVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<PointsVector Function(Contours)>>(
          'PointsVector_NewFromPoints');
  late final _PointsVector_NewFromPoints = _PointsVector_NewFromPointsPtr
      .asFunction<PointsVector Function(Contours)>();

  PointVector PointsVector_At(
    PointsVector psv,
    int idx,
  ) {
    return _PointsVector_At(
      psv,
      idx,
    );
  }

  late final _PointsVector_AtPtr =
      _lookup<ffi.NativeFunction<PointVector Function(PointsVector, ffi.Int)>>(
          'PointsVector_At');
  late final _PointsVector_At =
      _PointsVector_AtPtr.asFunction<PointVector Function(PointsVector, int)>();

  void PointsVector_Append(
    PointsVector psv,
    PointVector pv,
  ) {
    return _PointsVector_Append(
      psv,
      pv,
    );
  }

  late final _PointsVector_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PointsVector, PointVector)>>(
          'PointsVector_Append');
  late final _PointsVector_Append = _PointsVector_AppendPtr.asFunction<
      void Function(PointsVector, PointVector)>();

  int PointsVector_Size(
    PointsVector psv,
  ) {
    return _PointsVector_Size(
      psv,
    );
  }

  late final _PointsVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PointsVector)>>(
          'PointsVector_Size');
  late final _PointsVector_Size =
      _PointsVector_SizePtr.asFunction<int Function(PointsVector)>();

  void PointsVector_Close(
    PointsVector psv,
  ) {
    return _PointsVector_Close(
      psv,
    );
  }

  late final _PointsVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PointsVector)>>(
          'PointsVector_Close');
  late final _PointsVector_Close =
      _PointsVector_ClosePtr.asFunction<void Function(PointsVector)>();

  Point2fVector Point2fVector_New() {
    return _Point2fVector_New();
  }

  late final _Point2fVector_NewPtr =
      _lookup<ffi.NativeFunction<Point2fVector Function()>>(
          'Point2fVector_New');
  late final _Point2fVector_New =
      _Point2fVector_NewPtr.asFunction<Point2fVector Function()>();

  void Point2fVector_Close(
    Point2fVector pfv,
  ) {
    return _Point2fVector_Close(
      pfv,
    );
  }

  late final _Point2fVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point2fVector)>>(
          'Point2fVector_Close');
  late final _Point2fVector_Close =
      _Point2fVector_ClosePtr.asFunction<void Function(Point2fVector)>();

  Point2fVector Point2fVector_NewFromPoints(
    Contour2f pts,
  ) {
    return _Point2fVector_NewFromPoints(
      pts,
    );
  }

  late final _Point2fVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<Point2fVector Function(Contour2f)>>(
          'Point2fVector_NewFromPoints');
  late final _Point2fVector_NewFromPoints = _Point2fVector_NewFromPointsPtr
      .asFunction<Point2fVector Function(Contour2f)>();

  Point2fVector Point2fVector_NewFromMat(
    Mat mat,
  ) {
    return _Point2fVector_NewFromMat(
      mat,
    );
  }

  late final _Point2fVector_NewFromMatPtr =
      _lookup<ffi.NativeFunction<Point2fVector Function(Mat)>>(
          'Point2fVector_NewFromMat');
  late final _Point2fVector_NewFromMat =
      _Point2fVector_NewFromMatPtr.asFunction<Point2fVector Function(Mat)>();

  void Point2fVector_Append(
    Point2fVector pv,
    Point2f p,
  ) {
    return _Point2fVector_Append(
      pv,
      p,
    );
  }

  late final _Point2fVector_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point2fVector, Point2f)>>(
          'Point2fVector_Append');
  late final _Point2fVector_Append = _Point2fVector_AppendPtr.asFunction<
      void Function(Point2fVector, Point2f)>();

  Point2f Point2fVector_At(
    Point2fVector pfv,
    int idx,
  ) {
    return _Point2fVector_At(
      pfv,
      idx,
    );
  }

  late final _Point2fVector_AtPtr =
      _lookup<ffi.NativeFunction<Point2f Function(Point2fVector, ffi.Int)>>(
          'Point2fVector_At');
  late final _Point2fVector_At =
      _Point2fVector_AtPtr.asFunction<Point2f Function(Point2fVector, int)>();

  int Point2fVector_Size(
    Point2fVector pfv,
  ) {
    return _Point2fVector_Size(
      pfv,
    );
  }

  late final _Point2fVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Point2fVector)>>(
          'Point2fVector_Size');
  late final _Point2fVector_Size =
      _Point2fVector_SizePtr.asFunction<int Function(Point2fVector)>();

  void IntVector_Close(
    IntVector ivec,
  ) {
    return _IntVector_Close(
      ivec,
    );
  }

  late final _IntVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IntVector)>>(
          'IntVector_Close');
  late final _IntVector_Close =
      _IntVector_ClosePtr.asFunction<void Function(IntVector)>();

  void CStrings_Close(
    CStrings cstrs,
  ) {
    return _CStrings_Close(
      cstrs,
    );
  }

  late final _CStrings_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CStrings)>>(
          'CStrings_Close');
  late final _CStrings_Close =
      _CStrings_ClosePtr.asFunction<void Function(CStrings)>();

  RNG Rng_NewWithState(
    int state,
  ) {
    return _Rng_NewWithState(
      state,
    );
  }

  late final _Rng_NewWithStatePtr =
      _lookup<ffi.NativeFunction<RNG Function(ffi.Uint64)>>('Rng_NewWithState');
  late final _Rng_NewWithState =
      _Rng_NewWithStatePtr.asFunction<RNG Function(int)>();

  void Rng_Close(
    RNG rng,
  ) {
    return _Rng_Close(
      rng,
    );
  }

  late final _Rng_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RNG)>>('Rng_Close');
  late final _Rng_Close = _Rng_ClosePtr.asFunction<void Function(RNG)>();

  RNG TheRNG() {
    return _TheRNG();
  }

  late final _TheRNGPtr = _lookup<ffi.NativeFunction<RNG Function()>>('TheRNG');
  late final _TheRNG = _TheRNGPtr.asFunction<RNG Function()>();

  void SetRNGSeed(
    int seed,
  ) {
    return _SetRNGSeed(
      seed,
    );
  }

  late final _SetRNGSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetRNGSeed');
  late final _SetRNGSeed = _SetRNGSeedPtr.asFunction<void Function(int)>();

  void RNG_Fill(
    RNG rng,
    Mat mat,
    int distType,
    double a,
    double b,
    bool saturateRange,
  ) {
    return _RNG_Fill(
      rng,
      mat,
      distType,
      a,
      b,
      saturateRange,
    );
  }

  late final _RNG_FillPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(RNG, Mat, ffi.Int, ffi.Double, ffi.Double,
              ffi.Bool)>>('RNG_Fill');
  late final _RNG_Fill = _RNG_FillPtr.asFunction<
      void Function(RNG, Mat, int, double, double, bool)>();

  double RNG_Gaussian(
    RNG rng,
    double sigma,
  ) {
    return _RNG_Gaussian(
      rng,
      sigma,
    );
  }

  late final _RNG_GaussianPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(RNG, ffi.Double)>>(
          'RNG_Gaussian');
  late final _RNG_Gaussian =
      _RNG_GaussianPtr.asFunction<double Function(RNG, double)>();

  int RNG_Uniform(
    RNG rng,
    int a,
    int b,
  ) {
    return _RNG_Uniform(
      rng,
      a,
      b,
    );
  }

  late final _RNG_UniformPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(RNG, ffi.Int, ffi.Int)>>(
          'RNG_Uniform');
  late final _RNG_Uniform =
      _RNG_UniformPtr.asFunction<int Function(RNG, int, int)>();

  double RNG_UniformDouble(
    RNG rng,
    double a,
    double b,
  ) {
    return _RNG_UniformDouble(
      rng,
      a,
      b,
    );
  }

  late final _RNG_UniformDoublePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(RNG, ffi.Double, ffi.Double)>>(
      'RNG_UniformDouble');
  late final _RNG_UniformDouble =
      _RNG_UniformDoublePtr.asFunction<double Function(RNG, double, double)>();

  int RNG_Next(
    RNG rng,
  ) {
    return _RNG_Next(
      rng,
    );
  }

  late final _RNG_NextPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(RNG)>>('RNG_Next');
  late final _RNG_Next = _RNG_NextPtr.asFunction<int Function(RNG)>();

  void RandN(
    Mat mat,
    Scalar mean,
    Scalar stddev,
  ) {
    return _RandN(
      mat,
      mean,
      stddev,
    );
  }

  late final _RandNPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar)>>(
          'RandN');
  late final _RandN =
      _RandNPtr.asFunction<void Function(Mat, Scalar, Scalar)>();

  void RandShuffle(
    Mat mat,
  ) {
    return _RandShuffle(
      mat,
    );
  }

  late final _RandShufflePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat)>>('RandShuffle');
  late final _RandShuffle = _RandShufflePtr.asFunction<void Function(Mat)>();

  void RandShuffleWithParams(
    Mat mat,
    double iterFactor,
    RNG rng,
  ) {
    return _RandShuffleWithParams(
      mat,
      iterFactor,
      rng,
    );
  }

  late final _RandShuffleWithParamsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, RNG)>>(
          'RandShuffleWithParams');
  late final _RandShuffleWithParams =
      _RandShuffleWithParamsPtr.asFunction<void Function(Mat, double, RNG)>();

  void RandU(
    Mat mat,
    Scalar low,
    Scalar high,
  ) {
    return _RandU(
      mat,
      low,
      high,
    );
  }

  late final _RandUPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar)>>(
          'RandU');
  late final _RandU =
      _RandUPtr.asFunction<void Function(Mat, Scalar, Scalar)>();

  void copyPointVectorToPoint2fVector(
    PointVector src,
    Point2fVector dest,
  ) {
    return _copyPointVectorToPoint2fVector(
      src,
      dest,
    );
  }

  late final _copyPointVectorToPoint2fVectorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(PointVector, Point2fVector)>>(
      'copyPointVectorToPoint2fVector');
  late final _copyPointVectorToPoint2fVector =
      _copyPointVectorToPoint2fVectorPtr
          .asFunction<void Function(PointVector, Point2fVector)>();

  void StdByteVectorInitialize(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _StdByteVectorInitialize(
      data,
    );
  }

  late final _StdByteVectorInitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'StdByteVectorInitialize');
  late final _StdByteVectorInitialize = _StdByteVectorInitializePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  void StdByteVectorFree(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _StdByteVectorFree(
      data,
    );
  }

  late final _StdByteVectorFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'StdByteVectorFree');
  late final _StdByteVectorFree =
      _StdByteVectorFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int StdByteVectorLen(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _StdByteVectorLen(
      data,
    );
  }

  late final _StdByteVectorLenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'StdByteVectorLen');
  late final _StdByteVectorLen =
      _StdByteVectorLenPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Uint8> StdByteVectorData(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _StdByteVectorData(
      data,
    );
  }

  late final _StdByteVectorDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Void>)>>('StdByteVectorData');
  late final _StdByteVectorData = _StdByteVectorDataPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Void>)>();

  UCharVector UCharVector_New() {
    return _UCharVector_New();
  }

  late final _UCharVector_NewPtr =
      _lookup<ffi.NativeFunction<UCharVector Function()>>('UCharVector_New');
  late final _UCharVector_New =
      _UCharVector_NewPtr.asFunction<UCharVector Function()>();

  void UCharVector_Free(
    UCharVector vec,
  ) {
    return _UCharVector_Free(
      vec,
    );
  }

  late final _UCharVector_FreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UCharVector)>>(
          'UCharVector_Free');
  late final _UCharVector_Free =
      _UCharVector_FreePtr.asFunction<void Function(UCharVector)>();

  int UCharVector_Size(
    UCharVector vec,
  ) {
    return _UCharVector_Size(
      vec,
    );
  }

  late final _UCharVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(UCharVector)>>(
          'UCharVector_Size');
  late final _UCharVector_Size =
      _UCharVector_SizePtr.asFunction<int Function(UCharVector)>();

  void UCharVector_Append(
    UCharVector vec,
    int c,
  ) {
    return _UCharVector_Append(
      vec,
      c,
    );
  }

  late final _UCharVector_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UCharVector, uchar)>>(
          'UCharVector_Append');
  late final _UCharVector_Append =
      _UCharVector_AppendPtr.asFunction<void Function(UCharVector, int)>();

  int UCharVector_At(
    UCharVector vec,
    int idx,
  ) {
    return _UCharVector_At(
      vec,
      idx,
    );
  }

  late final _UCharVector_AtPtr =
      _lookup<ffi.NativeFunction<uchar Function(UCharVector, ffi.Int)>>(
          'UCharVector_At');
  late final _UCharVector_At =
      _UCharVector_AtPtr.asFunction<int Function(UCharVector, int)>();

  /// uchar UCharVector_GetData(UCharVector vec);
  Points2fVector Points2fVector_New() {
    return _Points2fVector_New();
  }

  late final _Points2fVector_NewPtr =
      _lookup<ffi.NativeFunction<Points2fVector Function()>>(
          'Points2fVector_New');
  late final _Points2fVector_New =
      _Points2fVector_NewPtr.asFunction<Points2fVector Function()>();

  Points2fVector Points2fVector_NewFromPoints(
    Contours2f points,
  ) {
    return _Points2fVector_NewFromPoints(
      points,
    );
  }

  late final _Points2fVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<Points2fVector Function(Contours2f)>>(
          'Points2fVector_NewFromPoints');
  late final _Points2fVector_NewFromPoints = _Points2fVector_NewFromPointsPtr
      .asFunction<Points2fVector Function(Contours2f)>();

  int Points2fVector_Size(
    Points2fVector ps,
  ) {
    return _Points2fVector_Size(
      ps,
    );
  }

  late final _Points2fVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Points2fVector)>>(
          'Points2fVector_Size');
  late final _Points2fVector_Size =
      _Points2fVector_SizePtr.asFunction<int Function(Points2fVector)>();

  Point2fVector Points2fVector_At(
    Points2fVector ps,
    int idx,
  ) {
    return _Points2fVector_At(
      ps,
      idx,
    );
  }

  late final _Points2fVector_AtPtr = _lookup<
          ffi.NativeFunction<Point2fVector Function(Points2fVector, ffi.Int)>>(
      'Points2fVector_At');
  late final _Points2fVector_At = _Points2fVector_AtPtr.asFunction<
      Point2fVector Function(Points2fVector, int)>();

  void Points2fVector_Append(
    Points2fVector psv,
    Point2fVector pv,
  ) {
    return _Points2fVector_Append(
      psv,
      pv,
    );
  }

  late final _Points2fVector_AppendPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Points2fVector, Point2fVector)>>(
      'Points2fVector_Append');
  late final _Points2fVector_Append = _Points2fVector_AppendPtr.asFunction<
      void Function(Points2fVector, Point2fVector)>();

  void Points2fVector_Close(
    Points2fVector ps,
  ) {
    return _Points2fVector_Close(
      ps,
    );
  }

  late final _Points2fVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Points2fVector)>>(
          'Points2fVector_Close');
  late final _Points2fVector_Close =
      _Points2fVector_ClosePtr.asFunction<void Function(Points2fVector)>();

  Point3fVector Point3fVector_New() {
    return _Point3fVector_New();
  }

  late final _Point3fVector_NewPtr =
      _lookup<ffi.NativeFunction<Point3fVector Function()>>(
          'Point3fVector_New');
  late final _Point3fVector_New =
      _Point3fVector_NewPtr.asFunction<Point3fVector Function()>();

  Point3fVector Point3fVector_NewFromPoints(
    Contour3f points,
  ) {
    return _Point3fVector_NewFromPoints(
      points,
    );
  }

  late final _Point3fVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<Point3fVector Function(Contour3f)>>(
          'Point3fVector_NewFromPoints');
  late final _Point3fVector_NewFromPoints = _Point3fVector_NewFromPointsPtr
      .asFunction<Point3fVector Function(Contour3f)>();

  Point3fVector Point3fVector_NewFromMat(
    Mat mat,
  ) {
    return _Point3fVector_NewFromMat(
      mat,
    );
  }

  late final _Point3fVector_NewFromMatPtr =
      _lookup<ffi.NativeFunction<Point3fVector Function(Mat)>>(
          'Point3fVector_NewFromMat');
  late final _Point3fVector_NewFromMat =
      _Point3fVector_NewFromMatPtr.asFunction<Point3fVector Function(Mat)>();

  void Point3fVector_Append(
    Point3fVector pfv,
    Point3f point,
  ) {
    return _Point3fVector_Append(
      pfv,
      point,
    );
  }

  late final _Point3fVector_AppendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point3fVector, Point3f)>>(
          'Point3fVector_Append');
  late final _Point3fVector_Append = _Point3fVector_AppendPtr.asFunction<
      void Function(Point3fVector, Point3f)>();

  Point3f Point3fVector_At(
    Point3fVector pfv,
    int idx,
  ) {
    return _Point3fVector_At(
      pfv,
      idx,
    );
  }

  late final _Point3fVector_AtPtr =
      _lookup<ffi.NativeFunction<Point3f Function(Point3fVector, ffi.Int)>>(
          'Point3fVector_At');
  late final _Point3fVector_At =
      _Point3fVector_AtPtr.asFunction<Point3f Function(Point3fVector, int)>();

  int Point3fVector_Size(
    Point3fVector pfv,
  ) {
    return _Point3fVector_Size(
      pfv,
    );
  }

  late final _Point3fVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Point3fVector)>>(
          'Point3fVector_Size');
  late final _Point3fVector_Size =
      _Point3fVector_SizePtr.asFunction<int Function(Point3fVector)>();

  void Point3fVector_Close(
    Point3fVector pv,
  ) {
    return _Point3fVector_Close(
      pv,
    );
  }

  late final _Point3fVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Point3fVector)>>(
          'Point3fVector_Close');
  late final _Point3fVector_Close =
      _Point3fVector_ClosePtr.asFunction<void Function(Point3fVector)>();

  Points3fVector Points3fVector_New() {
    return _Points3fVector_New();
  }

  late final _Points3fVector_NewPtr =
      _lookup<ffi.NativeFunction<Points3fVector Function()>>(
          'Points3fVector_New');
  late final _Points3fVector_New =
      _Points3fVector_NewPtr.asFunction<Points3fVector Function()>();

  Points3fVector Points3fVector_NewFromPoints(
    Contours3f points,
  ) {
    return _Points3fVector_NewFromPoints(
      points,
    );
  }

  late final _Points3fVector_NewFromPointsPtr =
      _lookup<ffi.NativeFunction<Points3fVector Function(Contours3f)>>(
          'Points3fVector_NewFromPoints');
  late final _Points3fVector_NewFromPoints = _Points3fVector_NewFromPointsPtr
      .asFunction<Points3fVector Function(Contours3f)>();

  int Points3fVector_Size(
    Points3fVector ps,
  ) {
    return _Points3fVector_Size(
      ps,
    );
  }

  late final _Points3fVector_SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Points3fVector)>>(
          'Points3fVector_Size');
  late final _Points3fVector_Size =
      _Points3fVector_SizePtr.asFunction<int Function(Points3fVector)>();

  Point3fVector Points3fVector_At(
    Points3fVector ps,
    int idx,
  ) {
    return _Points3fVector_At(
      ps,
      idx,
    );
  }

  late final _Points3fVector_AtPtr = _lookup<
          ffi.NativeFunction<Point3fVector Function(Points3fVector, ffi.Int)>>(
      'Points3fVector_At');
  late final _Points3fVector_At = _Points3fVector_AtPtr.asFunction<
      Point3fVector Function(Points3fVector, int)>();

  void Points3fVector_Append(
    Points3fVector psv,
    Point3fVector pv,
  ) {
    return _Points3fVector_Append(
      psv,
      pv,
    );
  }

  late final _Points3fVector_AppendPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Points3fVector, Point3fVector)>>(
      'Points3fVector_Append');
  late final _Points3fVector_Append = _Points3fVector_AppendPtr.asFunction<
      void Function(Points3fVector, Point3fVector)>();

  void Points3fVector_Close(
    Points3fVector ps,
  ) {
    return _Points3fVector_Close(
      ps,
    );
  }

  late final _Points3fVector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Points3fVector)>>(
          'Points3fVector_Close');
  late final _Points3fVector_Close =
      _Points3fVector_ClosePtr.asFunction<void Function(Points3fVector)>();

  void SetNumThreads(
    int n,
  ) {
    return _SetNumThreads(
      n,
    );
  }

  late final _SetNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetNumThreads');
  late final _SetNumThreads =
      _SetNumThreadsPtr.asFunction<void Function(int)>();

  int GetNumThreads() {
    return _GetNumThreads();
  }

  late final _GetNumThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetNumThreads');
  late final _GetNumThreads = _GetNumThreadsPtr.asFunction<int Function()>();

  Net Net_ReadNet(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Char> config,
  ) {
    return _Net_ReadNet(
      model,
      config,
    );
  }

  late final _Net_ReadNetPtr = _lookup<
      ffi.NativeFunction<
          Net Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('Net_ReadNet');
  late final _Net_ReadNet = _Net_ReadNetPtr.asFunction<
      Net Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Net Net_ReadNetBytes(
    ffi.Pointer<ffi.Char> framework,
    ByteArray model,
    ByteArray config,
  ) {
    return _Net_ReadNetBytes(
      framework,
      model,
      config,
    );
  }

  late final _Net_ReadNetBytesPtr = _lookup<
      ffi.NativeFunction<
          Net Function(ffi.Pointer<ffi.Char>, ByteArray,
              ByteArray)>>('Net_ReadNetBytes');
  late final _Net_ReadNetBytes = _Net_ReadNetBytesPtr.asFunction<
      Net Function(ffi.Pointer<ffi.Char>, ByteArray, ByteArray)>();

  Net Net_ReadNetFromCaffe(
    ffi.Pointer<ffi.Char> prototxt,
    ffi.Pointer<ffi.Char> caffeModel,
  ) {
    return _Net_ReadNetFromCaffe(
      prototxt,
      caffeModel,
    );
  }

  late final _Net_ReadNetFromCaffePtr = _lookup<
      ffi.NativeFunction<
          Net Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Net_ReadNetFromCaffe');
  late final _Net_ReadNetFromCaffe = _Net_ReadNetFromCaffePtr.asFunction<
      Net Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Net Net_ReadNetFromCaffeBytes(
    ByteArray prototxt,
    ByteArray caffeModel,
  ) {
    return _Net_ReadNetFromCaffeBytes(
      prototxt,
      caffeModel,
    );
  }

  late final _Net_ReadNetFromCaffeBytesPtr =
      _lookup<ffi.NativeFunction<Net Function(ByteArray, ByteArray)>>(
          'Net_ReadNetFromCaffeBytes');
  late final _Net_ReadNetFromCaffeBytes = _Net_ReadNetFromCaffeBytesPtr
      .asFunction<Net Function(ByteArray, ByteArray)>();

  Net Net_ReadNetFromTensorflow(
    ffi.Pointer<ffi.Char> model,
  ) {
    return _Net_ReadNetFromTensorflow(
      model,
    );
  }

  late final _Net_ReadNetFromTensorflowPtr =
      _lookup<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>(
          'Net_ReadNetFromTensorflow');
  late final _Net_ReadNetFromTensorflow = _Net_ReadNetFromTensorflowPtr
      .asFunction<Net Function(ffi.Pointer<ffi.Char>)>();

  Net Net_ReadNetFromTensorflowBytes(
    ByteArray model,
  ) {
    return _Net_ReadNetFromTensorflowBytes(
      model,
    );
  }

  late final _Net_ReadNetFromTensorflowBytesPtr =
      _lookup<ffi.NativeFunction<Net Function(ByteArray)>>(
          'Net_ReadNetFromTensorflowBytes');
  late final _Net_ReadNetFromTensorflowBytes =
      _Net_ReadNetFromTensorflowBytesPtr.asFunction<Net Function(ByteArray)>();

  Net Net_ReadNetFromTorch(
    ffi.Pointer<ffi.Char> model,
  ) {
    return _Net_ReadNetFromTorch(
      model,
    );
  }

  late final _Net_ReadNetFromTorchPtr =
      _lookup<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>(
          'Net_ReadNetFromTorch');
  late final _Net_ReadNetFromTorch = _Net_ReadNetFromTorchPtr.asFunction<
      Net Function(ffi.Pointer<ffi.Char>)>();

  Net Net_ReadNetFromONNX(
    ffi.Pointer<ffi.Char> model,
  ) {
    return _Net_ReadNetFromONNX(
      model,
    );
  }

  late final _Net_ReadNetFromONNXPtr =
      _lookup<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>(
          'Net_ReadNetFromONNX');
  late final _Net_ReadNetFromONNX =
      _Net_ReadNetFromONNXPtr.asFunction<Net Function(ffi.Pointer<ffi.Char>)>();

  Net Net_ReadNetFromONNXBytes(
    ByteArray model,
  ) {
    return _Net_ReadNetFromONNXBytes(
      model,
    );
  }

  late final _Net_ReadNetFromONNXBytesPtr =
      _lookup<ffi.NativeFunction<Net Function(ByteArray)>>(
          'Net_ReadNetFromONNXBytes');
  late final _Net_ReadNetFromONNXBytes =
      _Net_ReadNetFromONNXBytesPtr.asFunction<Net Function(ByteArray)>();

  Mat Net_BlobFromImage(
    Mat image,
    double scalefactor,
    Size size,
    Scalar mean,
    bool swapRB,
    bool crop,
  ) {
    return _Net_BlobFromImage(
      image,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
    );
  }

  late final _Net_BlobFromImagePtr = _lookup<
      ffi.NativeFunction<
          Mat Function(Mat, ffi.Double, Size, Scalar, ffi.Bool,
              ffi.Bool)>>('Net_BlobFromImage');
  late final _Net_BlobFromImage = _Net_BlobFromImagePtr.asFunction<
      Mat Function(Mat, double, Size, Scalar, bool, bool)>();

  void Net_BlobFromImages(
    Mats images,
    Mat blob,
    double scalefactor,
    Size size,
    Scalar mean,
    bool swapRB,
    bool crop,
    int ddepth,
  ) {
    return _Net_BlobFromImages(
      images,
      blob,
      scalefactor,
      size,
      mean,
      swapRB,
      crop,
      ddepth,
    );
  }

  late final _Net_BlobFromImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mats, Mat, ffi.Double, Size, Scalar, ffi.Bool,
              ffi.Bool, ffi.Int)>>('Net_BlobFromImages');
  late final _Net_BlobFromImages = _Net_BlobFromImagesPtr.asFunction<
      void Function(Mats, Mat, double, Size, Scalar, bool, bool, int)>();

  void Net_ImagesFromBlob(
    Mat blob_,
    ffi.Pointer<Mats> images_,
  ) {
    return _Net_ImagesFromBlob(
      blob_,
      images_,
    );
  }

  late final _Net_ImagesFromBlobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<Mats>)>>(
          'Net_ImagesFromBlob');
  late final _Net_ImagesFromBlob = _Net_ImagesFromBlobPtr.asFunction<
      void Function(Mat, ffi.Pointer<Mats>)>();

  void Net_Close(
    Net net,
  ) {
    return _Net_Close(
      net,
    );
  }

  late final _Net_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Net)>>('Net_Close');
  late final _Net_Close = _Net_ClosePtr.asFunction<void Function(Net)>();

  bool Net_Empty(
    Net net,
  ) {
    return _Net_Empty(
      net,
    );
  }

  late final _Net_EmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Net)>>('Net_Empty');
  late final _Net_Empty = _Net_EmptyPtr.asFunction<bool Function(Net)>();

  void Net_SetInput(
    Net net,
    Mat blob,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _Net_SetInput(
      net,
      blob,
      name,
    );
  }

  late final _Net_SetInputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Net, Mat, ffi.Pointer<ffi.Char>)>>('Net_SetInput');
  late final _Net_SetInput = _Net_SetInputPtr.asFunction<
      void Function(Net, Mat, ffi.Pointer<ffi.Char>)>();

  Mat Net_Forward(
    Net net,
    ffi.Pointer<ffi.Char> outputName,
  ) {
    return _Net_Forward(
      net,
      outputName,
    );
  }

  late final _Net_ForwardPtr =
      _lookup<ffi.NativeFunction<Mat Function(Net, ffi.Pointer<ffi.Char>)>>(
          'Net_Forward');
  late final _Net_Forward =
      _Net_ForwardPtr.asFunction<Mat Function(Net, ffi.Pointer<ffi.Char>)>();

  void Net_ForwardLayers(
    Net net,
    ffi.Pointer<Mats> outputBlobs,
    CStrings outBlobNames,
  ) {
    return _Net_ForwardLayers(
      net,
      outputBlobs,
      outBlobNames,
    );
  }

  late final _Net_ForwardLayersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Net, ffi.Pointer<Mats>, CStrings)>>(
      'Net_ForwardLayers');
  late final _Net_ForwardLayers = _Net_ForwardLayersPtr.asFunction<
      void Function(Net, ffi.Pointer<Mats>, CStrings)>();

  void Net_SetPreferableBackend(
    Net net,
    int backend,
  ) {
    return _Net_SetPreferableBackend(
      net,
      backend,
    );
  }

  late final _Net_SetPreferableBackendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Net, ffi.Int)>>(
          'Net_SetPreferableBackend');
  late final _Net_SetPreferableBackend =
      _Net_SetPreferableBackendPtr.asFunction<void Function(Net, int)>();

  void Net_SetPreferableTarget(
    Net net,
    int target,
  ) {
    return _Net_SetPreferableTarget(
      net,
      target,
    );
  }

  late final _Net_SetPreferableTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Net, ffi.Int)>>(
          'Net_SetPreferableTarget');
  late final _Net_SetPreferableTarget =
      _Net_SetPreferableTargetPtr.asFunction<void Function(Net, int)>();

  int Net_GetPerfProfile(
    Net net,
  ) {
    return _Net_GetPerfProfile(
      net,
    );
  }

  late final _Net_GetPerfProfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(Net)>>(
          'Net_GetPerfProfile');
  late final _Net_GetPerfProfile =
      _Net_GetPerfProfilePtr.asFunction<int Function(Net)>();

  void Net_GetUnconnectedOutLayers(
    Net net,
    ffi.Pointer<IntVector> res,
  ) {
    return _Net_GetUnconnectedOutLayers(
      net,
      res,
    );
  }

  late final _Net_GetUnconnectedOutLayersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Net, ffi.Pointer<IntVector>)>>(
      'Net_GetUnconnectedOutLayers');
  late final _Net_GetUnconnectedOutLayers = _Net_GetUnconnectedOutLayersPtr
      .asFunction<void Function(Net, ffi.Pointer<IntVector>)>();

  void Net_GetLayerNames(
    Net net,
    ffi.Pointer<CStrings> names,
  ) {
    return _Net_GetLayerNames(
      net,
      names,
    );
  }

  late final _Net_GetLayerNamesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Net, ffi.Pointer<CStrings>)>>(
      'Net_GetLayerNames');
  late final _Net_GetLayerNames = _Net_GetLayerNamesPtr.asFunction<
      void Function(Net, ffi.Pointer<CStrings>)>();

  Mat Net_GetBlobChannel(
    Mat blob,
    int imgidx,
    int chnidx,
  ) {
    return _Net_GetBlobChannel(
      blob,
      imgidx,
      chnidx,
    );
  }

  late final _Net_GetBlobChannelPtr =
      _lookup<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>(
          'Net_GetBlobChannel');
  late final _Net_GetBlobChannel =
      _Net_GetBlobChannelPtr.asFunction<Mat Function(Mat, int, int)>();

  Scalar Net_GetBlobSize(
    Mat blob,
  ) {
    return _Net_GetBlobSize(
      blob,
    );
  }

  late final _Net_GetBlobSizePtr =
      _lookup<ffi.NativeFunction<Scalar Function(Mat)>>('Net_GetBlobSize');
  late final _Net_GetBlobSize =
      _Net_GetBlobSizePtr.asFunction<Scalar Function(Mat)>();

  Layer Net_GetLayer(
    Net net,
    int layerid,
  ) {
    return _Net_GetLayer(
      net,
      layerid,
    );
  }

  late final _Net_GetLayerPtr =
      _lookup<ffi.NativeFunction<Layer Function(Net, ffi.Int)>>('Net_GetLayer');
  late final _Net_GetLayer =
      _Net_GetLayerPtr.asFunction<Layer Function(Net, int)>();

  void Layer_Close(
    Layer layer,
  ) {
    return _Layer_Close(
      layer,
    );
  }

  late final _Layer_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Layer)>>('Layer_Close');
  late final _Layer_Close = _Layer_ClosePtr.asFunction<void Function(Layer)>();

  int Layer_InputNameToIndex(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _Layer_InputNameToIndex(
      layer,
      name,
    );
  }

  late final _Layer_InputNameToIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Layer, ffi.Pointer<ffi.Char>)>>(
      'Layer_InputNameToIndex');
  late final _Layer_InputNameToIndex = _Layer_InputNameToIndexPtr.asFunction<
      int Function(Layer, ffi.Pointer<ffi.Char>)>();

  int Layer_OutputNameToIndex(
    Layer layer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _Layer_OutputNameToIndex(
      layer,
      name,
    );
  }

  late final _Layer_OutputNameToIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Layer, ffi.Pointer<ffi.Char>)>>(
      'Layer_OutputNameToIndex');
  late final _Layer_OutputNameToIndex = _Layer_OutputNameToIndexPtr.asFunction<
      int Function(Layer, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> Layer_GetName(
    Layer layer,
  ) {
    return _Layer_GetName(
      layer,
    );
  }

  late final _Layer_GetNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Layer)>>(
          'Layer_GetName');
  late final _Layer_GetName =
      _Layer_GetNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(Layer)>();

  ffi.Pointer<ffi.Char> Layer_GetType(
    Layer layer,
  ) {
    return _Layer_GetType(
      layer,
    );
  }

  late final _Layer_GetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Layer)>>(
          'Layer_GetType');
  late final _Layer_GetType =
      _Layer_GetTypePtr.asFunction<ffi.Pointer<ffi.Char> Function(Layer)>();

  void NMSBoxes(
    Rects bboxes,
    FloatVector scores,
    double score_threshold,
    double nms_threshold,
    ffi.Pointer<IntVector> indices,
  ) {
    return _NMSBoxes(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      indices,
    );
  }

  late final _NMSBoxesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rects, FloatVector, ffi.Float, ffi.Float,
              ffi.Pointer<IntVector>)>>('NMSBoxes');
  late final _NMSBoxes = _NMSBoxesPtr.asFunction<
      void Function(
          Rects, FloatVector, double, double, ffi.Pointer<IntVector>)>();

  void NMSBoxesWithParams(
    Rects bboxes,
    FloatVector scores,
    double score_threshold,
    double nms_threshold,
    ffi.Pointer<IntVector> indices,
    double eta,
    int top_k,
  ) {
    return _NMSBoxesWithParams(
      bboxes,
      scores,
      score_threshold,
      nms_threshold,
      indices,
      eta,
      top_k,
    );
  }

  late final _NMSBoxesWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Rects,
              FloatVector,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<IntVector>,
              ffi.Float,
              ffi.Int)>>('NMSBoxesWithParams');
  late final _NMSBoxesWithParams = _NMSBoxesWithParamsPtr.asFunction<
      void Function(Rects, FloatVector, double, double, ffi.Pointer<IntVector>,
          double, int)>();

  AKAZE AKAZE_Create() {
    return _AKAZE_Create();
  }

  late final _AKAZE_CreatePtr =
      _lookup<ffi.NativeFunction<AKAZE Function()>>('AKAZE_Create');
  late final _AKAZE_Create = _AKAZE_CreatePtr.asFunction<AKAZE Function()>();

  void AKAZE_Close(
    AKAZE a,
  ) {
    return _AKAZE_Close(
      a,
    );
  }

  late final _AKAZE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AKAZE)>>('AKAZE_Close');
  late final _AKAZE_Close = _AKAZE_ClosePtr.asFunction<void Function(AKAZE)>();

  KeyPoints AKAZE_Detect(
    AKAZE a,
    Mat src,
  ) {
    return _AKAZE_Detect(
      a,
      src,
    );
  }

  late final _AKAZE_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(AKAZE, Mat)>>(
          'AKAZE_Detect');
  late final _AKAZE_Detect =
      _AKAZE_DetectPtr.asFunction<KeyPoints Function(AKAZE, Mat)>();

  KeyPoints AKAZE_DetectAndCompute(
    AKAZE a,
    Mat src,
    Mat mask,
    Mat desc,
  ) {
    return _AKAZE_DetectAndCompute(
      a,
      src,
      mask,
      desc,
    );
  }

  late final _AKAZE_DetectAndComputePtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(AKAZE, Mat, Mat, Mat)>>(
          'AKAZE_DetectAndCompute');
  late final _AKAZE_DetectAndCompute = _AKAZE_DetectAndComputePtr.asFunction<
      KeyPoints Function(AKAZE, Mat, Mat, Mat)>();

  AgastFeatureDetector AgastFeatureDetector_Create() {
    return _AgastFeatureDetector_Create();
  }

  late final _AgastFeatureDetector_CreatePtr =
      _lookup<ffi.NativeFunction<AgastFeatureDetector Function()>>(
          'AgastFeatureDetector_Create');
  late final _AgastFeatureDetector_Create = _AgastFeatureDetector_CreatePtr
      .asFunction<AgastFeatureDetector Function()>();

  void AgastFeatureDetector_Close(
    AgastFeatureDetector a,
  ) {
    return _AgastFeatureDetector_Close(
      a,
    );
  }

  late final _AgastFeatureDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetector)>>(
          'AgastFeatureDetector_Close');
  late final _AgastFeatureDetector_Close = _AgastFeatureDetector_ClosePtr
      .asFunction<void Function(AgastFeatureDetector)>();

  KeyPoints AgastFeatureDetector_Detect(
    AgastFeatureDetector a,
    Mat src,
  ) {
    return _AgastFeatureDetector_Detect(
      a,
      src,
    );
  }

  late final _AgastFeatureDetector_DetectPtr = _lookup<
          ffi.NativeFunction<KeyPoints Function(AgastFeatureDetector, Mat)>>(
      'AgastFeatureDetector_Detect');
  late final _AgastFeatureDetector_Detect = _AgastFeatureDetector_DetectPtr
      .asFunction<KeyPoints Function(AgastFeatureDetector, Mat)>();

  BRISK BRISK_Create() {
    return _BRISK_Create();
  }

  late final _BRISK_CreatePtr =
      _lookup<ffi.NativeFunction<BRISK Function()>>('BRISK_Create');
  late final _BRISK_Create = _BRISK_CreatePtr.asFunction<BRISK Function()>();

  void BRISK_Close(
    BRISK b,
  ) {
    return _BRISK_Close(
      b,
    );
  }

  late final _BRISK_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BRISK)>>('BRISK_Close');
  late final _BRISK_Close = _BRISK_ClosePtr.asFunction<void Function(BRISK)>();

  KeyPoints BRISK_Detect(
    BRISK b,
    Mat src,
  ) {
    return _BRISK_Detect(
      b,
      src,
    );
  }

  late final _BRISK_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(BRISK, Mat)>>(
          'BRISK_Detect');
  late final _BRISK_Detect =
      _BRISK_DetectPtr.asFunction<KeyPoints Function(BRISK, Mat)>();

  KeyPoints BRISK_DetectAndCompute(
    BRISK b,
    Mat src,
    Mat mask,
    Mat desc,
  ) {
    return _BRISK_DetectAndCompute(
      b,
      src,
      mask,
      desc,
    );
  }

  late final _BRISK_DetectAndComputePtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(BRISK, Mat, Mat, Mat)>>(
          'BRISK_DetectAndCompute');
  late final _BRISK_DetectAndCompute = _BRISK_DetectAndComputePtr.asFunction<
      KeyPoints Function(BRISK, Mat, Mat, Mat)>();

  FastFeatureDetector FastFeatureDetector_Create() {
    return _FastFeatureDetector_Create();
  }

  late final _FastFeatureDetector_CreatePtr =
      _lookup<ffi.NativeFunction<FastFeatureDetector Function()>>(
          'FastFeatureDetector_Create');
  late final _FastFeatureDetector_Create = _FastFeatureDetector_CreatePtr
      .asFunction<FastFeatureDetector Function()>();

  FastFeatureDetector FastFeatureDetector_CreateWithParams(
    int threshold,
    bool nonmaxSuppression,
    int type,
  ) {
    return _FastFeatureDetector_CreateWithParams(
      threshold,
      nonmaxSuppression,
      type,
    );
  }

  late final _FastFeatureDetector_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          FastFeatureDetector Function(ffi.Int, ffi.Bool,
              ffi.Int)>>('FastFeatureDetector_CreateWithParams');
  late final _FastFeatureDetector_CreateWithParams =
      _FastFeatureDetector_CreateWithParamsPtr.asFunction<
          FastFeatureDetector Function(int, bool, int)>();

  void FastFeatureDetector_Close(
    FastFeatureDetector f,
  ) {
    return _FastFeatureDetector_Close(
      f,
    );
  }

  late final _FastFeatureDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FastFeatureDetector)>>(
          'FastFeatureDetector_Close');
  late final _FastFeatureDetector_Close = _FastFeatureDetector_ClosePtr
      .asFunction<void Function(FastFeatureDetector)>();

  KeyPoints FastFeatureDetector_Detect(
    FastFeatureDetector f,
    Mat src,
  ) {
    return _FastFeatureDetector_Detect(
      f,
      src,
    );
  }

  late final _FastFeatureDetector_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(FastFeatureDetector, Mat)>>(
          'FastFeatureDetector_Detect');
  late final _FastFeatureDetector_Detect = _FastFeatureDetector_DetectPtr
      .asFunction<KeyPoints Function(FastFeatureDetector, Mat)>();

  GFTTDetector GFTTDetector_Create() {
    return _GFTTDetector_Create();
  }

  late final _GFTTDetector_CreatePtr =
      _lookup<ffi.NativeFunction<GFTTDetector Function()>>(
          'GFTTDetector_Create');
  late final _GFTTDetector_Create =
      _GFTTDetector_CreatePtr.asFunction<GFTTDetector Function()>();

  void GFTTDetector_Close(
    GFTTDetector a,
  ) {
    return _GFTTDetector_Close(
      a,
    );
  }

  late final _GFTTDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(GFTTDetector)>>(
          'GFTTDetector_Close');
  late final _GFTTDetector_Close =
      _GFTTDetector_ClosePtr.asFunction<void Function(GFTTDetector)>();

  KeyPoints GFTTDetector_Detect(
    GFTTDetector a,
    Mat src,
  ) {
    return _GFTTDetector_Detect(
      a,
      src,
    );
  }

  late final _GFTTDetector_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(GFTTDetector, Mat)>>(
          'GFTTDetector_Detect');
  late final _GFTTDetector_Detect = _GFTTDetector_DetectPtr.asFunction<
      KeyPoints Function(GFTTDetector, Mat)>();

  KAZE KAZE_Create() {
    return _KAZE_Create();
  }

  late final _KAZE_CreatePtr =
      _lookup<ffi.NativeFunction<KAZE Function()>>('KAZE_Create');
  late final _KAZE_Create = _KAZE_CreatePtr.asFunction<KAZE Function()>();

  void KAZE_Close(
    KAZE a,
  ) {
    return _KAZE_Close(
      a,
    );
  }

  late final _KAZE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KAZE)>>('KAZE_Close');
  late final _KAZE_Close = _KAZE_ClosePtr.asFunction<void Function(KAZE)>();

  KeyPoints KAZE_Detect(
    KAZE a,
    Mat src,
  ) {
    return _KAZE_Detect(
      a,
      src,
    );
  }

  late final _KAZE_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(KAZE, Mat)>>('KAZE_Detect');
  late final _KAZE_Detect =
      _KAZE_DetectPtr.asFunction<KeyPoints Function(KAZE, Mat)>();

  KeyPoints KAZE_DetectAndCompute(
    KAZE a,
    Mat src,
    Mat mask,
    Mat desc,
  ) {
    return _KAZE_DetectAndCompute(
      a,
      src,
      mask,
      desc,
    );
  }

  late final _KAZE_DetectAndComputePtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(KAZE, Mat, Mat, Mat)>>(
          'KAZE_DetectAndCompute');
  late final _KAZE_DetectAndCompute = _KAZE_DetectAndComputePtr.asFunction<
      KeyPoints Function(KAZE, Mat, Mat, Mat)>();

  MSER MSER_Create() {
    return _MSER_Create();
  }

  late final _MSER_CreatePtr =
      _lookup<ffi.NativeFunction<MSER Function()>>('MSER_Create');
  late final _MSER_Create = _MSER_CreatePtr.asFunction<MSER Function()>();

  void MSER_Close(
    MSER a,
  ) {
    return _MSER_Close(
      a,
    );
  }

  late final _MSER_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MSER)>>('MSER_Close');
  late final _MSER_Close = _MSER_ClosePtr.asFunction<void Function(MSER)>();

  KeyPoints MSER_Detect(
    MSER a,
    Mat src,
  ) {
    return _MSER_Detect(
      a,
      src,
    );
  }

  late final _MSER_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(MSER, Mat)>>('MSER_Detect');
  late final _MSER_Detect =
      _MSER_DetectPtr.asFunction<KeyPoints Function(MSER, Mat)>();

  ORB ORB_Create() {
    return _ORB_Create();
  }

  late final _ORB_CreatePtr =
      _lookup<ffi.NativeFunction<ORB Function()>>('ORB_Create');
  late final _ORB_Create = _ORB_CreatePtr.asFunction<ORB Function()>();

  ORB ORB_CreateWithParams(
    int nfeatures,
    double scaleFactor,
    int nlevels,
    int edgeThreshold,
    int firstLevel,
    int WTA_K,
    int scoreType,
    int patchSize,
    int fastThreshold,
  ) {
    return _ORB_CreateWithParams(
      nfeatures,
      scaleFactor,
      nlevels,
      edgeThreshold,
      firstLevel,
      WTA_K,
      scoreType,
      patchSize,
      fastThreshold,
    );
  }

  late final _ORB_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ORB Function(ffi.Int, ffi.Float, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int)>>('ORB_CreateWithParams');
  late final _ORB_CreateWithParams = _ORB_CreateWithParamsPtr.asFunction<
      ORB Function(int, double, int, int, int, int, int, int, int)>();

  void ORB_Close(
    ORB o,
  ) {
    return _ORB_Close(
      o,
    );
  }

  late final _ORB_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ORB)>>('ORB_Close');
  late final _ORB_Close = _ORB_ClosePtr.asFunction<void Function(ORB)>();

  KeyPoints ORB_Detect(
    ORB o,
    Mat src,
  ) {
    return _ORB_Detect(
      o,
      src,
    );
  }

  late final _ORB_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(ORB, Mat)>>('ORB_Detect');
  late final _ORB_Detect =
      _ORB_DetectPtr.asFunction<KeyPoints Function(ORB, Mat)>();

  KeyPoints ORB_DetectAndCompute(
    ORB o,
    Mat src,
    Mat mask,
    Mat desc,
  ) {
    return _ORB_DetectAndCompute(
      o,
      src,
      mask,
      desc,
    );
  }

  late final _ORB_DetectAndComputePtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(ORB, Mat, Mat, Mat)>>(
          'ORB_DetectAndCompute');
  late final _ORB_DetectAndCompute = _ORB_DetectAndComputePtr.asFunction<
      KeyPoints Function(ORB, Mat, Mat, Mat)>();

  SimpleBlobDetector SimpleBlobDetector_Create() {
    return _SimpleBlobDetector_Create();
  }

  late final _SimpleBlobDetector_CreatePtr =
      _lookup<ffi.NativeFunction<SimpleBlobDetector Function()>>(
          'SimpleBlobDetector_Create');
  late final _SimpleBlobDetector_Create =
      _SimpleBlobDetector_CreatePtr.asFunction<SimpleBlobDetector Function()>();

  SimpleBlobDetector SimpleBlobDetector_Create_WithParams(
    SimpleBlobDetectorParams params,
  ) {
    return _SimpleBlobDetector_Create_WithParams(
      params,
    );
  }

  late final _SimpleBlobDetector_Create_WithParamsPtr = _lookup<
          ffi.NativeFunction<
              SimpleBlobDetector Function(SimpleBlobDetectorParams)>>(
      'SimpleBlobDetector_Create_WithParams');
  late final _SimpleBlobDetector_Create_WithParams =
      _SimpleBlobDetector_Create_WithParamsPtr.asFunction<
          SimpleBlobDetector Function(SimpleBlobDetectorParams)>();

  void SimpleBlobDetector_Close(
    SimpleBlobDetector b,
  ) {
    return _SimpleBlobDetector_Close(
      b,
    );
  }

  late final _SimpleBlobDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetector)>>(
          'SimpleBlobDetector_Close');
  late final _SimpleBlobDetector_Close = _SimpleBlobDetector_ClosePtr
      .asFunction<void Function(SimpleBlobDetector)>();

  KeyPoints SimpleBlobDetector_Detect(
    SimpleBlobDetector b,
    Mat src,
  ) {
    return _SimpleBlobDetector_Detect(
      b,
      src,
    );
  }

  late final _SimpleBlobDetector_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(SimpleBlobDetector, Mat)>>(
          'SimpleBlobDetector_Detect');
  late final _SimpleBlobDetector_Detect = _SimpleBlobDetector_DetectPtr
      .asFunction<KeyPoints Function(SimpleBlobDetector, Mat)>();

  SimpleBlobDetectorParams SimpleBlobDetectorParams_Create() {
    return _SimpleBlobDetectorParams_Create();
  }

  late final _SimpleBlobDetectorParams_CreatePtr =
      _lookup<ffi.NativeFunction<SimpleBlobDetectorParams Function()>>(
          'SimpleBlobDetectorParams_Create');
  late final _SimpleBlobDetectorParams_Create =
      _SimpleBlobDetectorParams_CreatePtr.asFunction<
          SimpleBlobDetectorParams Function()>();

  BFMatcher BFMatcher_Create() {
    return _BFMatcher_Create();
  }

  late final _BFMatcher_CreatePtr =
      _lookup<ffi.NativeFunction<BFMatcher Function()>>('BFMatcher_Create');
  late final _BFMatcher_Create =
      _BFMatcher_CreatePtr.asFunction<BFMatcher Function()>();

  BFMatcher BFMatcher_CreateWithParams(
    int normType,
    bool crossCheck,
  ) {
    return _BFMatcher_CreateWithParams(
      normType,
      crossCheck,
    );
  }

  late final _BFMatcher_CreateWithParamsPtr =
      _lookup<ffi.NativeFunction<BFMatcher Function(ffi.Int, ffi.Bool)>>(
          'BFMatcher_CreateWithParams');
  late final _BFMatcher_CreateWithParams = _BFMatcher_CreateWithParamsPtr
      .asFunction<BFMatcher Function(int, bool)>();

  void BFMatcher_Close(
    BFMatcher b,
  ) {
    return _BFMatcher_Close(
      b,
    );
  }

  late final _BFMatcher_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BFMatcher)>>(
          'BFMatcher_Close');
  late final _BFMatcher_Close =
      _BFMatcher_ClosePtr.asFunction<void Function(BFMatcher)>();

  DMatches BFMatcher_Match(
    BFMatcher b,
    Mat query,
    Mat train,
  ) {
    return _BFMatcher_Match(
      b,
      query,
      train,
    );
  }

  late final _BFMatcher_MatchPtr =
      _lookup<ffi.NativeFunction<DMatches Function(BFMatcher, Mat, Mat)>>(
          'BFMatcher_Match');
  late final _BFMatcher_Match =
      _BFMatcher_MatchPtr.asFunction<DMatches Function(BFMatcher, Mat, Mat)>();

  MultiDMatches BFMatcher_KnnMatch(
    BFMatcher b,
    Mat query,
    Mat train,
    int k,
  ) {
    return _BFMatcher_KnnMatch(
      b,
      query,
      train,
      k,
    );
  }

  late final _BFMatcher_KnnMatchPtr = _lookup<
      ffi.NativeFunction<
          MultiDMatches Function(
              BFMatcher, Mat, Mat, ffi.Int)>>('BFMatcher_KnnMatch');
  late final _BFMatcher_KnnMatch = _BFMatcher_KnnMatchPtr.asFunction<
      MultiDMatches Function(BFMatcher, Mat, Mat, int)>();

  FlannBasedMatcher FlannBasedMatcher_Create() {
    return _FlannBasedMatcher_Create();
  }

  late final _FlannBasedMatcher_CreatePtr =
      _lookup<ffi.NativeFunction<FlannBasedMatcher Function()>>(
          'FlannBasedMatcher_Create');
  late final _FlannBasedMatcher_Create =
      _FlannBasedMatcher_CreatePtr.asFunction<FlannBasedMatcher Function()>();

  void FlannBasedMatcher_Close(
    FlannBasedMatcher f,
  ) {
    return _FlannBasedMatcher_Close(
      f,
    );
  }

  late final _FlannBasedMatcher_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcher)>>(
          'FlannBasedMatcher_Close');
  late final _FlannBasedMatcher_Close = _FlannBasedMatcher_ClosePtr.asFunction<
      void Function(FlannBasedMatcher)>();

  MultiDMatches FlannBasedMatcher_KnnMatch(
    FlannBasedMatcher f,
    Mat query,
    Mat train,
    int k,
  ) {
    return _FlannBasedMatcher_KnnMatch(
      f,
      query,
      train,
      k,
    );
  }

  late final _FlannBasedMatcher_KnnMatchPtr = _lookup<
      ffi.NativeFunction<
          MultiDMatches Function(FlannBasedMatcher, Mat, Mat,
              ffi.Int)>>('FlannBasedMatcher_KnnMatch');
  late final _FlannBasedMatcher_KnnMatch = _FlannBasedMatcher_KnnMatchPtr
      .asFunction<MultiDMatches Function(FlannBasedMatcher, Mat, Mat, int)>();

  void DrawKeyPoints(
    Mat src,
    KeyPoints kp,
    Mat dst,
    Scalar s,
    int flags,
  ) {
    return _DrawKeyPoints(
      src,
      kp,
      dst,
      s,
      flags,
    );
  }

  late final _DrawKeyPointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, KeyPoints, Mat, Scalar, ffi.Int)>>('DrawKeyPoints');
  late final _DrawKeyPoints = _DrawKeyPointsPtr.asFunction<
      void Function(Mat, KeyPoints, Mat, Scalar, int)>();

  SIFT SIFT_Create() {
    return _SIFT_Create();
  }

  late final _SIFT_CreatePtr =
      _lookup<ffi.NativeFunction<SIFT Function()>>('SIFT_Create');
  late final _SIFT_Create = _SIFT_CreatePtr.asFunction<SIFT Function()>();

  void SIFT_Close(
    SIFT f,
  ) {
    return _SIFT_Close(
      f,
    );
  }

  late final _SIFT_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SIFT)>>('SIFT_Close');
  late final _SIFT_Close = _SIFT_ClosePtr.asFunction<void Function(SIFT)>();

  KeyPoints SIFT_Detect(
    SIFT f,
    Mat src,
  ) {
    return _SIFT_Detect(
      f,
      src,
    );
  }

  late final _SIFT_DetectPtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(SIFT, Mat)>>('SIFT_Detect');
  late final _SIFT_Detect =
      _SIFT_DetectPtr.asFunction<KeyPoints Function(SIFT, Mat)>();

  KeyPoints SIFT_DetectAndCompute(
    SIFT f,
    Mat src,
    Mat mask,
    Mat desc,
  ) {
    return _SIFT_DetectAndCompute(
      f,
      src,
      mask,
      desc,
    );
  }

  late final _SIFT_DetectAndComputePtr =
      _lookup<ffi.NativeFunction<KeyPoints Function(SIFT, Mat, Mat, Mat)>>(
          'SIFT_DetectAndCompute');
  late final _SIFT_DetectAndCompute = _SIFT_DetectAndComputePtr.asFunction<
      KeyPoints Function(SIFT, Mat, Mat, Mat)>();

  void DrawMatches(
    Mat img1,
    KeyPoints kp1,
    Mat img2,
    KeyPoints kp2,
    DMatches matches1to2,
    Mat outImg,
    Scalar matchesColor,
    Scalar pointColor,
    ByteArray matchesMask,
    int flags,
  ) {
    return _DrawMatches(
      img1,
      kp1,
      img2,
      kp2,
      matches1to2,
      outImg,
      matchesColor,
      pointColor,
      matchesMask,
      flags,
    );
  }

  late final _DrawMatchesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, KeyPoints, Mat, KeyPoints, DMatches, Mat,
              Scalar, Scalar, ByteArray, ffi.Int)>>('DrawMatches');
  late final _DrawMatches = _DrawMatchesPtr.asFunction<
      void Function(Mat, KeyPoints, Mat, KeyPoints, DMatches, Mat, Scalar,
          Scalar, ByteArray, int)>();

  /// Window
  void Window_New(
    ffi.Pointer<ffi.Char> winname,
    int flags,
  ) {
    return _Window_New(
      winname,
      flags,
    );
  }

  late final _Window_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('Window_New');
  late final _Window_New =
      _Window_NewPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void Window_Close(
    ffi.Pointer<ffi.Char> winname,
  ) {
    return _Window_Close(
      winname,
    );
  }

  late final _Window_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'Window_Close');
  late final _Window_Close =
      _Window_ClosePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void Window_IMShow(
    ffi.Pointer<ffi.Char> winname,
    Mat mat,
  ) {
    return _Window_IMShow(
      winname,
      mat,
    );
  }

  late final _Window_IMShowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, Mat)>>(
      'Window_IMShow');
  late final _Window_IMShow =
      _Window_IMShowPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, Mat)>();

  double Window_GetProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
  ) {
    return _Window_GetProperty(
      winname,
      flag,
    );
  }

  late final _Window_GetPropertyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'Window_GetProperty');
  late final _Window_GetProperty = _Window_GetPropertyPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, int)>();

  void Window_SetProperty(
    ffi.Pointer<ffi.Char> winname,
    int flag,
    double value,
  ) {
    return _Window_SetProperty(
      winname,
      flag,
      value,
    );
  }

  late final _Window_SetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Double)>>('Window_SetProperty');
  late final _Window_SetProperty = _Window_SetPropertyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, double)>();

  void Window_SetTitle(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _Window_SetTitle(
      winname,
      title,
    );
  }

  late final _Window_SetTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Window_SetTitle');
  late final _Window_SetTitle = _Window_SetTitlePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int Window_WaitKey(
    int arg0,
  ) {
    return _Window_WaitKey(
      arg0,
    );
  }

  late final _Window_WaitKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('Window_WaitKey');
  late final _Window_WaitKey =
      _Window_WaitKeyPtr.asFunction<int Function(int)>();

  void Window_Move(
    ffi.Pointer<ffi.Char> winname,
    int x,
    int y,
  ) {
    return _Window_Move(
      winname,
      x,
      y,
    );
  }

  late final _Window_MovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('Window_Move');
  late final _Window_Move = _Window_MovePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int)>();

  void Window_Resize(
    ffi.Pointer<ffi.Char> winname,
    int width,
    int height,
  ) {
    return _Window_Resize(
      winname,
      width,
      height,
    );
  }

  late final _Window_ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('Window_Resize');
  late final _Window_Resize = _Window_ResizePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int)>();

  Rect Window_SelectROI(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
  ) {
    return _Window_SelectROI(
      winname,
      img,
    );
  }

  late final _Window_SelectROIPtr =
      _lookup<ffi.NativeFunction<Rect Function(ffi.Pointer<ffi.Char>, Mat)>>(
          'Window_SelectROI');
  late final _Window_SelectROI = _Window_SelectROIPtr.asFunction<
      Rect Function(ffi.Pointer<ffi.Char>, Mat)>();

  Rects Window_SelectROIs(
    ffi.Pointer<ffi.Char> winname,
    Mat img,
  ) {
    return _Window_SelectROIs(
      winname,
      img,
    );
  }

  late final _Window_SelectROIsPtr =
      _lookup<ffi.NativeFunction<Rects Function(ffi.Pointer<ffi.Char>, Mat)>>(
          'Window_SelectROIs');
  late final _Window_SelectROIs = _Window_SelectROIsPtr.asFunction<
      Rects Function(ffi.Pointer<ffi.Char>, Mat)>();

  /// Trackbar
  void Trackbar_Create(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int max,
  ) {
    return _Trackbar_Create(
      winname,
      trackname,
      max,
    );
  }

  late final _Trackbar_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Trackbar_Create');
  late final _Trackbar_Create = _Trackbar_CreatePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void Trackbar_CreateWithValue(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    ffi.Pointer<ffi.Int> value,
    int max,
  ) {
    return _Trackbar_CreateWithValue(
      winname,
      trackname,
      value,
      max,
    );
  }

  late final _Trackbar_CreateWithValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('Trackbar_CreateWithValue');
  late final _Trackbar_CreateWithValue =
      _Trackbar_CreateWithValuePtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, int)>();

  int Trackbar_GetPos(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
  ) {
    return _Trackbar_GetPos(
      winname,
      trackname,
    );
  }

  late final _Trackbar_GetPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Trackbar_GetPos');
  late final _Trackbar_GetPos = _Trackbar_GetPosPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void Trackbar_SetPos(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetPos(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Trackbar_SetPos');
  late final _Trackbar_SetPos = _Trackbar_SetPosPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void Trackbar_SetMin(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetMin(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Trackbar_SetMin');
  late final _Trackbar_SetMin = _Trackbar_SetMinPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void Trackbar_SetMax(
    ffi.Pointer<ffi.Char> winname,
    ffi.Pointer<ffi.Char> trackname,
    int pos,
  ) {
    return _Trackbar_SetMax(
      winname,
      trackname,
      pos,
    );
  }

  late final _Trackbar_SetMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Trackbar_SetMax');
  late final _Trackbar_SetMax = _Trackbar_SetMaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  Mat Image_IMRead(
    ffi.Pointer<ffi.Char> filename,
    int flags,
  ) {
    return _Image_IMRead(
      filename,
      flags,
    );
  }

  late final _Image_IMReadPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
          'Image_IMRead');
  late final _Image_IMRead =
      _Image_IMReadPtr.asFunction<Mat Function(ffi.Pointer<ffi.Char>, int)>();

  bool Image_IMWrite(
    ffi.Pointer<ffi.Char> filename,
    Mat img,
  ) {
    return _Image_IMWrite(
      filename,
      img,
    );
  }

  late final _Image_IMWritePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, Mat)>>(
      'Image_IMWrite');
  late final _Image_IMWrite =
      _Image_IMWritePtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, Mat)>();

  bool Image_IMWrite_WithParams(
    ffi.Pointer<ffi.Char> filename,
    Mat img,
    IntVector params,
  ) {
    return _Image_IMWrite_WithParams(
      filename,
      img,
      params,
    );
  }

  late final _Image_IMWrite_WithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, Mat,
              IntVector)>>('Image_IMWrite_WithParams');
  late final _Image_IMWrite_WithParams = _Image_IMWrite_WithParamsPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, Mat, IntVector)>();

  void Image_IMEncode(
    ffi.Pointer<ffi.Char> fileExt,
    Mat img,
    ffi.Pointer<ffi.Void> vector,
  ) {
    return _Image_IMEncode(
      fileExt,
      img,
      vector,
    );
  }

  late final _Image_IMEncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, Mat,
              ffi.Pointer<ffi.Void>)>>('Image_IMEncode');
  late final _Image_IMEncode = _Image_IMEncodePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Void>)>();

  void Image_IMEncode_WithParams(
    ffi.Pointer<ffi.Char> fileExt,
    Mat img,
    IntVector params,
    ffi.Pointer<ffi.Void> vector,
  ) {
    return _Image_IMEncode_WithParams(
      fileExt,
      img,
      params,
      vector,
    );
  }

  late final _Image_IMEncode_WithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, Mat, IntVector,
              ffi.Pointer<ffi.Void>)>>('Image_IMEncode_WithParams');
  late final _Image_IMEncode_WithParams =
      _Image_IMEncode_WithParamsPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>, Mat, IntVector, ffi.Pointer<ffi.Void>)>();

  Mat Image_IMDecode(
    UCharVector buf,
    int flags,
  ) {
    return _Image_IMDecode(
      buf,
      flags,
    );
  }

  late final _Image_IMDecodePtr =
      _lookup<ffi.NativeFunction<Mat Function(UCharVector, ffi.Int)>>(
          'Image_IMDecode');
  late final _Image_IMDecode =
      _Image_IMDecodePtr.asFunction<Mat Function(UCharVector, int)>();

  void Image_IMDecodeIntoMat(
    UCharVector buf,
    int flag,
    Mat dest,
  ) {
    return _Image_IMDecodeIntoMat(
      buf,
      flag,
      dest,
    );
  }

  late final _Image_IMDecodeIntoMatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UCharVector, ffi.Int, Mat)>>(
          'Image_IMDecodeIntoMat');
  late final _Image_IMDecodeIntoMat = _Image_IMDecodeIntoMatPtr.asFunction<
      void Function(UCharVector, int, Mat)>();

  double ArcLength(
    PointVector curve,
    bool is_closed,
  ) {
    return _ArcLength(
      curve,
      is_closed,
    );
  }

  late final _ArcLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(PointVector, ffi.Bool)>>(
          'ArcLength');
  late final _ArcLength =
      _ArcLengthPtr.asFunction<double Function(PointVector, bool)>();

  PointVector ApproxPolyDP(
    PointVector curve,
    double epsilon,
    bool closed,
  ) {
    return _ApproxPolyDP(
      curve,
      epsilon,
      closed,
    );
  }

  late final _ApproxPolyDPPtr = _lookup<
      ffi.NativeFunction<
          PointVector Function(
              PointVector, ffi.Double, ffi.Bool)>>('ApproxPolyDP');
  late final _ApproxPolyDP = _ApproxPolyDPPtr.asFunction<
      PointVector Function(PointVector, double, bool)>();

  void CvtColor(
    Mat src,
    Mat dst,
    int code,
  ) {
    return _CvtColor(
      src,
      dst,
      code,
    );
  }

  late final _CvtColorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'CvtColor');
  late final _CvtColor =
      _CvtColorPtr.asFunction<void Function(Mat, Mat, int)>();

  void EqualizeHist(
    Mat src,
    Mat dst,
  ) {
    return _EqualizeHist(
      src,
      dst,
    );
  }

  late final _EqualizeHistPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('EqualizeHist');
  late final _EqualizeHist =
      _EqualizeHistPtr.asFunction<void Function(Mat, Mat)>();

  void CalcHist(
    Mats mats,
    IntVector chans,
    Mat mask,
    Mat hist,
    IntVector sz,
    FloatVector rng,
    bool acc,
  ) {
    return _CalcHist(
      mats,
      chans,
      mask,
      hist,
      sz,
      rng,
      acc,
    );
  }

  late final _CalcHistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mats, IntVector, Mat, Mat, IntVector, FloatVector,
              ffi.Bool)>>('CalcHist');
  late final _CalcHist = _CalcHistPtr.asFunction<
      void Function(Mats, IntVector, Mat, Mat, IntVector, FloatVector, bool)>();

  void CalcBackProject(
    Mats mats,
    IntVector chans,
    Mat hist,
    Mat backProject,
    FloatVector rng,
    bool uniform,
  ) {
    return _CalcBackProject(
      mats,
      chans,
      hist,
      backProject,
      rng,
      uniform,
    );
  }

  late final _CalcBackProjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mats, IntVector, Mat, Mat, FloatVector,
              ffi.Bool)>>('CalcBackProject');
  late final _CalcBackProject = _CalcBackProjectPtr.asFunction<
      void Function(Mats, IntVector, Mat, Mat, FloatVector, bool)>();

  double CompareHist(
    Mat hist1,
    Mat hist2,
    int method,
  ) {
    return _CompareHist(
      hist1,
      hist2,
      method,
    );
  }

  late final _CompareHistPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>(
          'CompareHist');
  late final _CompareHist =
      _CompareHistPtr.asFunction<double Function(Mat, Mat, int)>();

  void ConvexHull(
    PointVector points,
    Mat hull,
    bool clockwise,
    bool returnPoints,
  ) {
    return _ConvexHull(
      points,
      hull,
      clockwise,
      returnPoints,
    );
  }

  late final _ConvexHullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              PointVector, Mat, ffi.Bool, ffi.Bool)>>('ConvexHull');
  late final _ConvexHull =
      _ConvexHullPtr.asFunction<void Function(PointVector, Mat, bool, bool)>();

  void ConvexityDefects(
    PointVector points,
    Mat hull,
    Mat result,
  ) {
    return _ConvexityDefects(
      points,
      hull,
      result,
    );
  }

  late final _ConvexityDefectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PointVector, Mat, Mat)>>(
          'ConvexityDefects');
  late final _ConvexityDefects =
      _ConvexityDefectsPtr.asFunction<void Function(PointVector, Mat, Mat)>();

  void BilateralFilter(
    Mat src,
    Mat dst,
    int d,
    double sc,
    double ss,
  ) {
    return _BilateralFilter(
      src,
      dst,
      d,
      sc,
      ss,
    );
  }

  late final _BilateralFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>('BilateralFilter');
  late final _BilateralFilter = _BilateralFilterPtr.asFunction<
      void Function(Mat, Mat, int, double, double)>();

  void Blur(
    Mat src,
    Mat dst,
    Size ps,
  ) {
    return _Blur(
      src,
      dst,
      ps,
    );
  }

  late final _BlurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size)>>('Blur');
  late final _Blur = _BlurPtr.asFunction<void Function(Mat, Mat, Size)>();

  void BoxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    Size ps,
  ) {
    return _BoxFilter(
      src,
      dst,
      ddepth,
      ps,
    );
  }

  late final _BoxFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Size)>>(
          'BoxFilter');
  late final _BoxFilter =
      _BoxFilterPtr.asFunction<void Function(Mat, Mat, int, Size)>();

  void SqBoxFilter(
    Mat src,
    Mat dst,
    int ddepth,
    Size ps,
  ) {
    return _SqBoxFilter(
      src,
      dst,
      ddepth,
      ps,
    );
  }

  late final _SqBoxFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Size)>>(
          'SqBoxFilter');
  late final _SqBoxFilter =
      _SqBoxFilterPtr.asFunction<void Function(Mat, Mat, int, Size)>();

  void Dilate(
    Mat src,
    Mat dst,
    Mat kernel,
  ) {
    return _Dilate(
      src,
      dst,
      kernel,
    );
  }

  late final _DilatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('Dilate');
  late final _Dilate = _DilatePtr.asFunction<void Function(Mat, Mat, Mat)>();

  void DilateWithParams(
    Mat src,
    Mat dst,
    Mat kernel,
    Point anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
  ) {
    return _DilateWithParams(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
    );
  }

  late final _DilateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, Point, ffi.Int, ffi.Int,
              Scalar)>>('DilateWithParams');
  late final _DilateWithParams = _DilateWithParamsPtr.asFunction<
      void Function(Mat, Mat, Mat, Point, int, int, Scalar)>();

  void DistanceTransform(
    Mat src,
    Mat dst,
    Mat labels,
    int distanceType,
    int maskSize,
    int labelType,
  ) {
    return _DistanceTransform(
      src,
      dst,
      labels,
      distanceType,
      maskSize,
      labelType,
    );
  }

  late final _DistanceTransformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>('DistanceTransform');
  late final _DistanceTransform = _DistanceTransformPtr.asFunction<
      void Function(Mat, Mat, Mat, int, int, int)>();

  void Erode(
    Mat src,
    Mat dst,
    Mat kernel,
  ) {
    return _Erode(
      src,
      dst,
      kernel,
    );
  }

  late final _ErodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>('Erode');
  late final _Erode = _ErodePtr.asFunction<void Function(Mat, Mat, Mat)>();

  void ErodeWithParams(
    Mat src,
    Mat dst,
    Mat kernel,
    Point anchor,
    int iterations,
    int borderType,
    Scalar borderValue,
  ) {
    return _ErodeWithParams(
      src,
      dst,
      kernel,
      anchor,
      iterations,
      borderType,
      borderValue,
    );
  }

  late final _ErodeWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, Point, ffi.Int, ffi.Int,
              Scalar)>>('ErodeWithParams');
  late final _ErodeWithParams = _ErodeWithParamsPtr.asFunction<
      void Function(Mat, Mat, Mat, Point, int, int, Scalar)>();

  void MatchTemplate(
    Mat image,
    Mat templ,
    Mat result,
    int method,
    Mat mask,
  ) {
    return _MatchTemplate(
      image,
      templ,
      result,
      method,
      mask,
    );
  }

  late final _MatchTemplatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, Mat)>>(
      'MatchTemplate');
  late final _MatchTemplate =
      _MatchTemplatePtr.asFunction<void Function(Mat, Mat, Mat, int, Mat)>();

  Moment Moments(
    Mat src,
    bool binaryImage,
  ) {
    return _Moments(
      src,
      binaryImage,
    );
  }

  late final _MomentsPtr =
      _lookup<ffi.NativeFunction<Moment Function(Mat, ffi.Bool)>>('Moments');
  late final _Moments = _MomentsPtr.asFunction<Moment Function(Mat, bool)>();

  void PyrDown(
    Mat src,
    Mat dst,
    Size dstsize,
    int borderType,
  ) {
    return _PyrDown(
      src,
      dst,
      dstsize,
      borderType,
    );
  }

  late final _PyrDownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size, ffi.Int)>>(
          'PyrDown');
  late final _PyrDown =
      _PyrDownPtr.asFunction<void Function(Mat, Mat, Size, int)>();

  void PyrUp(
    Mat src,
    Mat dst,
    Size dstsize,
    int borderType,
  ) {
    return _PyrUp(
      src,
      dst,
      dstsize,
      borderType,
    );
  }

  late final _PyrUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size, ffi.Int)>>(
          'PyrUp');
  late final _PyrUp =
      _PyrUpPtr.asFunction<void Function(Mat, Mat, Size, int)>();

  Rect BoundingRect(
    PointVector pts,
  ) {
    return _BoundingRect(
      pts,
    );
  }

  late final _BoundingRectPtr =
      _lookup<ffi.NativeFunction<Rect Function(PointVector)>>('BoundingRect');
  late final _BoundingRect =
      _BoundingRectPtr.asFunction<Rect Function(PointVector)>();

  void BoxPoints(
    RotatedRect rect,
    Mat boxPts,
  ) {
    return _BoxPoints(
      rect,
      boxPts,
    );
  }

  late final _BoxPointsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RotatedRect, Mat)>>(
          'BoxPoints');
  late final _BoxPoints =
      _BoxPointsPtr.asFunction<void Function(RotatedRect, Mat)>();

  double ContourArea(
    PointVector pts,
  ) {
    return _ContourArea(
      pts,
    );
  }

  late final _ContourAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(PointVector)>>(
          'ContourArea');
  late final _ContourArea =
      _ContourAreaPtr.asFunction<double Function(PointVector)>();

  RotatedRect MinAreaRect(
    PointVector pts,
  ) {
    return _MinAreaRect(
      pts,
    );
  }

  late final _MinAreaRectPtr =
      _lookup<ffi.NativeFunction<RotatedRect Function(PointVector)>>(
          'MinAreaRect');
  late final _MinAreaRect =
      _MinAreaRectPtr.asFunction<RotatedRect Function(PointVector)>();

  RotatedRect FitEllipse(
    PointVector pts,
  ) {
    return _FitEllipse(
      pts,
    );
  }

  late final _FitEllipsePtr =
      _lookup<ffi.NativeFunction<RotatedRect Function(PointVector)>>(
          'FitEllipse');
  late final _FitEllipse =
      _FitEllipsePtr.asFunction<RotatedRect Function(PointVector)>();

  void MinEnclosingCircle(
    PointVector pts,
    ffi.Pointer<Point2f> center,
    ffi.Pointer<ffi.Float> radius,
  ) {
    return _MinEnclosingCircle(
      pts,
      center,
      radius,
    );
  }

  late final _MinEnclosingCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PointVector, ffi.Pointer<Point2f>,
              ffi.Pointer<ffi.Float>)>>('MinEnclosingCircle');
  late final _MinEnclosingCircle = _MinEnclosingCirclePtr.asFunction<
      void Function(
          PointVector, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Float>)>();

  PointsVector FindContours(
    Mat src,
    Mat hierarchy,
    int mode,
    int method,
  ) {
    return _FindContours(
      src,
      hierarchy,
      mode,
      method,
    );
  }

  late final _FindContoursPtr = _lookup<
      ffi.NativeFunction<
          PointsVector Function(Mat, Mat, ffi.Int, ffi.Int)>>('FindContours');
  late final _FindContours =
      _FindContoursPtr.asFunction<PointsVector Function(Mat, Mat, int, int)>();

  double PointPolygonTest(
    PointVector pts,
    Point2f pt,
    bool measureDist,
  ) {
    return _PointPolygonTest(
      pts,
      pt,
      measureDist,
    );
  }

  late final _PointPolygonTestPtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(PointVector, Point2f, ffi.Bool)>>(
      'PointPolygonTest');
  late final _PointPolygonTest = _PointPolygonTestPtr.asFunction<
      double Function(PointVector, Point2f, bool)>();

  int ConnectedComponents(
    Mat src,
    Mat dst,
    int connectivity,
    int ltype,
    int ccltype,
  ) {
    return _ConnectedComponents(
      src,
      dst,
      connectivity,
      ltype,
      ccltype,
    );
  }

  late final _ConnectedComponentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>('ConnectedComponents');
  late final _ConnectedComponents = _ConnectedComponentsPtr.asFunction<
      int Function(Mat, Mat, int, int, int)>();

  int ConnectedComponentsWithStats(
    Mat src,
    Mat labels,
    Mat stats,
    Mat centroids,
    int connectivity,
    int ltype,
    int ccltype,
  ) {
    return _ConnectedComponentsWithStats(
      src,
      labels,
      stats,
      centroids,
      connectivity,
      ltype,
      ccltype,
    );
  }

  late final _ConnectedComponentsWithStatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int,
              ffi.Int)>>('ConnectedComponentsWithStats');
  late final _ConnectedComponentsWithStats = _ConnectedComponentsWithStatsPtr
      .asFunction<int Function(Mat, Mat, Mat, Mat, int, int, int)>();

  void GaussianBlur(
    Mat src,
    Mat dst,
    Size ps,
    double sX,
    double sY,
    int bt,
  ) {
    return _GaussianBlur(
      src,
      dst,
      ps,
      sX,
      sY,
      bt,
    );
  }

  late final _GaussianBlurPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Size, ffi.Double, ffi.Double,
              ffi.Int)>>('GaussianBlur');
  late final _GaussianBlur = _GaussianBlurPtr.asFunction<
      void Function(Mat, Mat, Size, double, double, int)>();

  Mat GetGaussianKernel(
    int ksize,
    double sigma,
    int ktype,
  ) {
    return _GetGaussianKernel(
      ksize,
      sigma,
      ktype,
    );
  }

  late final _GetGaussianKernelPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Double, ffi.Int)>>(
          'GetGaussianKernel');
  late final _GetGaussianKernel =
      _GetGaussianKernelPtr.asFunction<Mat Function(int, double, int)>();

  void Laplacian(
    Mat src,
    Mat dst,
    int dDepth,
    int kSize,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Laplacian(
      src,
      dst,
      dDepth,
      kSize,
      scale,
      delta,
      borderType,
    );
  }

  late final _LaplacianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double,
              ffi.Int)>>('Laplacian');
  late final _Laplacian = _LaplacianPtr.asFunction<
      void Function(Mat, Mat, int, int, double, double, int)>();

  void Scharr(
    Mat src,
    Mat dst,
    int dDepth,
    int dx,
    int dy,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Scharr(
      src,
      dst,
      dDepth,
      dx,
      dy,
      scale,
      delta,
      borderType,
    );
  }

  late final _ScharrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
              ffi.Double, ffi.Int)>>('Scharr');
  late final _Scharr = _ScharrPtr.asFunction<
      void Function(Mat, Mat, int, int, int, double, double, int)>();

  Mat GetStructuringElement(
    int shape,
    Size ksize,
  ) {
    return _GetStructuringElement(
      shape,
      ksize,
    );
  }

  late final _GetStructuringElementPtr =
      _lookup<ffi.NativeFunction<Mat Function(ffi.Int, Size)>>(
          'GetStructuringElement');
  late final _GetStructuringElement =
      _GetStructuringElementPtr.asFunction<Mat Function(int, Size)>();

  Scalar MorphologyDefaultBorderValue() {
    return _MorphologyDefaultBorderValue();
  }

  late final _MorphologyDefaultBorderValuePtr =
      _lookup<ffi.NativeFunction<Scalar Function()>>(
          'MorphologyDefaultBorderValue');
  late final _MorphologyDefaultBorderValue =
      _MorphologyDefaultBorderValuePtr.asFunction<Scalar Function()>();

  void MorphologyEx(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
  ) {
    return _MorphologyEx(
      src,
      dst,
      op,
      kernel,
    );
  }

  late final _MorphologyExPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Mat)>>(
          'MorphologyEx');
  late final _MorphologyEx =
      _MorphologyExPtr.asFunction<void Function(Mat, Mat, int, Mat)>();

  void MorphologyExWithParams(
    Mat src,
    Mat dst,
    int op,
    Mat kernel,
    Point pt,
    int iterations,
    int borderType,
  ) {
    return _MorphologyExWithParams(
      src,
      dst,
      op,
      kernel,
      pt,
      iterations,
      borderType,
    );
  }

  late final _MorphologyExWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, Mat, Point, ffi.Int,
              ffi.Int)>>('MorphologyExWithParams');
  late final _MorphologyExWithParams = _MorphologyExWithParamsPtr.asFunction<
      void Function(Mat, Mat, int, Mat, Point, int, int)>();

  void MedianBlur(
    Mat src,
    Mat dst,
    int ksize,
  ) {
    return _MedianBlur(
      src,
      dst,
      ksize,
    );
  }

  late final _MedianBlurPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'MedianBlur');
  late final _MedianBlur =
      _MedianBlurPtr.asFunction<void Function(Mat, Mat, int)>();

  void Canny(
    Mat src,
    Mat edges,
    double t1,
    double t2,
  ) {
    return _Canny(
      src,
      edges,
      t1,
      t2,
    );
  }

  late final _CannyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double)>>('Canny');
  late final _Canny =
      _CannyPtr.asFunction<void Function(Mat, Mat, double, double)>();

  void CornerSubPix(
    Mat img,
    Mat corners,
    Size winSize,
    Size zeroZone,
    TermCriteria criteria,
  ) {
    return _CornerSubPix(
      img,
      corners,
      winSize,
      zeroZone,
      criteria,
    );
  }

  late final _CornerSubPixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Size, Size, TermCriteria)>>('CornerSubPix');
  late final _CornerSubPix = _CornerSubPixPtr.asFunction<
      void Function(Mat, Mat, Size, Size, TermCriteria)>();

  void GoodFeaturesToTrack(
    Mat img,
    Mat corners,
    int maxCorners,
    double quality,
    double minDist,
  ) {
    return _GoodFeaturesToTrack(
      img,
      corners,
      maxCorners,
      quality,
      minDist,
    );
  }

  late final _GoodFeaturesToTrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Double,
              ffi.Double)>>('GoodFeaturesToTrack');
  late final _GoodFeaturesToTrack = _GoodFeaturesToTrackPtr.asFunction<
      void Function(Mat, Mat, int, double, double)>();

  void GrabCut(
    Mat img,
    Mat mask,
    Rect rect,
    Mat bgdModel,
    Mat fgdModel,
    int iterCount,
    int mode,
  ) {
    return _GrabCut(
      img,
      mask,
      rect,
      bgdModel,
      fgdModel,
      iterCount,
      mode,
    );
  }

  late final _GrabCutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int)>>('GrabCut');
  late final _GrabCut = _GrabCutPtr.asFunction<
      void Function(Mat, Mat, Rect, Mat, Mat, int, int)>();

  void HoughCircles(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
  ) {
    return _HoughCircles(
      src,
      circles,
      method,
      dp,
      minDist,
    );
  }

  late final _HoughCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>('HoughCircles');
  late final _HoughCircles = _HoughCirclesPtr.asFunction<
      void Function(Mat, Mat, int, double, double)>();

  void HoughCirclesWithParams(
    Mat src,
    Mat circles,
    int method,
    double dp,
    double minDist,
    double param1,
    double param2,
    int minRadius,
    int maxRadius,
  ) {
    return _HoughCirclesWithParams(
      src,
      circles,
      method,
      dp,
      minDist,
      param1,
      param2,
      minRadius,
      maxRadius,
    );
  }

  late final _HoughCirclesWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int)>>('HoughCirclesWithParams');
  late final _HoughCirclesWithParams = _HoughCirclesWithParamsPtr.asFunction<
      void Function(Mat, Mat, int, double, double, double, double, int, int)>();

  void HoughLines(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
  ) {
    return _HoughLines(
      src,
      lines,
      rho,
      theta,
      threshold,
    );
  }

  late final _HoughLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>('HoughLines');
  late final _HoughLines =
      _HoughLinesPtr.asFunction<void Function(Mat, Mat, double, double, int)>();

  void HoughLinesP(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
  ) {
    return _HoughLinesP(
      src,
      lines,
      rho,
      theta,
      threshold,
    );
  }

  late final _HoughLinesPPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>('HoughLinesP');
  late final _HoughLinesP = _HoughLinesPPtr.asFunction<
      void Function(Mat, Mat, double, double, int)>();

  void HoughLinesPWithParams(
    Mat src,
    Mat lines,
    double rho,
    double theta,
    int threshold,
    double minLineLength,
    double maxLineGap,
  ) {
    return _HoughLinesPWithParams(
      src,
      lines,
      rho,
      theta,
      threshold,
      minLineLength,
      maxLineGap,
    );
  }

  late final _HoughLinesPWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int,
              ffi.Double, ffi.Double)>>('HoughLinesPWithParams');
  late final _HoughLinesPWithParams = _HoughLinesPWithParamsPtr.asFunction<
      void Function(Mat, Mat, double, double, int, double, double)>();

  void HoughLinesPointSet(
    Mat points,
    Mat lines,
    int lines_max,
    int threshold,
    double min_rho,
    double max_rho,
    double rho_step,
    double min_theta,
    double max_theta,
    double theta_step,
  ) {
    return _HoughLinesPointSet(
      points,
      lines,
      lines_max,
      threshold,
      min_rho,
      max_rho,
      rho_step,
      min_theta,
      max_theta,
      theta_step,
    );
  }

  late final _HoughLinesPointSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('HoughLinesPointSet');
  late final _HoughLinesPointSet = _HoughLinesPointSetPtr.asFunction<
      void Function(Mat, Mat, int, int, double, double, double, double, double,
          double)>();

  void Integral(
    Mat src,
    Mat sum,
    Mat sqsum,
    Mat tilted,
  ) {
    return _Integral(
      src,
      sum,
      sqsum,
      tilted,
    );
  }

  late final _IntegralPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Integral');
  late final _Integral =
      _IntegralPtr.asFunction<void Function(Mat, Mat, Mat, Mat)>();

  double Threshold(
    Mat src,
    Mat dst,
    double thresh,
    double maxvalue,
    int typ,
  ) {
    return _Threshold(
      src,
      dst,
      thresh,
      maxvalue,
      typ,
    );
  }

  late final _ThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>('Threshold');
  late final _Threshold = _ThresholdPtr.asFunction<
      double Function(Mat, Mat, double, double, int)>();

  void AdaptiveThreshold(
    Mat src,
    Mat dst,
    double maxValue,
    int adaptiveTyp,
    int typ,
    int blockSize,
    double c,
  ) {
    return _AdaptiveThreshold(
      src,
      dst,
      maxValue,
      adaptiveTyp,
      typ,
      blockSize,
      c,
    );
  }

  late final _AdaptiveThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int,
              ffi.Double)>>('AdaptiveThreshold');
  late final _AdaptiveThreshold = _AdaptiveThresholdPtr.asFunction<
      void Function(Mat, Mat, double, int, int, int, double)>();

  void ArrowedLine(
    Mat img,
    Point pt1,
    Point pt2,
    Scalar color,
    int thickness,
  ) {
    return _ArrowedLine(
      img,
      pt1,
      pt2,
      color,
      thickness,
    );
  }

  late final _ArrowedLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Point, Point, Scalar, ffi.Int)>>('ArrowedLine');
  late final _ArrowedLine = _ArrowedLinePtr.asFunction<
      void Function(Mat, Point, Point, Scalar, int)>();

  void Circle(
    Mat img,
    Point center,
    int radius,
    Scalar color,
    int thickness,
  ) {
    return _Circle(
      img,
      center,
      radius,
      color,
      thickness,
    );
  }

  late final _CirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Point, ffi.Int, Scalar, ffi.Int)>>('Circle');
  late final _Circle =
      _CirclePtr.asFunction<void Function(Mat, Point, int, Scalar, int)>();

  void CircleWithParams(
    Mat img,
    Point center,
    int radius,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _CircleWithParams(
      img,
      center,
      radius,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _CircleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Point, ffi.Int, Scalar, ffi.Int, ffi.Int,
              ffi.Int)>>('CircleWithParams');
  late final _CircleWithParams = _CircleWithParamsPtr.asFunction<
      void Function(Mat, Point, int, Scalar, int, int, int)>();

  void Ellipse(
    Mat img,
    Point center,
    Point axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
  ) {
    return _Ellipse(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
    );
  }

  late final _EllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Point, Point, ffi.Double, ffi.Double,
              ffi.Double, Scalar, ffi.Int)>>('Ellipse');
  late final _Ellipse = _EllipsePtr.asFunction<
      void Function(Mat, Point, Point, double, double, double, Scalar, int)>();

  void EllipseWithParams(
    Mat img,
    Point center,
    Point axes,
    double angle,
    double startAngle,
    double endAngle,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _EllipseWithParams(
      img,
      center,
      axes,
      angle,
      startAngle,
      endAngle,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _EllipseWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Point,
              Point,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('EllipseWithParams');
  late final _EllipseWithParams = _EllipseWithParamsPtr.asFunction<
      void Function(
          Mat, Point, Point, double, double, double, Scalar, int, int, int)>();

  void Line(
    Mat img,
    Point pt1,
    Point pt2,
    Scalar color,
    int thickness,
  ) {
    return _Line(
      img,
      pt1,
      pt2,
      color,
      thickness,
    );
  }

  late final _LinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Point, Point, Scalar, ffi.Int)>>('Line');
  late final _Line =
      _LinePtr.asFunction<void Function(Mat, Point, Point, Scalar, int)>();

  void Rectangle(
    Mat img,
    Rect rect,
    Scalar color,
    int thickness,
  ) {
    return _Rectangle(
      img,
      rect,
      color,
      thickness,
    );
  }

  late final _RectanglePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Rect, Scalar, ffi.Int)>>(
      'Rectangle');
  late final _Rectangle =
      _RectanglePtr.asFunction<void Function(Mat, Rect, Scalar, int)>();

  void RectangleWithParams(
    Mat img,
    Rect rect,
    Scalar color,
    int thickness,
    int lineType,
    int shift,
  ) {
    return _RectangleWithParams(
      img,
      rect,
      color,
      thickness,
      lineType,
      shift,
    );
  }

  late final _RectangleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Rect, Scalar, ffi.Int, ffi.Int,
              ffi.Int)>>('RectangleWithParams');
  late final _RectangleWithParams = _RectangleWithParamsPtr.asFunction<
      void Function(Mat, Rect, Scalar, int, int, int)>();

  void FillPoly(
    Mat img,
    PointsVector points,
    Scalar color,
  ) {
    return _FillPoly(
      img,
      points,
      color,
    );
  }

  late final _FillPolyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, PointsVector, Scalar)>>(
          'FillPoly');
  late final _FillPoly =
      _FillPolyPtr.asFunction<void Function(Mat, PointsVector, Scalar)>();

  void FillPolyWithParams(
    Mat img,
    PointsVector points,
    Scalar color,
    int lineType,
    int shift,
    Point offset,
  ) {
    return _FillPolyWithParams(
      img,
      points,
      color,
      lineType,
      shift,
      offset,
    );
  }

  late final _FillPolyWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, PointsVector, Scalar, ffi.Int, ffi.Int,
              Point)>>('FillPolyWithParams');
  late final _FillPolyWithParams = _FillPolyWithParamsPtr.asFunction<
      void Function(Mat, PointsVector, Scalar, int, int, Point)>();

  void Polylines(
    Mat img,
    PointsVector points,
    bool isClosed,
    Scalar color,
    int thickness,
  ) {
    return _Polylines(
      img,
      points,
      isClosed,
      color,
      thickness,
    );
  }

  late final _PolylinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, PointsVector, ffi.Bool, Scalar, ffi.Int)>>('Polylines');
  late final _Polylines = _PolylinesPtr.asFunction<
      void Function(Mat, PointsVector, bool, Scalar, int)>();

  Size GetTextSize(
    ffi.Pointer<ffi.Char> text,
    int fontFace,
    double fontScale,
    int thickness,
  ) {
    return _GetTextSize(
      text,
      fontFace,
      fontScale,
      thickness,
    );
  }

  late final _GetTextSizePtr = _lookup<
      ffi.NativeFunction<
          Size Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double,
              ffi.Int)>>('GetTextSize');
  late final _GetTextSize = _GetTextSizePtr.asFunction<
      Size Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  Size GetTextSizeWithBaseline(
    ffi.Pointer<ffi.Char> text,
    int fontFace,
    double fontScale,
    int thickness,
    ffi.Pointer<ffi.Int> baseline,
  ) {
    return _GetTextSizeWithBaseline(
      text,
      fontFace,
      fontScale,
      thickness,
      baseline,
    );
  }

  late final _GetTextSizeWithBaselinePtr = _lookup<
      ffi.NativeFunction<
          Size Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('GetTextSizeWithBaseline');
  late final _GetTextSizeWithBaseline = _GetTextSizeWithBaselinePtr.asFunction<
      Size Function(
          ffi.Pointer<ffi.Char>, int, double, int, ffi.Pointer<ffi.Int>)>();

  void PutText(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    Point org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
  ) {
    return _PutText(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
    );
  }

  late final _PutTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, ffi.Pointer<ffi.Char>, Point, ffi.Int,
              ffi.Double, Scalar, ffi.Int)>>('PutText');
  late final _PutText = _PutTextPtr.asFunction<
      void Function(
          Mat, ffi.Pointer<ffi.Char>, Point, int, double, Scalar, int)>();

  void PutTextWithParams(
    Mat img,
    ffi.Pointer<ffi.Char> text,
    Point org,
    int fontFace,
    double fontScale,
    Scalar color,
    int thickness,
    int lineType,
    bool bottomLeftOrigin,
  ) {
    return _PutTextWithParams(
      img,
      text,
      org,
      fontFace,
      fontScale,
      color,
      thickness,
      lineType,
      bottomLeftOrigin,
    );
  }

  late final _PutTextWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              Point,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('PutTextWithParams');
  late final _PutTextWithParams = _PutTextWithParamsPtr.asFunction<
      void Function(Mat, ffi.Pointer<ffi.Char>, Point, int, double, Scalar, int,
          int, bool)>();

  void Resize(
    Mat src,
    Mat dst,
    Size sz,
    double fx,
    double fy,
    int interp,
  ) {
    return _Resize(
      src,
      dst,
      sz,
      fx,
      fy,
      interp,
    );
  }

  late final _ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>>('Resize');
  late final _Resize = _ResizePtr.asFunction<
      void Function(Mat, Mat, Size, double, double, int)>();

  void GetRectSubPix(
    Mat src,
    Size patchSize,
    Point2f center,
    Mat dst,
  ) {
    return _GetRectSubPix(
      src,
      patchSize,
      center,
      dst,
    );
  }

  late final _GetRectSubPixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Size, Point2f, Mat)>>(
          'GetRectSubPix');
  late final _GetRectSubPix =
      _GetRectSubPixPtr.asFunction<void Function(Mat, Size, Point2f, Mat)>();

  Mat GetRotationMatrix2D(
    Point2f center,
    double angle,
    double scale,
  ) {
    return _GetRotationMatrix2D(
      center,
      angle,
      scale,
    );
  }

  late final _GetRotationMatrix2DPtr = _lookup<
          ffi.NativeFunction<Mat Function(Point2f, ffi.Double, ffi.Double)>>(
      'GetRotationMatrix2D');
  late final _GetRotationMatrix2D = _GetRotationMatrix2DPtr.asFunction<
      Mat Function(Point2f, double, double)>();

  void WarpAffine(
    Mat src,
    Mat dst,
    Mat rot_mat,
    Size dsize,
  ) {
    return _WarpAffine(
      src,
      dst,
      rot_mat,
      dsize,
    );
  }

  late final _WarpAffinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Size)>>(
          'WarpAffine');
  late final _WarpAffine =
      _WarpAffinePtr.asFunction<void Function(Mat, Mat, Mat, Size)>();

  void WarpAffineWithParams(
    Mat src,
    Mat dst,
    Mat rot_mat,
    Size dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
  ) {
    return _WarpAffineWithParams(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
    );
  }

  late final _WarpAffineWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int,
              Scalar)>>('WarpAffineWithParams');
  late final _WarpAffineWithParams = _WarpAffineWithParamsPtr.asFunction<
      void Function(Mat, Mat, Mat, Size, int, int, Scalar)>();

  void WarpPerspective(
    Mat src,
    Mat dst,
    Mat m,
    Size dsize,
  ) {
    return _WarpPerspective(
      src,
      dst,
      m,
      dsize,
    );
  }

  late final _WarpPerspectivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Size)>>(
          'WarpPerspective');
  late final _WarpPerspective =
      _WarpPerspectivePtr.asFunction<void Function(Mat, Mat, Mat, Size)>();

  void WarpPerspectiveWithParams(
    Mat src,
    Mat dst,
    Mat rot_mat,
    Size dsize,
    int flags,
    int borderMode,
    Scalar borderValue,
  ) {
    return _WarpPerspectiveWithParams(
      src,
      dst,
      rot_mat,
      dsize,
      flags,
      borderMode,
      borderValue,
    );
  }

  late final _WarpPerspectiveWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int,
              Scalar)>>('WarpPerspectiveWithParams');
  late final _WarpPerspectiveWithParams = _WarpPerspectiveWithParamsPtr
      .asFunction<void Function(Mat, Mat, Mat, Size, int, int, Scalar)>();

  void Watershed(
    Mat image,
    Mat markers,
  ) {
    return _Watershed(
      image,
      markers,
    );
  }

  late final _WatershedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>('Watershed');
  late final _Watershed = _WatershedPtr.asFunction<void Function(Mat, Mat)>();

  void ApplyColorMap(
    Mat src,
    Mat dst,
    int colormap,
  ) {
    return _ApplyColorMap(
      src,
      dst,
      colormap,
    );
  }

  late final _ApplyColorMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>(
          'ApplyColorMap');
  late final _ApplyColorMap =
      _ApplyColorMapPtr.asFunction<void Function(Mat, Mat, int)>();

  void ApplyCustomColorMap(
    Mat src,
    Mat dst,
    Mat colormap,
  ) {
    return _ApplyCustomColorMap(
      src,
      dst,
      colormap,
    );
  }

  late final _ApplyCustomColorMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'ApplyCustomColorMap');
  late final _ApplyCustomColorMap =
      _ApplyCustomColorMapPtr.asFunction<void Function(Mat, Mat, Mat)>();

  Mat GetPerspectiveTransform(
    PointVector src,
    PointVector dst,
  ) {
    return _GetPerspectiveTransform(
      src,
      dst,
    );
  }

  late final _GetPerspectiveTransformPtr =
      _lookup<ffi.NativeFunction<Mat Function(PointVector, PointVector)>>(
          'GetPerspectiveTransform');
  late final _GetPerspectiveTransform = _GetPerspectiveTransformPtr.asFunction<
      Mat Function(PointVector, PointVector)>();

  Mat GetPerspectiveTransform2f(
    Point2fVector src,
    Point2fVector dst,
  ) {
    return _GetPerspectiveTransform2f(
      src,
      dst,
    );
  }

  late final _GetPerspectiveTransform2fPtr =
      _lookup<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>(
          'GetPerspectiveTransform2f');
  late final _GetPerspectiveTransform2f = _GetPerspectiveTransform2fPtr
      .asFunction<Mat Function(Point2fVector, Point2fVector)>();

  Mat GetAffineTransform(
    PointVector src,
    PointVector dst,
  ) {
    return _GetAffineTransform(
      src,
      dst,
    );
  }

  late final _GetAffineTransformPtr =
      _lookup<ffi.NativeFunction<Mat Function(PointVector, PointVector)>>(
          'GetAffineTransform');
  late final _GetAffineTransform = _GetAffineTransformPtr.asFunction<
      Mat Function(PointVector, PointVector)>();

  Mat GetAffineTransform2f(
    Point2fVector src,
    Point2fVector dst,
  ) {
    return _GetAffineTransform2f(
      src,
      dst,
    );
  }

  late final _GetAffineTransform2fPtr =
      _lookup<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>(
          'GetAffineTransform2f');
  late final _GetAffineTransform2f = _GetAffineTransform2fPtr.asFunction<
      Mat Function(Point2fVector, Point2fVector)>();

  Mat FindHomography(
    Mat src,
    Mat dst,
    int method,
    double ransacReprojThreshold,
    Mat mask,
    int maxIters,
    double confidence,
  ) {
    return _FindHomography(
      src,
      dst,
      method,
      ransacReprojThreshold,
      mask,
      maxIters,
      confidence,
    );
  }

  late final _FindHomographyPtr = _lookup<
      ffi.NativeFunction<
          Mat Function(Mat, Mat, ffi.Int, ffi.Double, Mat, ffi.Int,
              ffi.Double)>>('FindHomography');
  late final _FindHomography = _FindHomographyPtr.asFunction<
      Mat Function(Mat, Mat, int, double, Mat, int, double)>();

  void DrawContours(
    Mat src,
    PointsVector contours,
    int contourIdx,
    Scalar color,
    int thickness,
  ) {
    return _DrawContours(
      src,
      contours,
      contourIdx,
      color,
      thickness,
    );
  }

  late final _DrawContoursPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, PointsVector, ffi.Int, Scalar, ffi.Int)>>('DrawContours');
  late final _DrawContours = _DrawContoursPtr.asFunction<
      void Function(Mat, PointsVector, int, Scalar, int)>();

  void DrawContoursWithParams(
    Mat src,
    PointsVector contours,
    int contourIdx,
    Scalar color,
    int thickness,
    int lineType,
    Mat hierarchy,
    int maxLevel,
    Point offset,
  ) {
    return _DrawContoursWithParams(
      src,
      contours,
      contourIdx,
      color,
      thickness,
      lineType,
      hierarchy,
      maxLevel,
      offset,
    );
  }

  late final _DrawContoursWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, PointsVector, ffi.Int, Scalar, ffi.Int,
              ffi.Int, Mat, ffi.Int, Point)>>('DrawContoursWithParams');
  late final _DrawContoursWithParams = _DrawContoursWithParamsPtr.asFunction<
      void Function(
          Mat, PointsVector, int, Scalar, int, int, Mat, int, Point)>();

  void Sobel(
    Mat src,
    Mat dst,
    int ddepth,
    int dx,
    int dy,
    int ksize,
    double scale,
    double delta,
    int borderType,
  ) {
    return _Sobel(
      src,
      dst,
      ddepth,
      dx,
      dy,
      ksize,
      scale,
      delta,
      borderType,
    );
  }

  late final _SobelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Double, ffi.Double, ffi.Int)>>('Sobel');
  late final _Sobel = _SobelPtr.asFunction<
      void Function(Mat, Mat, int, int, int, int, double, double, int)>();

  void SpatialGradient(
    Mat src,
    Mat dx,
    Mat dy,
    int ksize,
    int borderType,
  ) {
    return _SpatialGradient(
      src,
      dx,
      dy,
      ksize,
      borderType,
    );
  }

  late final _SpatialGradientPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>>(
      'SpatialGradient');
  late final _SpatialGradient =
      _SpatialGradientPtr.asFunction<void Function(Mat, Mat, Mat, int, int)>();

  void Remap(
    Mat src,
    Mat dst,
    Mat map1,
    Mat map2,
    int interpolation,
    int borderMode,
    Scalar borderValue,
  ) {
    return _Remap(
      src,
      dst,
      map1,
      map2,
      interpolation,
      borderMode,
      borderValue,
    );
  }

  late final _RemapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>>('Remap');
  late final _Remap = _RemapPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat, int, int, Scalar)>();

  void Filter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernel,
    Point anchor,
    double delta,
    int borderType,
  ) {
    return _Filter2D(
      src,
      dst,
      ddepth,
      kernel,
      anchor,
      delta,
      borderType,
    );
  }

  late final _Filter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int)>>('Filter2D');
  late final _Filter2D = _Filter2DPtr.asFunction<
      void Function(Mat, Mat, int, Mat, Point, double, int)>();

  void SepFilter2D(
    Mat src,
    Mat dst,
    int ddepth,
    Mat kernelX,
    Mat kernelY,
    Point anchor,
    double delta,
    int borderType,
  ) {
    return _SepFilter2D(
      src,
      dst,
      ddepth,
      kernelX,
      kernelY,
      anchor,
      delta,
      borderType,
    );
  }

  late final _SepFilter2DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, Mat, Mat, Point, ffi.Double,
              ffi.Int)>>('SepFilter2D');
  late final _SepFilter2D = _SepFilter2DPtr.asFunction<
      void Function(Mat, Mat, int, Mat, Mat, Point, double, int)>();

  void LogPolar(
    Mat src,
    Mat dst,
    Point2f center,
    double m,
    int flags,
  ) {
    return _LogPolar(
      src,
      dst,
      center,
      m,
      flags,
    );
  }

  late final _LogPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Point2f, ffi.Double, ffi.Int)>>('LogPolar');
  late final _LogPolar =
      _LogPolarPtr.asFunction<void Function(Mat, Mat, Point2f, double, int)>();

  void FitLine(
    PointVector pts,
    Mat line,
    int distType,
    double param,
    double reps,
    double aeps,
  ) {
    return _FitLine(
      pts,
      line,
      distType,
      param,
      reps,
      aeps,
    );
  }

  late final _FitLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(PointVector, Mat, ffi.Int, ffi.Double, ffi.Double,
              ffi.Double)>>('FitLine');
  late final _FitLine = _FitLinePtr.asFunction<
      void Function(PointVector, Mat, int, double, double, double)>();

  void LinearPolar(
    Mat src,
    Mat dst,
    Point2f center,
    double maxRadius,
    int flags,
  ) {
    return _LinearPolar(
      src,
      dst,
      center,
      maxRadius,
      flags,
    );
  }

  late final _LinearPolarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Point2f, ffi.Double, ffi.Int)>>('LinearPolar');
  late final _LinearPolar = _LinearPolarPtr.asFunction<
      void Function(Mat, Mat, Point2f, double, int)>();

  double MatchShapes(
    PointVector contour1,
    PointVector contour2,
    int method,
    double parameter,
  ) {
    return _MatchShapes(
      contour1,
      contour2,
      method,
      parameter,
    );
  }

  late final _MatchShapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              PointVector, PointVector, ffi.Int, ffi.Double)>>('MatchShapes');
  late final _MatchShapes = _MatchShapesPtr.asFunction<
      double Function(PointVector, PointVector, int, double)>();

  bool ClipLine(
    Size imgSize,
    Point pt1,
    Point pt2,
  ) {
    return _ClipLine(
      imgSize,
      pt1,
      pt2,
    );
  }

  late final _ClipLinePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Size, Point, Point)>>(
          'ClipLine');
  late final _ClipLine =
      _ClipLinePtr.asFunction<bool Function(Size, Point, Point)>();

  CLAHE CLAHE_Create() {
    return _CLAHE_Create();
  }

  late final _CLAHE_CreatePtr =
      _lookup<ffi.NativeFunction<CLAHE Function()>>('CLAHE_Create');
  late final _CLAHE_Create = _CLAHE_CreatePtr.asFunction<CLAHE Function()>();

  CLAHE CLAHE_CreateWithParams(
    double clipLimit,
    Size tileGridSize,
  ) {
    return _CLAHE_CreateWithParams(
      clipLimit,
      tileGridSize,
    );
  }

  late final _CLAHE_CreateWithParamsPtr =
      _lookup<ffi.NativeFunction<CLAHE Function(ffi.Double, Size)>>(
          'CLAHE_CreateWithParams');
  late final _CLAHE_CreateWithParams =
      _CLAHE_CreateWithParamsPtr.asFunction<CLAHE Function(double, Size)>();

  void CLAHE_Close(
    CLAHE c,
  ) {
    return _CLAHE_Close(
      c,
    );
  }

  late final _CLAHE_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CLAHE)>>('CLAHE_Close');
  late final _CLAHE_Close = _CLAHE_ClosePtr.asFunction<void Function(CLAHE)>();

  void CLAHE_Apply(
    CLAHE c,
    Mat src,
    Mat dst,
  ) {
    return _CLAHE_Apply(
      c,
      src,
      dst,
    );
  }

  late final _CLAHE_ApplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CLAHE, Mat, Mat)>>(
          'CLAHE_Apply');
  late final _CLAHE_Apply =
      _CLAHE_ApplyPtr.asFunction<void Function(CLAHE, Mat, Mat)>();

  void InvertAffineTransform(
    Mat src,
    Mat dst,
  ) {
    return _InvertAffineTransform(
      src,
      dst,
    );
  }

  late final _InvertAffineTransformPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'InvertAffineTransform');
  late final _InvertAffineTransform =
      _InvertAffineTransformPtr.asFunction<void Function(Mat, Mat)>();

  Point2f PhaseCorrelate(
    Mat src1,
    Mat src2,
    Mat window,
    ffi.Pointer<ffi.Double> response,
  ) {
    return _PhaseCorrelate(
      src1,
      src2,
      window,
      response,
    );
  }

  late final _PhaseCorrelatePtr = _lookup<
      ffi.NativeFunction<
          Point2f Function(
              Mat, Mat, Mat, ffi.Pointer<ffi.Double>)>>('PhaseCorrelate');
  late final _PhaseCorrelate = _PhaseCorrelatePtr.asFunction<
      Point2f Function(Mat, Mat, Mat, ffi.Pointer<ffi.Double>)>();

  void Mat_Accumulate(
    Mat src,
    Mat dst,
  ) {
    return _Mat_Accumulate(
      src,
      dst,
    );
  }

  late final _Mat_AccumulatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'Mat_Accumulate');
  late final _Mat_Accumulate =
      _Mat_AccumulatePtr.asFunction<void Function(Mat, Mat)>();

  void Mat_AccumulateWithMask(
    Mat src,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateWithMask(
      src,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_AccumulateWithMask');
  late final _Mat_AccumulateWithMask =
      _Mat_AccumulateWithMaskPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_AccumulateSquare(
    Mat src,
    Mat dst,
  ) {
    return _Mat_AccumulateSquare(
      src,
      dst,
    );
  }

  late final _Mat_AccumulateSquarePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'Mat_AccumulateSquare');
  late final _Mat_AccumulateSquare =
      _Mat_AccumulateSquarePtr.asFunction<void Function(Mat, Mat)>();

  void Mat_AccumulateSquareWithMask(
    Mat src,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateSquareWithMask(
      src,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateSquareWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_AccumulateSquareWithMask');
  late final _Mat_AccumulateSquareWithMask = _Mat_AccumulateSquareWithMaskPtr
      .asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_AccumulateProduct(
    Mat src1,
    Mat src2,
    Mat dst,
  ) {
    return _Mat_AccumulateProduct(
      src1,
      src2,
      dst,
    );
  }

  late final _Mat_AccumulateProductPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>(
          'Mat_AccumulateProduct');
  late final _Mat_AccumulateProduct =
      _Mat_AccumulateProductPtr.asFunction<void Function(Mat, Mat, Mat)>();

  void Mat_AccumulateProductWithMask(
    Mat src1,
    Mat src2,
    Mat dst,
    Mat mask,
  ) {
    return _Mat_AccumulateProductWithMask(
      src1,
      src2,
      dst,
      mask,
    );
  }

  late final _Mat_AccumulateProductWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>(
          'Mat_AccumulateProductWithMask');
  late final _Mat_AccumulateProductWithMask = _Mat_AccumulateProductWithMaskPtr
      .asFunction<void Function(Mat, Mat, Mat, Mat)>();

  void Mat_AccumulatedWeighted(
    Mat src,
    Mat dst,
    double alpha,
  ) {
    return _Mat_AccumulatedWeighted(
      src,
      dst,
      alpha,
    );
  }

  late final _Mat_AccumulatedWeightedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double)>>(
          'Mat_AccumulatedWeighted');
  late final _Mat_AccumulatedWeighted =
      _Mat_AccumulatedWeightedPtr.asFunction<void Function(Mat, Mat, double)>();

  void Mat_AccumulatedWeightedWithMask(
    Mat src,
    Mat dst,
    double alpha,
    Mat mask,
  ) {
    return _Mat_AccumulatedWeightedWithMask(
      src,
      dst,
      alpha,
      mask,
    );
  }

  late final _Mat_AccumulatedWeightedWithMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double, Mat)>>(
          'Mat_AccumulatedWeightedWithMask');
  late final _Mat_AccumulatedWeightedWithMask =
      _Mat_AccumulatedWeightedWithMaskPtr.asFunction<
          void Function(Mat, Mat, double, Mat)>();

  /// CascadeClassifier
  CascadeClassifier CascadeClassifier_New() {
    return _CascadeClassifier_New();
  }

  late final _CascadeClassifier_NewPtr =
      _lookup<ffi.NativeFunction<CascadeClassifier Function()>>(
          'CascadeClassifier_New');
  late final _CascadeClassifier_New =
      _CascadeClassifier_NewPtr.asFunction<CascadeClassifier Function()>();

  void CascadeClassifier_Close(
    CascadeClassifier cs,
  ) {
    return _CascadeClassifier_Close(
      cs,
    );
  }

  late final _CascadeClassifier_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CascadeClassifier)>>(
          'CascadeClassifier_Close');
  late final _CascadeClassifier_Close = _CascadeClassifier_ClosePtr.asFunction<
      void Function(CascadeClassifier)>();

  int CascadeClassifier_Load(
    CascadeClassifier cs,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _CascadeClassifier_Load(
      cs,
      name,
    );
  }

  late final _CascadeClassifier_LoadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(CascadeClassifier,
              ffi.Pointer<ffi.Char>)>>('CascadeClassifier_Load');
  late final _CascadeClassifier_Load = _CascadeClassifier_LoadPtr.asFunction<
      int Function(CascadeClassifier, ffi.Pointer<ffi.Char>)>();

  Rects CascadeClassifier_DetectMultiScale(
    CascadeClassifier cs,
    Mat img,
  ) {
    return _CascadeClassifier_DetectMultiScale(
      cs,
      img,
    );
  }

  late final _CascadeClassifier_DetectMultiScalePtr =
      _lookup<ffi.NativeFunction<Rects Function(CascadeClassifier, Mat)>>(
          'CascadeClassifier_DetectMultiScale');
  late final _CascadeClassifier_DetectMultiScale =
      _CascadeClassifier_DetectMultiScalePtr.asFunction<
          Rects Function(CascadeClassifier, Mat)>();

  Rects CascadeClassifier_DetectMultiScaleWithParams(
    CascadeClassifier cs,
    Mat img,
    double scale,
    int minNeighbors,
    int flags,
    Size minSize,
    Size maxSize,
  ) {
    return _CascadeClassifier_DetectMultiScaleWithParams(
      cs,
      img,
      scale,
      minNeighbors,
      flags,
      minSize,
      maxSize,
    );
  }

  late final _CascadeClassifier_DetectMultiScaleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          Rects Function(CascadeClassifier, Mat, ffi.Double, ffi.Int, ffi.Int,
              Size, Size)>>('CascadeClassifier_DetectMultiScaleWithParams');
  late final _CascadeClassifier_DetectMultiScaleWithParams =
      _CascadeClassifier_DetectMultiScaleWithParamsPtr.asFunction<
          Rects Function(
              CascadeClassifier, Mat, double, int, int, Size, Size)>();

  HOGDescriptor HOGDescriptor_New() {
    return _HOGDescriptor_New();
  }

  late final _HOGDescriptor_NewPtr =
      _lookup<ffi.NativeFunction<HOGDescriptor Function()>>(
          'HOGDescriptor_New');
  late final _HOGDescriptor_New =
      _HOGDescriptor_NewPtr.asFunction<HOGDescriptor Function()>();

  void HOGDescriptor_Close(
    HOGDescriptor hog,
  ) {
    return _HOGDescriptor_Close(
      hog,
    );
  }

  late final _HOGDescriptor_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HOGDescriptor)>>(
          'HOGDescriptor_Close');
  late final _HOGDescriptor_Close =
      _HOGDescriptor_ClosePtr.asFunction<void Function(HOGDescriptor)>();

  int HOGDescriptor_Load(
    HOGDescriptor hog,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _HOGDescriptor_Load(
      hog,
      name,
    );
  }

  late final _HOGDescriptor_LoadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              HOGDescriptor, ffi.Pointer<ffi.Char>)>>('HOGDescriptor_Load');
  late final _HOGDescriptor_Load = _HOGDescriptor_LoadPtr.asFunction<
      int Function(HOGDescriptor, ffi.Pointer<ffi.Char>)>();

  Rects HOGDescriptor_DetectMultiScale(
    HOGDescriptor hog,
    Mat img,
  ) {
    return _HOGDescriptor_DetectMultiScale(
      hog,
      img,
    );
  }

  late final _HOGDescriptor_DetectMultiScalePtr =
      _lookup<ffi.NativeFunction<Rects Function(HOGDescriptor, Mat)>>(
          'HOGDescriptor_DetectMultiScale');
  late final _HOGDescriptor_DetectMultiScale =
      _HOGDescriptor_DetectMultiScalePtr.asFunction<
          Rects Function(HOGDescriptor, Mat)>();

  Rects HOGDescriptor_DetectMultiScaleWithParams(
    HOGDescriptor hog,
    Mat img,
    double hitThresh,
    Size winStride,
    Size padding,
    double scale,
    double finalThreshold,
    bool useMeanshiftGrouping,
  ) {
    return _HOGDescriptor_DetectMultiScaleWithParams(
      hog,
      img,
      hitThresh,
      winStride,
      padding,
      scale,
      finalThreshold,
      useMeanshiftGrouping,
    );
  }

  late final _HOGDescriptor_DetectMultiScaleWithParamsPtr = _lookup<
      ffi.NativeFunction<
          Rects Function(
              HOGDescriptor,
              Mat,
              ffi.Double,
              Size,
              Size,
              ffi.Double,
              ffi.Double,
              ffi.Bool)>>('HOGDescriptor_DetectMultiScaleWithParams');
  late final _HOGDescriptor_DetectMultiScaleWithParams =
      _HOGDescriptor_DetectMultiScaleWithParamsPtr.asFunction<
          Rects Function(
              HOGDescriptor, Mat, double, Size, Size, double, double, bool)>();

  Mat HOG_GetDefaultPeopleDetector() {
    return _HOG_GetDefaultPeopleDetector();
  }

  late final _HOG_GetDefaultPeopleDetectorPtr =
      _lookup<ffi.NativeFunction<Mat Function()>>(
          'HOG_GetDefaultPeopleDetector');
  late final _HOG_GetDefaultPeopleDetector =
      _HOG_GetDefaultPeopleDetectorPtr.asFunction<Mat Function()>();

  void HOGDescriptor_SetSVMDetector(
    HOGDescriptor hog,
    Mat det,
  ) {
    return _HOGDescriptor_SetSVMDetector(
      hog,
      det,
    );
  }

  late final _HOGDescriptor_SetSVMDetectorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HOGDescriptor, Mat)>>(
          'HOGDescriptor_SetSVMDetector');
  late final _HOGDescriptor_SetSVMDetector = _HOGDescriptor_SetSVMDetectorPtr
      .asFunction<void Function(HOGDescriptor, Mat)>();

  Rects GroupRectangles(
    Rects rects,
    int groupThreshold,
    double eps,
  ) {
    return _GroupRectangles(
      rects,
      groupThreshold,
      eps,
    );
  }

  late final _GroupRectanglesPtr =
      _lookup<ffi.NativeFunction<Rects Function(Rects, ffi.Int, ffi.Double)>>(
          'GroupRectangles');
  late final _GroupRectangles =
      _GroupRectanglesPtr.asFunction<Rects Function(Rects, int, double)>();

  QRCodeDetector QRCodeDetector_New() {
    return _QRCodeDetector_New();
  }

  late final _QRCodeDetector_NewPtr =
      _lookup<ffi.NativeFunction<QRCodeDetector Function()>>(
          'QRCodeDetector_New');
  late final _QRCodeDetector_New =
      _QRCodeDetector_NewPtr.asFunction<QRCodeDetector Function()>();

  ffi.Pointer<ffi.Char> QRCodeDetector_DetectAndDecode(
    QRCodeDetector qr,
    Mat input,
    Mat points,
    Mat straight_qrcode,
  ) {
    return _QRCodeDetector_DetectAndDecode(
      qr,
      input,
      points,
      straight_qrcode,
    );
  }

  late final _QRCodeDetector_DetectAndDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(QRCodeDetector, Mat, Mat,
              Mat)>>('QRCodeDetector_DetectAndDecode');
  late final _QRCodeDetector_DetectAndDecode =
      _QRCodeDetector_DetectAndDecodePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(QRCodeDetector, Mat, Mat, Mat)>();

  bool QRCodeDetector_Detect(
    QRCodeDetector qr,
    Mat input,
    Mat points,
  ) {
    return _QRCodeDetector_Detect(
      qr,
      input,
      points,
    );
  }

  late final _QRCodeDetector_DetectPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(QRCodeDetector, Mat, Mat)>>(
          'QRCodeDetector_Detect');
  late final _QRCodeDetector_Detect = _QRCodeDetector_DetectPtr.asFunction<
      bool Function(QRCodeDetector, Mat, Mat)>();

  ffi.Pointer<ffi.Char> QRCodeDetector_Decode(
    QRCodeDetector qr,
    Mat input,
    Mat inputPoints,
    Mat straight_qrcode,
  ) {
    return _QRCodeDetector_Decode(
      qr,
      input,
      inputPoints,
      straight_qrcode,
    );
  }

  late final _QRCodeDetector_DecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              QRCodeDetector, Mat, Mat, Mat)>>('QRCodeDetector_Decode');
  late final _QRCodeDetector_Decode = _QRCodeDetector_DecodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(QRCodeDetector, Mat, Mat, Mat)>();

  void QRCodeDetector_Close(
    QRCodeDetector qr,
  ) {
    return _QRCodeDetector_Close(
      qr,
    );
  }

  late final _QRCodeDetector_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(QRCodeDetector)>>(
          'QRCodeDetector_Close');
  late final _QRCodeDetector_Close =
      _QRCodeDetector_ClosePtr.asFunction<void Function(QRCodeDetector)>();

  bool QRCodeDetector_DetectMulti(
    QRCodeDetector qr,
    Mat input,
    Mat points,
  ) {
    return _QRCodeDetector_DetectMulti(
      qr,
      input,
      points,
    );
  }

  late final _QRCodeDetector_DetectMultiPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(QRCodeDetector, Mat, Mat)>>(
          'QRCodeDetector_DetectMulti');
  late final _QRCodeDetector_DetectMulti = _QRCodeDetector_DetectMultiPtr
      .asFunction<bool Function(QRCodeDetector, Mat, Mat)>();

  bool QRCodeDetector_DetectAndDecodeMulti(
    QRCodeDetector qr,
    Mat input,
    ffi.Pointer<CStrings> decoded,
    Mat points,
    ffi.Pointer<Mats> mats,
  ) {
    return _QRCodeDetector_DetectAndDecodeMulti(
      qr,
      input,
      decoded,
      points,
      mats,
    );
  }

  late final _QRCodeDetector_DetectAndDecodeMultiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(QRCodeDetector, Mat, ffi.Pointer<CStrings>, Mat,
              ffi.Pointer<Mats>)>>('QRCodeDetector_DetectAndDecodeMulti');
  late final _QRCodeDetector_DetectAndDecodeMulti =
      _QRCodeDetector_DetectAndDecodeMultiPtr.asFunction<
          bool Function(QRCodeDetector, Mat, ffi.Pointer<CStrings>, Mat,
              ffi.Pointer<Mats>)>();

  void ColorChange(
    Mat src,
    Mat mask,
    Mat dst,
    double red_mul,
    double green_mul,
    double blue_mul,
  ) {
    return _ColorChange(
      src,
      mask,
      dst,
      red_mul,
      green_mul,
      blue_mul,
    );
  }

  late final _ColorChangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>>('ColorChange');
  late final _ColorChange = _ColorChangePtr.asFunction<
      void Function(Mat, Mat, Mat, double, double, double)>();

  void SeamlessClone(
    Mat src,
    Mat dst,
    Mat mask,
    Point p,
    Mat blend,
    int flags,
  ) {
    return _SeamlessClone(
      src,
      dst,
      mask,
      p,
      blend,
      flags,
    );
  }

  late final _SeamlessClonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, Point, Mat, ffi.Int)>>('SeamlessClone');
  late final _SeamlessClone = _SeamlessClonePtr.asFunction<
      void Function(Mat, Mat, Mat, Point, Mat, int)>();

  void IlluminationChange(
    Mat src,
    Mat mask,
    Mat dst,
    double alpha,
    double beta,
  ) {
    return _IlluminationChange(
      src,
      mask,
      dst,
      alpha,
      beta,
    );
  }

  late final _IlluminationChangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float)>>('IlluminationChange');
  late final _IlluminationChange = _IlluminationChangePtr.asFunction<
      void Function(Mat, Mat, Mat, double, double)>();

  void TextureFlattening(
    Mat src,
    Mat mask,
    Mat dst,
    double low_threshold,
    double high_threshold,
    int kernel_size,
  ) {
    return _TextureFlattening(
      src,
      mask,
      dst,
      low_threshold,
      high_threshold,
      kernel_size,
    );
  }

  late final _TextureFlatteningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, Mat, ffi.Float, ffi.Float,
              ffi.Int)>>('TextureFlattening');
  late final _TextureFlattening = _TextureFlatteningPtr.asFunction<
      void Function(Mat, Mat, Mat, double, double, int)>();

  void FastNlMeansDenoisingColoredMulti(
    Mats src,
    Mat dst,
    int imgToDenoiseIndex,
    int temporalWindowSize,
  ) {
    return _FastNlMeansDenoisingColoredMulti(
      src,
      dst,
      imgToDenoiseIndex,
      temporalWindowSize,
    );
  }

  late final _FastNlMeansDenoisingColoredMultiPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mats, Mat, ffi.Int, ffi.Int)>>(
      'FastNlMeansDenoisingColoredMulti');
  late final _FastNlMeansDenoisingColoredMulti =
      _FastNlMeansDenoisingColoredMultiPtr.asFunction<
          void Function(Mats, Mat, int, int)>();

  void FastNlMeansDenoisingColoredMultiWithParams(
    Mats src,
    Mat dst,
    int imgToDenoiseIndex,
    int temporalWindowSize,
    double h,
    double hColor,
    int templateWindowSize,
    int searchWindowSize,
  ) {
    return _FastNlMeansDenoisingColoredMultiWithParams(
      src,
      dst,
      imgToDenoiseIndex,
      temporalWindowSize,
      h,
      hColor,
      templateWindowSize,
      searchWindowSize,
    );
  }

  late final _FastNlMeansDenoisingColoredMultiWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mats, Mat, ffi.Int, ffi.Int, ffi.Float, ffi.Float,
              ffi.Int, ffi.Int)>>('FastNlMeansDenoisingColoredMultiWithParams');
  late final _FastNlMeansDenoisingColoredMultiWithParams =
      _FastNlMeansDenoisingColoredMultiWithParamsPtr.asFunction<
          void Function(Mats, Mat, int, int, double, double, int, int)>();

  void FastNlMeansDenoising(
    Mat src,
    Mat dst,
  ) {
    return _FastNlMeansDenoising(
      src,
      dst,
    );
  }

  late final _FastNlMeansDenoisingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'FastNlMeansDenoising');
  late final _FastNlMeansDenoising =
      _FastNlMeansDenoisingPtr.asFunction<void Function(Mat, Mat)>();

  void FastNlMeansDenoisingWithParams(
    Mat src,
    Mat dst,
    double h,
    int templateWindowSize,
    int searchWindowSize,
  ) {
    return _FastNlMeansDenoisingWithParams(
      src,
      dst,
      h,
      templateWindowSize,
      searchWindowSize,
    );
  }

  late final _FastNlMeansDenoisingWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Float, ffi.Int,
              ffi.Int)>>('FastNlMeansDenoisingWithParams');
  late final _FastNlMeansDenoisingWithParams =
      _FastNlMeansDenoisingWithParamsPtr.asFunction<
          void Function(Mat, Mat, double, int, int)>();

  void FastNlMeansDenoisingColored(
    Mat src,
    Mat dst,
  ) {
    return _FastNlMeansDenoisingColored(
      src,
      dst,
    );
  }

  late final _FastNlMeansDenoisingColoredPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>(
          'FastNlMeansDenoisingColored');
  late final _FastNlMeansDenoisingColored =
      _FastNlMeansDenoisingColoredPtr.asFunction<void Function(Mat, Mat)>();

  void FastNlMeansDenoisingColoredWithParams(
    Mat src,
    Mat dst,
    double h,
    double hColor,
    int templateWindowSize,
    int searchWindowSize,
  ) {
    return _FastNlMeansDenoisingColoredWithParams(
      src,
      dst,
      h,
      hColor,
      templateWindowSize,
      searchWindowSize,
    );
  }

  late final _FastNlMeansDenoisingColoredWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Float, ffi.Float, ffi.Int,
              ffi.Int)>>('FastNlMeansDenoisingColoredWithParams');
  late final _FastNlMeansDenoisingColoredWithParams =
      _FastNlMeansDenoisingColoredWithParamsPtr.asFunction<
          void Function(Mat, Mat, double, double, int, int)>();

  MergeMertens MergeMertens_Create() {
    return _MergeMertens_Create();
  }

  late final _MergeMertens_CreatePtr =
      _lookup<ffi.NativeFunction<MergeMertens Function()>>(
          'MergeMertens_Create');
  late final _MergeMertens_Create =
      _MergeMertens_CreatePtr.asFunction<MergeMertens Function()>();

  MergeMertens MergeMertens_CreateWithParams(
    double contrast_weight,
    double saturation_weight,
    double exposure_weight,
  ) {
    return _MergeMertens_CreateWithParams(
      contrast_weight,
      saturation_weight,
      exposure_weight,
    );
  }

  late final _MergeMertens_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          MergeMertens Function(ffi.Float, ffi.Float,
              ffi.Float)>>('MergeMertens_CreateWithParams');
  late final _MergeMertens_CreateWithParams = _MergeMertens_CreateWithParamsPtr
      .asFunction<MergeMertens Function(double, double, double)>();

  void MergeMertens_Process(
    MergeMertens b,
    Mats src,
    Mat dst,
  ) {
    return _MergeMertens_Process(
      b,
      src,
      dst,
    );
  }

  late final _MergeMertens_ProcessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MergeMertens, Mats, Mat)>>(
          'MergeMertens_Process');
  late final _MergeMertens_Process = _MergeMertens_ProcessPtr.asFunction<
      void Function(MergeMertens, Mats, Mat)>();

  void MergeMertens_Close(
    MergeMertens b,
  ) {
    return _MergeMertens_Close(
      b,
    );
  }

  late final _MergeMertens_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MergeMertens)>>(
          'MergeMertens_Close');
  late final _MergeMertens_Close =
      _MergeMertens_ClosePtr.asFunction<void Function(MergeMertens)>();

  AlignMTB AlignMTB_Create() {
    return _AlignMTB_Create();
  }

  late final _AlignMTB_CreatePtr =
      _lookup<ffi.NativeFunction<AlignMTB Function()>>('AlignMTB_Create');
  late final _AlignMTB_Create =
      _AlignMTB_CreatePtr.asFunction<AlignMTB Function()>();

  AlignMTB AlignMTB_CreateWithParams(
    int max_bits,
    int exclude_range,
    bool cut,
  ) {
    return _AlignMTB_CreateWithParams(
      max_bits,
      exclude_range,
      cut,
    );
  }

  late final _AlignMTB_CreateWithParamsPtr = _lookup<
          ffi.NativeFunction<AlignMTB Function(ffi.Int, ffi.Int, ffi.Bool)>>(
      'AlignMTB_CreateWithParams');
  late final _AlignMTB_CreateWithParams = _AlignMTB_CreateWithParamsPtr
      .asFunction<AlignMTB Function(int, int, bool)>();

  void AlignMTB_Process(
    AlignMTB b,
    Mats src,
    ffi.Pointer<Mats> dst,
  ) {
    return _AlignMTB_Process(
      b,
      src,
      dst,
    );
  }

  late final _AlignMTB_ProcessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              AlignMTB, Mats, ffi.Pointer<Mats>)>>('AlignMTB_Process');
  late final _AlignMTB_Process = _AlignMTB_ProcessPtr.asFunction<
      void Function(AlignMTB, Mats, ffi.Pointer<Mats>)>();

  void AlignMTB_Close(
    AlignMTB b,
  ) {
    return _AlignMTB_Close(
      b,
    );
  }

  late final _AlignMTB_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AlignMTB)>>(
          'AlignMTB_Close');
  late final _AlignMTB_Close =
      _AlignMTB_ClosePtr.asFunction<void Function(AlignMTB)>();

  void DetailEnhance(
    Mat src,
    Mat dst,
    double sigma_s,
    double sigma_r,
  ) {
    return _DetailEnhance(
      src,
      dst,
      sigma_s,
      sigma_r,
    );
  }

  late final _DetailEnhancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Float, ffi.Float)>>('DetailEnhance');
  late final _DetailEnhance =
      _DetailEnhancePtr.asFunction<void Function(Mat, Mat, double, double)>();

  void EdgePreservingFilter(
    Mat src,
    Mat dst,
    int filter,
    double sigma_s,
    double sigma_r,
  ) {
    return _EdgePreservingFilter(
      src,
      dst,
      filter,
      sigma_s,
      sigma_r,
    );
  }

  late final _EdgePreservingFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Float,
              ffi.Float)>>('EdgePreservingFilter');
  late final _EdgePreservingFilter = _EdgePreservingFilterPtr.asFunction<
      void Function(Mat, Mat, int, double, double)>();

  void PencilSketch(
    Mat src,
    Mat dst1,
    Mat dst2,
    double sigma_s,
    double sigma_r,
    double shade_factor,
  ) {
    return _PencilSketch(
      src,
      dst1,
      dst2,
      sigma_s,
      sigma_r,
      shade_factor,
    );
  }

  late final _PencilSketchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>>('PencilSketch');
  late final _PencilSketch = _PencilSketchPtr.asFunction<
      void Function(Mat, Mat, Mat, double, double, double)>();

  void Stylization(
    Mat src,
    Mat dst,
    double sigma_s,
    double sigma_r,
  ) {
    return _Stylization(
      src,
      dst,
      sigma_s,
      sigma_r,
    );
  }

  late final _StylizationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Float, ffi.Float)>>('Stylization');
  late final _Stylization =
      _StylizationPtr.asFunction<void Function(Mat, Mat, double, double)>();

  void PhotoInpaint(
    Mat src,
    Mat mask,
    Mat dst,
    double inpaint_radius,
    int algorithm_type,
  ) {
    return _PhotoInpaint(
      src,
      mask,
      dst,
      inpaint_radius,
      algorithm_type,
    );
  }

  late final _PhotoInpaintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Mat, ffi.Float, ffi.Int)>>('PhotoInpaint');
  late final _PhotoInpaint =
      _PhotoInpaintPtr.asFunction<void Function(Mat, Mat, Mat, double, int)>();

  void SVD_Compute(
    Mat src,
    Mat w,
    Mat u,
    Mat vt,
    int flags,
  ) {
    return _SVD_Compute(
      src,
      w,
      u,
      vt,
      flags,
    );
  }

  late final _SVD_ComputePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Int)>>(
      'SVD_Compute');
  late final _SVD_Compute =
      _SVD_ComputePtr.asFunction<void Function(Mat, Mat, Mat, Mat, int)>();

  ffi.Pointer<ffi.Char> openCVVersion() {
    return _openCVVersion();
  }

  late final _openCVVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'openCVVersion');
  late final _openCVVersion =
      _openCVVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  BackgroundSubtractorMOG2 BackgroundSubtractorMOG2_Create() {
    return _BackgroundSubtractorMOG2_Create();
  }

  late final _BackgroundSubtractorMOG2_CreatePtr =
      _lookup<ffi.NativeFunction<BackgroundSubtractorMOG2 Function()>>(
          'BackgroundSubtractorMOG2_Create');
  late final _BackgroundSubtractorMOG2_Create =
      _BackgroundSubtractorMOG2_CreatePtr.asFunction<
          BackgroundSubtractorMOG2 Function()>();

  BackgroundSubtractorMOG2 BackgroundSubtractorMOG2_CreateWithParams(
    int history,
    double varThreshold,
    bool detectShadows,
  ) {
    return _BackgroundSubtractorMOG2_CreateWithParams(
      history,
      varThreshold,
      detectShadows,
    );
  }

  late final _BackgroundSubtractorMOG2_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          BackgroundSubtractorMOG2 Function(ffi.Int, ffi.Double,
              ffi.Bool)>>('BackgroundSubtractorMOG2_CreateWithParams');
  late final _BackgroundSubtractorMOG2_CreateWithParams =
      _BackgroundSubtractorMOG2_CreateWithParamsPtr.asFunction<
          BackgroundSubtractorMOG2 Function(int, double, bool)>();

  void BackgroundSubtractorMOG2_Close(
    BackgroundSubtractorMOG2 b,
  ) {
    return _BackgroundSubtractorMOG2_Close(
      b,
    );
  }

  late final _BackgroundSubtractorMOG2_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2)>>(
          'BackgroundSubtractorMOG2_Close');
  late final _BackgroundSubtractorMOG2_Close =
      _BackgroundSubtractorMOG2_ClosePtr.asFunction<
          void Function(BackgroundSubtractorMOG2)>();

  void BackgroundSubtractorMOG2_Apply(
    BackgroundSubtractorMOG2 b,
    Mat src,
    Mat dst,
  ) {
    return _BackgroundSubtractorMOG2_Apply(
      b,
      src,
      dst,
    );
  }

  late final _BackgroundSubtractorMOG2_ApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(BackgroundSubtractorMOG2, Mat,
              Mat)>>('BackgroundSubtractorMOG2_Apply');
  late final _BackgroundSubtractorMOG2_Apply =
      _BackgroundSubtractorMOG2_ApplyPtr.asFunction<
          void Function(BackgroundSubtractorMOG2, Mat, Mat)>();

  BackgroundSubtractorKNN BackgroundSubtractorKNN_Create() {
    return _BackgroundSubtractorKNN_Create();
  }

  late final _BackgroundSubtractorKNN_CreatePtr =
      _lookup<ffi.NativeFunction<BackgroundSubtractorKNN Function()>>(
          'BackgroundSubtractorKNN_Create');
  late final _BackgroundSubtractorKNN_Create =
      _BackgroundSubtractorKNN_CreatePtr.asFunction<
          BackgroundSubtractorKNN Function()>();

  BackgroundSubtractorKNN BackgroundSubtractorKNN_CreateWithParams(
    int history,
    double dist2Threshold,
    bool detectShadows,
  ) {
    return _BackgroundSubtractorKNN_CreateWithParams(
      history,
      dist2Threshold,
      detectShadows,
    );
  }

  late final _BackgroundSubtractorKNN_CreateWithParamsPtr = _lookup<
      ffi.NativeFunction<
          BackgroundSubtractorKNN Function(ffi.Int, ffi.Double,
              ffi.Bool)>>('BackgroundSubtractorKNN_CreateWithParams');
  late final _BackgroundSubtractorKNN_CreateWithParams =
      _BackgroundSubtractorKNN_CreateWithParamsPtr.asFunction<
          BackgroundSubtractorKNN Function(int, double, bool)>();

  void BackgroundSubtractorKNN_Close(
    BackgroundSubtractorKNN b,
  ) {
    return _BackgroundSubtractorKNN_Close(
      b,
    );
  }

  late final _BackgroundSubtractorKNN_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNN)>>(
          'BackgroundSubtractorKNN_Close');
  late final _BackgroundSubtractorKNN_Close = _BackgroundSubtractorKNN_ClosePtr
      .asFunction<void Function(BackgroundSubtractorKNN)>();

  void BackgroundSubtractorKNN_Apply(
    BackgroundSubtractorKNN b,
    Mat src,
    Mat dst,
  ) {
    return _BackgroundSubtractorKNN_Apply(
      b,
      src,
      dst,
    );
  }

  late final _BackgroundSubtractorKNN_ApplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(BackgroundSubtractorKNN, Mat,
              Mat)>>('BackgroundSubtractorKNN_Apply');
  late final _BackgroundSubtractorKNN_Apply = _BackgroundSubtractorKNN_ApplyPtr
      .asFunction<void Function(BackgroundSubtractorKNN, Mat, Mat)>();

  void CalcOpticalFlowPyrLK(
    Mat prevImg,
    Mat nextImg,
    Mat prevPts,
    Mat nextPts,
    Mat status,
    Mat err,
  ) {
    return _CalcOpticalFlowPyrLK(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
    );
  }

  late final _CalcOpticalFlowPyrLKPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>(
      'CalcOpticalFlowPyrLK');
  late final _CalcOpticalFlowPyrLK = _CalcOpticalFlowPyrLKPtr.asFunction<
      void Function(Mat, Mat, Mat, Mat, Mat, Mat)>();

  void CalcOpticalFlowPyrLKWithParams(
    Mat prevImg,
    Mat nextImg,
    Mat prevPts,
    Mat nextPts,
    Mat status,
    Mat err,
    Size winSize,
    int maxLevel,
    TermCriteria criteria,
    int flags,
    double minEigThreshold,
  ) {
    return _CalcOpticalFlowPyrLKWithParams(
      prevImg,
      nextImg,
      prevPts,
      nextPts,
      status,
      err,
      winSize,
      maxLevel,
      criteria,
      flags,
      minEigThreshold,
    );
  }

  late final _CalcOpticalFlowPyrLKWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              Mat,
              Mat,
              Mat,
              Mat,
              Size,
              ffi.Int,
              TermCriteria,
              ffi.Int,
              ffi.Double)>>('CalcOpticalFlowPyrLKWithParams');
  late final _CalcOpticalFlowPyrLKWithParams =
      _CalcOpticalFlowPyrLKWithParamsPtr.asFunction<
          void Function(Mat, Mat, Mat, Mat, Mat, Mat, Size, int, TermCriteria,
              int, double)>();

  void CalcOpticalFlowFarneback(
    Mat prevImg,
    Mat nextImg,
    Mat flow,
    double pyrScale,
    int levels,
    int winsize,
    int iterations,
    int polyN,
    double polySigma,
    int flags,
  ) {
    return _CalcOpticalFlowFarneback(
      prevImg,
      nextImg,
      flow,
      pyrScale,
      levels,
      winsize,
      iterations,
      polyN,
      polySigma,
      flags,
    );
  }

  late final _CalcOpticalFlowFarnebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int)>>('CalcOpticalFlowFarneback');
  late final _CalcOpticalFlowFarneback =
      _CalcOpticalFlowFarnebackPtr.asFunction<
          void Function(
              Mat, Mat, Mat, double, int, int, int, int, double, int)>();

  double FindTransformECC(
    Mat templateImage,
    Mat inputImage,
    Mat warpMatrix,
    int motionType,
    TermCriteria criteria,
    Mat inputMask,
    int gaussFiltSize,
  ) {
    return _FindTransformECC(
      templateImage,
      inputImage,
      warpMatrix,
      motionType,
      criteria,
      inputMask,
      gaussFiltSize,
    );
  }

  late final _FindTransformECCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(Mat, Mat, Mat, ffi.Int, TermCriteria, Mat,
              ffi.Int)>>('FindTransformECC');
  late final _FindTransformECC = _FindTransformECCPtr.asFunction<
      double Function(Mat, Mat, Mat, int, TermCriteria, Mat, int)>();

  bool Tracker_Init(
    Tracker self,
    Mat image,
    Rect boundingBox,
  ) {
    return _Tracker_Init(
      self,
      image,
      boundingBox,
    );
  }

  late final _Tracker_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Tracker, Mat, Rect)>>(
          'Tracker_Init');
  late final _Tracker_Init =
      _Tracker_InitPtr.asFunction<bool Function(Tracker, Mat, Rect)>();

  bool Tracker_Update(
    Tracker self,
    Mat image,
    ffi.Pointer<Rect> boundingBox,
  ) {
    return _Tracker_Update(
      self,
      image,
      boundingBox,
    );
  }

  late final _Tracker_UpdatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(Tracker, Mat, ffi.Pointer<Rect>)>>(
      'Tracker_Update');
  late final _Tracker_Update = _Tracker_UpdatePtr.asFunction<
      bool Function(Tracker, Mat, ffi.Pointer<Rect>)>();

  TrackerMIL TrackerMIL_Create() {
    return _TrackerMIL_Create();
  }

  late final _TrackerMIL_CreatePtr =
      _lookup<ffi.NativeFunction<TrackerMIL Function()>>('TrackerMIL_Create');
  late final _TrackerMIL_Create =
      _TrackerMIL_CreatePtr.asFunction<TrackerMIL Function()>();

  void TrackerMIL_Close(
    TrackerMIL self,
  ) {
    return _TrackerMIL_Close(
      self,
    );
  }

  late final _TrackerMIL_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TrackerMIL)>>(
          'TrackerMIL_Close');
  late final _TrackerMIL_Close =
      _TrackerMIL_ClosePtr.asFunction<void Function(TrackerMIL)>();

  KalmanFilter KalmanFilter_New(
    int dynamParams,
    int measureParams,
  ) {
    return _KalmanFilter_New(
      dynamParams,
      measureParams,
    );
  }

  late final _KalmanFilter_NewPtr =
      _lookup<ffi.NativeFunction<KalmanFilter Function(ffi.Int, ffi.Int)>>(
          'KalmanFilter_New');
  late final _KalmanFilter_New =
      _KalmanFilter_NewPtr.asFunction<KalmanFilter Function(int, int)>();

  KalmanFilter KalmanFilter_NewWithParams(
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
  ) {
    return _KalmanFilter_NewWithParams(
      dynamParams,
      measureParams,
      controlParams,
      type,
    );
  }

  late final _KalmanFilter_NewWithParamsPtr = _lookup<
      ffi.NativeFunction<
          KalmanFilter Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('KalmanFilter_NewWithParams');
  late final _KalmanFilter_NewWithParams = _KalmanFilter_NewWithParamsPtr
      .asFunction<KalmanFilter Function(int, int, int, int)>();

  void KalmanFilter_Close(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_Close(
      kf,
    );
  }

  late final _KalmanFilter_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter)>>(
          'KalmanFilter_Close');
  late final _KalmanFilter_Close =
      _KalmanFilter_ClosePtr.asFunction<void Function(KalmanFilter)>();

  void KalmanFilter_Init(
    KalmanFilter kf,
    int dynamParams,
    int measureParams,
  ) {
    return _KalmanFilter_Init(
      kf,
      dynamParams,
      measureParams,
    );
  }

  late final _KalmanFilter_InitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(KalmanFilter, ffi.Int, ffi.Int)>>(
      'KalmanFilter_Init');
  late final _KalmanFilter_Init =
      _KalmanFilter_InitPtr.asFunction<void Function(KalmanFilter, int, int)>();

  void KalmanFilter_InitWithParams(
    KalmanFilter kf,
    int dynamParams,
    int measureParams,
    int controlParams,
    int type,
  ) {
    return _KalmanFilter_InitWithParams(
      kf,
      dynamParams,
      measureParams,
      controlParams,
      type,
    );
  }

  late final _KalmanFilter_InitWithParamsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(KalmanFilter, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('KalmanFilter_InitWithParams');
  late final _KalmanFilter_InitWithParams = _KalmanFilter_InitWithParamsPtr
      .asFunction<void Function(KalmanFilter, int, int, int, int)>();

  Mat KalmanFilter_Predict(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_Predict(
      kf,
    );
  }

  late final _KalmanFilter_PredictPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_Predict');
  late final _KalmanFilter_Predict =
      _KalmanFilter_PredictPtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_PredictWithParams(
    KalmanFilter kf,
    Mat control,
  ) {
    return _KalmanFilter_PredictWithParams(
      kf,
      control,
    );
  }

  late final _KalmanFilter_PredictWithParamsPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter, Mat)>>(
          'KalmanFilter_PredictWithParams');
  late final _KalmanFilter_PredictWithParams =
      _KalmanFilter_PredictWithParamsPtr.asFunction<
          Mat Function(KalmanFilter, Mat)>();

  Mat KalmanFilter_Correct(
    KalmanFilter kf,
    Mat measurement,
  ) {
    return _KalmanFilter_Correct(
      kf,
      measurement,
    );
  }

  late final _KalmanFilter_CorrectPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter, Mat)>>(
          'KalmanFilter_Correct');
  late final _KalmanFilter_Correct =
      _KalmanFilter_CorrectPtr.asFunction<Mat Function(KalmanFilter, Mat)>();

  Mat KalmanFilter_GetStatePre(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetStatePre(
      kf,
    );
  }

  late final _KalmanFilter_GetStatePrePtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetStatePre');
  late final _KalmanFilter_GetStatePre =
      _KalmanFilter_GetStatePrePtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetStatePost(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetStatePost(
      kf,
    );
  }

  late final _KalmanFilter_GetStatePostPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetStatePost');
  late final _KalmanFilter_GetStatePost =
      _KalmanFilter_GetStatePostPtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTransitionMatrix(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTransitionMatrix(
      kf,
    );
  }

  late final _KalmanFilter_GetTransitionMatrixPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTransitionMatrix');
  late final _KalmanFilter_GetTransitionMatrix =
      _KalmanFilter_GetTransitionMatrixPtr.asFunction<
          Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetControlMatrix(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetControlMatrix(
      kf,
    );
  }

  late final _KalmanFilter_GetControlMatrixPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetControlMatrix');
  late final _KalmanFilter_GetControlMatrix = _KalmanFilter_GetControlMatrixPtr
      .asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetMeasurementMatrix(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetMeasurementMatrix(
      kf,
    );
  }

  late final _KalmanFilter_GetMeasurementMatrixPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetMeasurementMatrix');
  late final _KalmanFilter_GetMeasurementMatrix =
      _KalmanFilter_GetMeasurementMatrixPtr.asFunction<
          Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetProcessNoiseCov(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetProcessNoiseCov(
      kf,
    );
  }

  late final _KalmanFilter_GetProcessNoiseCovPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetProcessNoiseCov');
  late final _KalmanFilter_GetProcessNoiseCov =
      _KalmanFilter_GetProcessNoiseCovPtr.asFunction<
          Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetMeasurementNoiseCov(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetMeasurementNoiseCov(
      kf,
    );
  }

  late final _KalmanFilter_GetMeasurementNoiseCovPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetMeasurementNoiseCov');
  late final _KalmanFilter_GetMeasurementNoiseCov =
      _KalmanFilter_GetMeasurementNoiseCovPtr.asFunction<
          Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetErrorCovPre(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetErrorCovPre(
      kf,
    );
  }

  late final _KalmanFilter_GetErrorCovPrePtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetErrorCovPre');
  late final _KalmanFilter_GetErrorCovPre =
      _KalmanFilter_GetErrorCovPrePtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetGain(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetGain(
      kf,
    );
  }

  late final _KalmanFilter_GetGainPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetGain');
  late final _KalmanFilter_GetGain =
      _KalmanFilter_GetGainPtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetErrorCovPost(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetErrorCovPost(
      kf,
    );
  }

  late final _KalmanFilter_GetErrorCovPostPtr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetErrorCovPost');
  late final _KalmanFilter_GetErrorCovPost =
      _KalmanFilter_GetErrorCovPostPtr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTemp1(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTemp1(
      kf,
    );
  }

  late final _KalmanFilter_GetTemp1Ptr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTemp1');
  late final _KalmanFilter_GetTemp1 =
      _KalmanFilter_GetTemp1Ptr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTemp2(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTemp2(
      kf,
    );
  }

  late final _KalmanFilter_GetTemp2Ptr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTemp2');
  late final _KalmanFilter_GetTemp2 =
      _KalmanFilter_GetTemp2Ptr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTemp3(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTemp3(
      kf,
    );
  }

  late final _KalmanFilter_GetTemp3Ptr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTemp3');
  late final _KalmanFilter_GetTemp3 =
      _KalmanFilter_GetTemp3Ptr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTemp4(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTemp4(
      kf,
    );
  }

  late final _KalmanFilter_GetTemp4Ptr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTemp4');
  late final _KalmanFilter_GetTemp4 =
      _KalmanFilter_GetTemp4Ptr.asFunction<Mat Function(KalmanFilter)>();

  Mat KalmanFilter_GetTemp5(
    KalmanFilter kf,
  ) {
    return _KalmanFilter_GetTemp5(
      kf,
    );
  }

  late final _KalmanFilter_GetTemp5Ptr =
      _lookup<ffi.NativeFunction<Mat Function(KalmanFilter)>>(
          'KalmanFilter_GetTemp5');
  late final _KalmanFilter_GetTemp5 =
      _KalmanFilter_GetTemp5Ptr.asFunction<Mat Function(KalmanFilter)>();

  void KalmanFilter_SetStatePre(
    KalmanFilter kf,
    Mat statePre,
  ) {
    return _KalmanFilter_SetStatePre(
      kf,
      statePre,
    );
  }

  late final _KalmanFilter_SetStatePrePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetStatePre');
  late final _KalmanFilter_SetStatePre = _KalmanFilter_SetStatePrePtr
      .asFunction<void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetStatePost(
    KalmanFilter kf,
    Mat statePost,
  ) {
    return _KalmanFilter_SetStatePost(
      kf,
      statePost,
    );
  }

  late final _KalmanFilter_SetStatePostPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetStatePost');
  late final _KalmanFilter_SetStatePost = _KalmanFilter_SetStatePostPtr
      .asFunction<void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetTransitionMatrix(
    KalmanFilter kf,
    Mat transitionMatrix,
  ) {
    return _KalmanFilter_SetTransitionMatrix(
      kf,
      transitionMatrix,
    );
  }

  late final _KalmanFilter_SetTransitionMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetTransitionMatrix');
  late final _KalmanFilter_SetTransitionMatrix =
      _KalmanFilter_SetTransitionMatrixPtr.asFunction<
          void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetControlMatrix(
    KalmanFilter kf,
    Mat controlMatrix,
  ) {
    return _KalmanFilter_SetControlMatrix(
      kf,
      controlMatrix,
    );
  }

  late final _KalmanFilter_SetControlMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetControlMatrix');
  late final _KalmanFilter_SetControlMatrix = _KalmanFilter_SetControlMatrixPtr
      .asFunction<void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetMeasurementMatrix(
    KalmanFilter kf,
    Mat measurementMatrix,
  ) {
    return _KalmanFilter_SetMeasurementMatrix(
      kf,
      measurementMatrix,
    );
  }

  late final _KalmanFilter_SetMeasurementMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetMeasurementMatrix');
  late final _KalmanFilter_SetMeasurementMatrix =
      _KalmanFilter_SetMeasurementMatrixPtr.asFunction<
          void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetProcessNoiseCov(
    KalmanFilter kf,
    Mat processNoiseCov,
  ) {
    return _KalmanFilter_SetProcessNoiseCov(
      kf,
      processNoiseCov,
    );
  }

  late final _KalmanFilter_SetProcessNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetProcessNoiseCov');
  late final _KalmanFilter_SetProcessNoiseCov =
      _KalmanFilter_SetProcessNoiseCovPtr.asFunction<
          void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetMeasurementNoiseCov(
    KalmanFilter kf,
    Mat measurementNoiseCov,
  ) {
    return _KalmanFilter_SetMeasurementNoiseCov(
      kf,
      measurementNoiseCov,
    );
  }

  late final _KalmanFilter_SetMeasurementNoiseCovPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetMeasurementNoiseCov');
  late final _KalmanFilter_SetMeasurementNoiseCov =
      _KalmanFilter_SetMeasurementNoiseCovPtr.asFunction<
          void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetErrorCovPre(
    KalmanFilter kf,
    Mat errorCovPre,
  ) {
    return _KalmanFilter_SetErrorCovPre(
      kf,
      errorCovPre,
    );
  }

  late final _KalmanFilter_SetErrorCovPrePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetErrorCovPre');
  late final _KalmanFilter_SetErrorCovPre = _KalmanFilter_SetErrorCovPrePtr
      .asFunction<void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetGain(
    KalmanFilter kf,
    Mat gain,
  ) {
    return _KalmanFilter_SetGain(
      kf,
      gain,
    );
  }

  late final _KalmanFilter_SetGainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetGain');
  late final _KalmanFilter_SetGain =
      _KalmanFilter_SetGainPtr.asFunction<void Function(KalmanFilter, Mat)>();

  void KalmanFilter_SetErrorCovPost(
    KalmanFilter kf,
    Mat errorCovPost,
  ) {
    return _KalmanFilter_SetErrorCovPost(
      kf,
      errorCovPost,
    );
  }

  late final _KalmanFilter_SetErrorCovPostPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>(
          'KalmanFilter_SetErrorCovPost');
  late final _KalmanFilter_SetErrorCovPost = _KalmanFilter_SetErrorCovPostPtr
      .asFunction<void Function(KalmanFilter, Mat)>();

  /// VideoCapture
  VideoCapture VideoCapture_New() {
    return _VideoCapture_New();
  }

  late final _VideoCapture_NewPtr =
      _lookup<ffi.NativeFunction<VideoCapture Function()>>('VideoCapture_New');
  late final _VideoCapture_New =
      _VideoCapture_NewPtr.asFunction<VideoCapture Function()>();

  void VideoCapture_Close(
    VideoCapture v,
  ) {
    return _VideoCapture_Close(
      v,
    );
  }

  late final _VideoCapture_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoCapture)>>(
          'VideoCapture_Close');
  late final _VideoCapture_Close =
      _VideoCapture_ClosePtr.asFunction<void Function(VideoCapture)>();

  bool VideoCapture_Open(
    VideoCapture v,
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _VideoCapture_Open(
      v,
      uri,
    );
  }

  late final _VideoCapture_OpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              VideoCapture, ffi.Pointer<ffi.Char>)>>('VideoCapture_Open');
  late final _VideoCapture_Open = _VideoCapture_OpenPtr.asFunction<
      bool Function(VideoCapture, ffi.Pointer<ffi.Char>)>();

  bool VideoCapture_OpenWithAPI(
    VideoCapture v,
    ffi.Pointer<ffi.Char> uri,
    int apiPreference,
  ) {
    return _VideoCapture_OpenWithAPI(
      v,
      uri,
      apiPreference,
    );
  }

  late final _VideoCapture_OpenWithAPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(VideoCapture, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('VideoCapture_OpenWithAPI');
  late final _VideoCapture_OpenWithAPI = _VideoCapture_OpenWithAPIPtr
      .asFunction<bool Function(VideoCapture, ffi.Pointer<ffi.Char>, int)>();

  bool VideoCapture_OpenDevice(
    VideoCapture v,
    int device,
  ) {
    return _VideoCapture_OpenDevice(
      v,
      device,
    );
  }

  late final _VideoCapture_OpenDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(VideoCapture, ffi.Int)>>(
          'VideoCapture_OpenDevice');
  late final _VideoCapture_OpenDevice = _VideoCapture_OpenDevicePtr.asFunction<
      bool Function(VideoCapture, int)>();

  bool VideoCapture_OpenDeviceWithAPI(
    VideoCapture v,
    int device,
    int apiPreference,
  ) {
    return _VideoCapture_OpenDeviceWithAPI(
      v,
      device,
      apiPreference,
    );
  }

  late final _VideoCapture_OpenDeviceWithAPIPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(VideoCapture, ffi.Int, ffi.Int)>>(
      'VideoCapture_OpenDeviceWithAPI');
  late final _VideoCapture_OpenDeviceWithAPI =
      _VideoCapture_OpenDeviceWithAPIPtr.asFunction<
          bool Function(VideoCapture, int, int)>();

  void VideoCapture_Set(
    VideoCapture v,
    int prop,
    double param,
  ) {
    return _VideoCapture_Set(
      v,
      prop,
      param,
    );
  }

  late final _VideoCapture_SetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              VideoCapture, ffi.Int, ffi.Double)>>('VideoCapture_Set');
  late final _VideoCapture_Set = _VideoCapture_SetPtr.asFunction<
      void Function(VideoCapture, int, double)>();

  double VideoCapture_Get(
    VideoCapture v,
    int prop,
  ) {
    return _VideoCapture_Get(
      v,
      prop,
    );
  }

  late final _VideoCapture_GetPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(VideoCapture, ffi.Int)>>(
          'VideoCapture_Get');
  late final _VideoCapture_Get =
      _VideoCapture_GetPtr.asFunction<double Function(VideoCapture, int)>();

  int VideoCapture_IsOpened(
    VideoCapture v,
  ) {
    return _VideoCapture_IsOpened(
      v,
    );
  }

  late final _VideoCapture_IsOpenedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(VideoCapture)>>(
          'VideoCapture_IsOpened');
  late final _VideoCapture_IsOpened =
      _VideoCapture_IsOpenedPtr.asFunction<int Function(VideoCapture)>();

  int VideoCapture_Read(
    VideoCapture v,
    Mat buf,
  ) {
    return _VideoCapture_Read(
      v,
      buf,
    );
  }

  late final _VideoCapture_ReadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(VideoCapture, Mat)>>(
          'VideoCapture_Read');
  late final _VideoCapture_Read =
      _VideoCapture_ReadPtr.asFunction<int Function(VideoCapture, Mat)>();

  void VideoCapture_Grab(
    VideoCapture v,
    int skip,
  ) {
    return _VideoCapture_Grab(
      v,
      skip,
    );
  }

  late final _VideoCapture_GrabPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoCapture, ffi.Int)>>(
          'VideoCapture_Grab');
  late final _VideoCapture_Grab =
      _VideoCapture_GrabPtr.asFunction<void Function(VideoCapture, int)>();

  /// VideoWriter
  VideoWriter VideoWriter_New() {
    return _VideoWriter_New();
  }

  late final _VideoWriter_NewPtr =
      _lookup<ffi.NativeFunction<VideoWriter Function()>>('VideoWriter_New');
  late final _VideoWriter_New =
      _VideoWriter_NewPtr.asFunction<VideoWriter Function()>();

  void VideoWriter_Close(
    VideoWriter vw,
  ) {
    return _VideoWriter_Close(
      vw,
    );
  }

  late final _VideoWriter_ClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoWriter)>>(
          'VideoWriter_Close');
  late final _VideoWriter_Close =
      _VideoWriter_ClosePtr.asFunction<void Function(VideoWriter)>();

  void VideoWriter_Open(
    VideoWriter vw,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> codec,
    double fps,
    int width,
    int height,
    bool isColor,
  ) {
    return _VideoWriter_Open(
      vw,
      name,
      codec,
      fps,
      width,
      height,
      isColor,
    );
  }

  late final _VideoWriter_OpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              VideoWriter,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>>('VideoWriter_Open');
  late final _VideoWriter_Open = _VideoWriter_OpenPtr.asFunction<
      void Function(VideoWriter, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          double, int, int, bool)>();

  int VideoWriter_IsOpened(
    VideoWriter vw,
  ) {
    return _VideoWriter_IsOpened(
      vw,
    );
  }

  late final _VideoWriter_IsOpenedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(VideoWriter)>>(
          'VideoWriter_IsOpened');
  late final _VideoWriter_IsOpened =
      _VideoWriter_IsOpenedPtr.asFunction<int Function(VideoWriter)>();

  void VideoWriter_Write(
    VideoWriter vw,
    Mat img,
  ) {
    return _VideoWriter_Write(
      vw,
      img,
    );
  }

  late final _VideoWriter_WritePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VideoWriter, Mat)>>(
          'VideoWriter_Write');
  late final _VideoWriter_Write =
      _VideoWriter_WritePtr.asFunction<void Function(VideoWriter, Mat)>();

  int VideoWriter_Fourcc(
    int c1,
    int c2,
    int c3,
    int c4,
  ) {
    return _VideoWriter_Fourcc(
      c1,
      c2,
      c3,
      c4,
    );
  }

  late final _VideoWriter_FourccPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Char, ffi.Char, ffi.Char, ffi.Char)>>('VideoWriter_Fourcc');
  late final _VideoWriter_Fourcc =
      _VideoWriter_FourccPtr.asFunction<int Function(int, int, int, int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final CvNative _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ArucoDetectorParameters Function()>>
      get ArucoDetectorParameters_Create =>
          _library._ArucoDetectorParameters_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_Close =>
          _library._ArucoDetectorParameters_ClosePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAdaptiveThreshWinSizeMin =>
          _library._ArucoDetectorParameters_SetAdaptiveThreshWinSizeMinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAdaptiveThreshWinSizeMin =>
          _library._ArucoDetectorParameters_GetAdaptiveThreshWinSizeMinPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAdaptiveThreshWinSizeMax =>
          _library._ArucoDetectorParameters_SetAdaptiveThreshWinSizeMaxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAdaptiveThreshWinSizeMax =>
          _library._ArucoDetectorParameters_GetAdaptiveThreshWinSizeMaxPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAdaptiveThreshWinSizeStep =>
          _library._ArucoDetectorParameters_SetAdaptiveThreshWinSizeStepPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAdaptiveThreshWinSizeStep =>
          _library._ArucoDetectorParameters_GetAdaptiveThreshWinSizeStepPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetAdaptiveThreshConstant =>
          _library._ArucoDetectorParameters_SetAdaptiveThreshConstantPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAdaptiveThreshConstant =>
          _library._ArucoDetectorParameters_GetAdaptiveThreshConstantPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMinMarkerPerimeterRate =>
          _library._ArucoDetectorParameters_SetMinMarkerPerimeterRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMinMarkerPerimeterRate =>
          _library._ArucoDetectorParameters_GetMinMarkerPerimeterRatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMaxMarkerPerimeterRate =>
          _library._ArucoDetectorParameters_SetMaxMarkerPerimeterRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMaxMarkerPerimeterRate =>
          _library._ArucoDetectorParameters_GetMaxMarkerPerimeterRatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetPolygonalApproxAccuracyRate =>
          _library._ArucoDetectorParameters_SetPolygonalApproxAccuracyRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetPolygonalApproxAccuracyRate =>
          _library._ArucoDetectorParameters_GetPolygonalApproxAccuracyRatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMinCornerDistanceRate =>
          _library._ArucoDetectorParameters_SetMinCornerDistanceRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMinCornerDistanceRate =>
          _library._ArucoDetectorParameters_GetMinCornerDistanceRatePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetMinDistanceToBorder =>
          _library._ArucoDetectorParameters_SetMinDistanceToBorderPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMinDistanceToBorder =>
          _library._ArucoDetectorParameters_GetMinDistanceToBorderPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMinMarkerDistanceRate =>
          _library._ArucoDetectorParameters_SetMinMarkerDistanceRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMinMarkerDistanceRate =>
          _library._ArucoDetectorParameters_GetMinMarkerDistanceRatePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetCornerRefinementMethod =>
          _library._ArucoDetectorParameters_SetCornerRefinementMethodPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetCornerRefinementMethod =>
          _library._ArucoDetectorParameters_GetCornerRefinementMethodPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetCornerRefinementWinSize =>
          _library._ArucoDetectorParameters_SetCornerRefinementWinSizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetCornerRefinementWinSize =>
          _library._ArucoDetectorParameters_GetCornerRefinementWinSizePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetCornerRefinementMaxIterations =>
          _library._ArucoDetectorParameters_SetCornerRefinementMaxIterationsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetCornerRefinementMaxIterations =>
          _library._ArucoDetectorParameters_GetCornerRefinementMaxIterationsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetCornerRefinementMinAccuracy =>
          _library._ArucoDetectorParameters_SetCornerRefinementMinAccuracyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetCornerRefinementMinAccuracy =>
          _library._ArucoDetectorParameters_GetCornerRefinementMinAccuracyPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetMarkerBorderBits =>
          _library._ArucoDetectorParameters_SetMarkerBorderBitsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMarkerBorderBits =>
          _library._ArucoDetectorParameters_GetMarkerBorderBitsPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetPerspectiveRemovePixelPerCell =>
          _library._ArucoDetectorParameters_SetPerspectiveRemovePixelPerCellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetPerspectiveRemovePixelPerCell =>
          _library._ArucoDetectorParameters_GetPerspectiveRemovePixelPerCellPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCell =>
          _library
              ._ArucoDetectorParameters_SetPerspectiveRemoveIgnoredMarginPerCellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCell =>
          _library
              ._ArucoDetectorParameters_GetPerspectiveRemoveIgnoredMarginPerCellPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMaxErroneousBitsInBorderRate =>
          _library._ArucoDetectorParameters_SetMaxErroneousBitsInBorderRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMaxErroneousBitsInBorderRate =>
          _library._ArucoDetectorParameters_GetMaxErroneousBitsInBorderRatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetMinOtsuStdDev =>
          _library._ArucoDetectorParameters_SetMinOtsuStdDevPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetMinOtsuStdDev =>
          _library._ArucoDetectorParameters_GetMinOtsuStdDevPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Double)>>
      get ArucoDetectorParameters_SetErrorCorrectionRate =>
          _library._ArucoDetectorParameters_SetErrorCorrectionRatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetErrorCorrectionRate =>
          _library._ArucoDetectorParameters_GetErrorCorrectionRatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Float)>>
      get ArucoDetectorParameters_SetAprilTagQuadDecimate =>
          _library._ArucoDetectorParameters_SetAprilTagQuadDecimatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagQuadDecimate =>
          _library._ArucoDetectorParameters_GetAprilTagQuadDecimatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Float)>>
      get ArucoDetectorParameters_SetAprilTagQuadSigma =>
          _library._ArucoDetectorParameters_SetAprilTagQuadSigmaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagQuadSigma =>
          _library._ArucoDetectorParameters_GetAprilTagQuadSigmaPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAprilTagMinClusterPixels =>
          _library._ArucoDetectorParameters_SetAprilTagMinClusterPixelsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagMinClusterPixels =>
          _library._ArucoDetectorParameters_GetAprilTagMinClusterPixelsPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAprilTagMaxNmaxima =>
          _library._ArucoDetectorParameters_SetAprilTagMaxNmaximaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagMaxNmaxima =>
          _library._ArucoDetectorParameters_GetAprilTagMaxNmaximaPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Float)>>
      get ArucoDetectorParameters_SetAprilTagCriticalRad =>
          _library._ArucoDetectorParameters_SetAprilTagCriticalRadPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagCriticalRad =>
          _library._ArucoDetectorParameters_GetAprilTagCriticalRadPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ArucoDetectorParameters, ffi.Float)>>
      get ArucoDetectorParameters_SetAprilTagMaxLineFitMse =>
          _library._ArucoDetectorParameters_SetAprilTagMaxLineFitMsePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagMaxLineFitMse =>
          _library._ArucoDetectorParameters_GetAprilTagMaxLineFitMsePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiff =>
          _library._ArucoDetectorParameters_SetAprilTagMinWhiteBlackDiffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiff =>
          _library._ArucoDetectorParameters_GetAprilTagMinWhiteBlackDiffPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Int)>>
      get ArucoDetectorParameters_SetAprilTagDeglitch =>
          _library._ArucoDetectorParameters_SetAprilTagDeglitchPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetAprilTagDeglitch =>
          _library._ArucoDetectorParameters_GetAprilTagDeglitchPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ArucoDetectorParameters, ffi.Bool)>>
      get ArucoDetectorParameters_SetDetectInvertedMarker =>
          _library._ArucoDetectorParameters_SetDetectInvertedMarkerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ArucoDetectorParameters)>>
      get ArucoDetectorParameters_GetDetectInvertedMarker =>
          _library._ArucoDetectorParameters_GetDetectInvertedMarkerPtr;
  ffi.Pointer<ffi.NativeFunction<ArucoDictionary Function(ffi.Int)>>
      get getPredefinedDictionary => _library._getPredefinedDictionaryPtr;
  ffi.Pointer<ffi.NativeFunction<ArucoDetector Function()>>
      get ArucoDetector_New => _library._ArucoDetector_NewPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ArucoDetector Function(ArucoDictionary, ArucoDetectorParameters)>>
      get ArucoDetector_NewWithParams =>
          _library._ArucoDetector_NewWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ArucoDetector)>>
      get ArucoDetector_Close => _library._ArucoDetector_ClosePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ArucoDetector,
              Mat,
              Points2fVector,
              ffi.Pointer<IntVector>,
              Points2fVector)>> get ArucoDetector_DetectMarkers =>
      _library._ArucoDetector_DetectMarkersPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Points2fVector, IntVector, Scalar)>>
      get ArucoDrawDetectedMarkers => _library._ArucoDrawDetectedMarkersPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, Mat, ffi.Int)>>
      get ArucoGenerateImageMarker => _library._ArucoGenerateImageMarkerPtr;
  ffi.Pointer<ffi.NativeFunction<AsyncArray Function()>> get AsyncArray_New =>
      _library._AsyncArray_NewPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(AsyncArray, Mat)>>
      get AsyncArray_GetAsync => _library._AsyncArray_GetAsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AsyncArray)>>
      get AsyncArray_Close => _library._AsyncArray_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<AsyncArray Function(Net, ffi.Pointer<ffi.Char>)>>
      get Net_forwardAsync => _library._Net_forwardAsyncPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Fisheye_UndistortImage => _library._Fisheye_UndistortImagePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Size)>>
      get Fisheye_UndistortImageWithParams =>
          _library._Fisheye_UndistortImageWithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>
      get Fisheye_UndistortPoints => _library._Fisheye_UndistortPointsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Size, Mat, Mat, ffi.Double, Size, ffi.Double)>>
      get Fisheye_EstimateNewCameraMatrixForUndistortRectify =>
          _library._Fisheye_EstimateNewCameraMatrixForUndistortRectifyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, Mat, Size, ffi.Int, Mat, Mat)>>
      get InitUndistortRectifyMap => _library._InitUndistortRectifyMapPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Mat Function(Mat, Mat, Size, ffi.Double, Size, ffi.Pointer<Rect>,
              ffi.Bool)>> get GetOptimalNewCameraMatrixWithParams =>
      _library._GetOptimalNewCameraMatrixWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              Points3fVector,
              Points2fVector,
              Size,
              Mat,
              Mat,
              Mat,
              Mat,
              ffi.Int)>> get CalibrateCamera => _library._CalibrateCameraPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat)>>
      get Undistort => _library._UndistortPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>
      get UndistortPoints => _library._UndistortPointsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int)>>
      get FindChessboardCorners => _library._FindChessboardCornersPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int)>>
      get FindChessboardCornersSB => _library._FindChessboardCornersSBPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(Mat, Size, Mat, ffi.Int, Mat)>>
      get FindChessboardCornersSBWithMeta =>
          _library._FindChessboardCornersSBWithMetaPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Size, Mat, ffi.Bool)>>
      get DrawChessboardCorners => _library._DrawChessboardCornersPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>
      get EstimateAffinePartial2D => _library._EstimateAffinePartial2DPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Mat Function(
              Point2fVector,
              Point2fVector,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Size,
              ffi.Double,
              ffi.Size)>> get EstimateAffinePartial2DWithParams =>
      _library._EstimateAffinePartial2DWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>
      get EstimateAffine2D => _library._EstimateAffine2DPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Mat Function(
              Point2fVector,
              Point2fVector,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Size,
              ffi.Double,
              ffi.Size)>> get EstimateAffine2DWithParams =>
      _library._EstimateAffine2DWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<InputOutputArray Function()>> get noArray =>
      _library._noArrayPtr;
  ffi.Pointer<ffi.NativeFunction<Mats Function()>> get Mats_New =>
      _library._Mats_NewPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mats, ffi.Int)>> get Mats_get =>
      _library._Mats_getPtr;
  ffi.Pointer<ffi.NativeFunction<DMatches Function(MultiDMatches, ffi.Int)>>
      get MultiDMatches_get => _library._MultiDMatches_getPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ByteArray Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get toByteArray => _library._toByteArrayPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ByteArray)>>
      get ByteArray_Release => _library._ByteArray_ReleasePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Contours)>>
      get Contours_Close => _library._Contours_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KeyPoints)>>
      get KeyPoints_Close => _library._KeyPoints_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Rects)>> get Rects_Close =>
      _library._Rects_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mats)>> get Mats_Close =>
      _library._Mats_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point)>> get Point_Close =>
      _library._Point_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point2f)>>
      get Point2f_Close => _library._Point2f_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point3f)>>
      get Point3f_Close => _library._Point3f_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Points)>> get Points_Close =>
      _library._Points_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(DMatches)>>
      get DMatches_Close => _library._DMatches_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MultiDMatches)>>
      get MultiDMatches_Close => _library._MultiDMatches_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function()>> get Mat_New =>
      _library._Mat_NewPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_NewWithSize => _library._Mat_NewWithSizePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(IntVector, ffi.Int)>>
      get Mat_NewWithSizes => _library._Mat_NewWithSizesPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(IntVector, ffi.Int, Scalar)>>
      get Mat_NewWithSizesFromScalar => _library._Mat_NewWithSizesFromScalarPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(IntVector, ffi.Int, ByteArray)>>
      get Mat_NewWithSizesFromBytes => _library._Mat_NewWithSizesFromBytesPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Scalar, ffi.Int)>>
      get Mat_NewFromScalar => _library._Mat_NewFromScalarPtr;
  ffi.Pointer<
          ffi.NativeFunction<Mat Function(Scalar, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_NewWithSizeFromScalar => _library._Mat_NewWithSizeFromScalarPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int, ByteArray)>>
      get Mat_NewFromBytes => _library._Mat_NewFromBytesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Mat Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_FromPtr => _library._Mat_FromPtrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat)>> get Mat_Close =>
      _library._Mat_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat)>> get Mat_Empty =>
      _library._Mat_EmptyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat)>>
      get Mat_IsContinuous => _library._Mat_IsContinuousPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat)>> get Mat_Clone =>
      _library._Mat_ClonePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>> get Mat_CopyTo =>
      _library._Mat_CopyToPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Total =>
      _library._Mat_TotalPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<IntVector>)>>
      get Mat_Size => _library._Mat_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_CopyToWithMask => _library._Mat_CopyToWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_ConvertTo => _library._Mat_ConvertToPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>>
      get Mat_ConvertToWithParams => _library._Mat_ConvertToWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ByteArray Function(Mat)>> get Mat_ToBytes =>
      _library._Mat_ToBytesPtr;
  ffi.Pointer<ffi.NativeFunction<ByteArray Function(Mat)>> get Mat_DataPtr =>
      _library._Mat_DataPtrPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, Rect)>> get Mat_Region =>
      _library._Mat_RegionPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_Reshape => _library._Mat_ReshapePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double)>>
      get Mat_PatchNaNs => _library._Mat_PatchNaNsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat)>> get Mat_ConvertFp16 =>
      _library._Mat_ConvertFp16Ptr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function(Mat)>> get Mat_Mean =>
      _library._Mat_MeanPtr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function(Mat, Mat)>>
      get Mat_MeanWithMask => _library._Mat_MeanWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat)>> get Mat_Sqrt =>
      _library._Mat_SqrtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Rows =>
      _library._Mat_RowsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Cols =>
      _library._Mat_ColsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Channels =>
      _library._Mat_ChannelsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Type =>
      _library._Mat_TypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_Step =>
      _library._Mat_StepPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_ElemSize =>
      _library._Mat_ElemSizePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>
      get Eye => _library._EyePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>
      get Zeros => _library._ZerosPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Int, ffi.Int)>>
      get Ones => _library._OnesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetUChar => _library._Mat_GetUCharPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Uint8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetUChar3 => _library._Mat_GetUChar3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetSChar => _library._Mat_GetSCharPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int8 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetSChar3 => _library._Mat_GetSChar3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetShort => _library._Mat_GetShortPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int16 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetShort3 => _library._Mat_GetShort3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetInt => _library._Mat_GetIntPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int32 Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetInt3 => _library._Mat_GetInt3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Float Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetFloat => _library._Mat_GetFloatPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Float Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetFloat3 => _library._Mat_GetFloat3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_GetDouble => _library._Mat_GetDoublePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Double Function(Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_GetDouble3 => _library._Mat_GetDouble3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Scalar)>>
      get Mat_SetTo => _library._Mat_SetToPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Uint8)>>
      get Mat_SetUChar => _library._Mat_SetUCharPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Uint8)>>
      get Mat_SetUChar3 => _library._Mat_SetUChar3Ptr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int8)>>
      get Mat_SetSChar => _library._Mat_SetSCharPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int8)>>
      get Mat_SetSChar3 => _library._Mat_SetSChar3Ptr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int16)>>
      get Mat_SetShort => _library._Mat_SetShortPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int16)>>
      get Mat_SetShort3 => _library._Mat_SetShort3Ptr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int32)>>
      get Mat_SetInt => _library._Mat_SetIntPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Int32)>>
      get Mat_SetInt3 => _library._Mat_SetInt3Ptr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Float)>>
      get Mat_SetFloat => _library._Mat_SetFloatPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Float)>>
      get Mat_SetFloat3 => _library._Mat_SetFloat3Ptr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Double)>>
      get Mat_SetDouble => _library._Mat_SetDoublePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>>
      get Mat_SetDouble3 => _library._Mat_SetDouble3Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>
      get Mat_AddUChar => _library._Mat_AddUCharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>
      get Mat_SubtractUChar => _library._Mat_SubtractUCharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>
      get Mat_MultiplyUChar => _library._Mat_MultiplyUCharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Uint8)>>
      get Mat_DivideUChar => _library._Mat_DivideUCharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>
      get Mat_AddFloat => _library._Mat_AddFloatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>
      get Mat_SubtractFloat => _library._Mat_SubtractFloatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>
      get Mat_MultiplyFloat => _library._Mat_MultiplyFloatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Float)>>
      get Mat_DivideFloat => _library._Mat_DivideFloatPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, Mat)>>
      get Mat_MultiplyMatrix => _library._Mat_MultiplyMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat)>> get Mat_T =>
      _library._Mat_TPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>> get LUT =>
      _library._LUTPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_AbsDiff => _library._Mat_AbsDiffPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Add => _library._Mat_AddPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, ffi.Double, Mat, ffi.Double, ffi.Double, Mat)>>
      get Mat_AddWeighted => _library._Mat_AddWeightedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_BitwiseAnd => _library._Mat_BitwiseAndPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Mat_BitwiseAndWithMask => _library._Mat_BitwiseAndWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get Mat_BitwiseNot => _library._Mat_BitwiseNotPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_BitwiseNotWithMask => _library._Mat_BitwiseNotWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_BitwiseOr => _library._Mat_BitwiseOrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Mat_BitwiseOrWithMask => _library._Mat_BitwiseOrWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_BitwiseXor => _library._Mat_BitwiseXorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Mat_BitwiseXorWithMask => _library._Mat_BitwiseXorWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int)>>
      get Mat_Compare => _library._Mat_ComparePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              Mat,
              ffi.Int,
              Mat,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              ffi.Bool)>> get Mat_BatchDistance =>
      _library._Mat_BatchDistancePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_BorderInterpolate => _library._Mat_BorderInterpolatePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>>
      get Mat_CalcCovarMatrix => _library._Mat_CalcCovarMatrixPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Bool)>>
      get Mat_CartToPolar => _library._Mat_CartToPolarPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat)>> get Mat_CheckRange =>
      _library._Mat_CheckRangePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Bool)>>
      get Mat_CompleteSymm => _library._Mat_CompleteSymmPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double)>>
      get Mat_ConvertScaleAbs => _library._Mat_ConvertScaleAbsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              Scalar)>> get Mat_CopyMakeBorder =>
      _library._Mat_CopyMakeBorderPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat)>> get Mat_CountNonZero =>
      _library._Mat_CountNonZeroPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_DCT => _library._Mat_DCTPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat)>>
      get Mat_Determinant => _library._Mat_DeterminantPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_DFT => _library._Mat_DFTPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Divide => _library._Mat_DividePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat, Mat, Mat)>>
      get Mat_Eigen => _library._Mat_EigenPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_EigenNonSymmetric => _library._Mat_EigenNonSymmetricPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Int)>>
      get Mat_PCACompute => _library._Mat_PCAComputePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>> get Mat_Exp =>
      _library._Mat_ExpPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_ExtractChannel => _library._Mat_ExtractChannelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get Mat_FindNonZero => _library._Mat_FindNonZeroPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_Flip => _library._Mat_FlipPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Double, Mat, ffi.Double, Mat, ffi.Int)>>
      get Mat_Gemm => _library._Mat_GemmPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get Mat_GetOptimalDFTSize => _library._Mat_GetOptimalDFTSizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Hconcat => _library._Mat_HconcatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Vconcat => _library._Mat_VconcatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Rotate => _library._RotatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_Idct => _library._Mat_IdctPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int)>>
      get Mat_Idft => _library._Mat_IdftPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Mat_InRange => _library._Mat_InRangePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar, Mat)>>
      get Mat_InRangeWithScalar => _library._Mat_InRangeWithScalarPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_InsertChannel => _library._Mat_InsertChannelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>
      get Mat_Invert => _library._Mat_InvertPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(
                  Mat, ffi.Int, Mat, TermCriteria, ffi.Int, ffi.Int, Mat)>>
      get KMeans => _library._KMeansPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(PointVector, ffi.Int, Mat, TermCriteria, ffi.Int,
              ffi.Int, Mat)>> get KMeansPoints => _library._KMeansPointsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>> get Mat_Log =>
      _library._Mat_LogPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Magnitude => _library._Mat_MagnitudePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Max => _library._Mat_MaxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_MeanStdDev => _library._Mat_MeanStdDevPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mats, Mat)>> get Mat_Merge =>
      _library._Mat_MergePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Min => _library._Mat_MinPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> get Mat_MinMaxIdx =>
      _library._Mat_MinMaxIdxPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<Point>,
              ffi.Pointer<Point>)>> get Mat_MinMaxLoc =>
      _library._Mat_MinMaxLocPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mats, Mats, IntVector)>>
      get Mat_MixChannels => _library._Mat_MixChannelsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int)>>
      get Mat_MulSpectrums => _library._Mat_MulSpectrumsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Multiply => _library._Mat_MultiplyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, ffi.Double, ffi.Int)>>
      get Mat_MultiplyWithParams => _library._Mat_MultiplyWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Subtract => _library._Mat_SubtractPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>
      get Mat_Normalize => _library._Mat_NormalizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, ffi.Int)>> get Norm =>
      _library._NormPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>
      get NormWithMats => _library._NormWithMatsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_PerspectiveTransform => _library._Mat_PerspectiveTransformPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Mat, Mat, Mat, ffi.Int)>>
      get Mat_Solve => _library._Mat_SolvePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Mat, Mat)>>
      get Mat_SolveCubic => _library._Mat_SolveCubicPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>
      get Mat_SolvePoly => _library._Mat_SolvePolyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get Mat_Reduce => _library._Mat_ReducePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Bool)>>
      get Mat_ReduceArgMax => _library._Mat_ReduceArgMaxPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, ffi.Bool)>>
      get Mat_ReduceArgMin => _library._Mat_ReduceArgMinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Int, ffi.Int, Mat)>>
      get Mat_Repeat => _library._Mat_RepeatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, Mat, Mat)>>
      get Mat_ScaleAdd => _library._Mat_ScaleAddPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double)>>
      get Mat_SetIdentity => _library._Mat_SetIdentityPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_Sort => _library._Mat_SortPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get Mat_SortIdx => _library._Mat_SortIdxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<Mats>)>>
      get Mat_Split => _library._Mat_SplitPtr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function(Mat)>> get Mat_Trace =>
      _library._Mat_TracePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_Transform => _library._Mat_TransformPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get Mat_Transpose => _library._Mat_TransposePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Bool)>>
      get Mat_PolarToCart => _library._Mat_PolarToCartPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, Mat)>>
      get Mat_Pow => _library._Mat_PowPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Bool)>>
      get Mat_Phase => _library._Mat_PhasePtr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function(Mat)>> get Mat_Sum =>
      _library._Mat_SumPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<TermCriteria Function(ffi.Int, ffi.Int, ffi.Double)>>
      get TermCriteria_New => _library._TermCriteria_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function()>> get GetCVTickCount =>
      _library._GetCVTickCountPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function()>> get GetTickFrequency =>
      _library._GetTickFrequencyPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_rowRange => _library._Mat_rowRangePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>
      get Mat_colRange => _library._Mat_colRangePtr;
  ffi.Pointer<ffi.NativeFunction<PointVector Function()>> get PointVector_New =>
      _library._PointVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<PointVector Function(Contour)>>
      get PointVector_NewFromPoints => _library._PointVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<PointVector Function(Mat)>>
      get PointVector_NewFromMat => _library._PointVector_NewFromMatPtr;
  ffi.Pointer<ffi.NativeFunction<Point Function(PointVector, ffi.Int)>>
      get PointVector_At => _library._PointVector_AtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointVector, Point)>>
      get PointVector_Append => _library._PointVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(PointVector)>>
      get PointVector_Size => _library._PointVector_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointVector)>>
      get PointVector_Close => _library._PointVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<PointsVector Function()>>
      get PointsVector_New => _library._PointsVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<PointsVector Function(Contours)>>
      get PointsVector_NewFromPoints => _library._PointsVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<PointVector Function(PointsVector, ffi.Int)>>
      get PointsVector_At => _library._PointsVector_AtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointsVector, PointVector)>>
      get PointsVector_Append => _library._PointsVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(PointsVector)>>
      get PointsVector_Size => _library._PointsVector_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointsVector)>>
      get PointsVector_Close => _library._PointsVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<Point2fVector Function()>>
      get Point2fVector_New => _library._Point2fVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point2fVector)>>
      get Point2fVector_Close => _library._Point2fVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<Point2fVector Function(Contour2f)>>
      get Point2fVector_NewFromPoints =>
          _library._Point2fVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<Point2fVector Function(Mat)>>
      get Point2fVector_NewFromMat => _library._Point2fVector_NewFromMatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point2fVector, Point2f)>>
      get Point2fVector_Append => _library._Point2fVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<Point2f Function(Point2fVector, ffi.Int)>>
      get Point2fVector_At => _library._Point2fVector_AtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Point2fVector)>>
      get Point2fVector_Size => _library._Point2fVector_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(IntVector)>>
      get IntVector_Close => _library._IntVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CStrings)>>
      get CStrings_Close => _library._CStrings_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<RNG Function(ffi.Uint64)>>
      get Rng_NewWithState => _library._Rng_NewWithStatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(RNG)>> get Rng_Close =>
      _library._Rng_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<RNG Function()>> get TheRNG =>
      _library._TheRNGPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>> get SetRNGSeed =>
      _library._SetRNGSeedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  RNG, Mat, ffi.Int, ffi.Double, ffi.Double, ffi.Bool)>>
      get RNG_Fill => _library._RNG_FillPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(RNG, ffi.Double)>>
      get RNG_Gaussian => _library._RNG_GaussianPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(RNG, ffi.Int, ffi.Int)>>
      get RNG_Uniform => _library._RNG_UniformPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Double Function(RNG, ffi.Double, ffi.Double)>>
      get RNG_UniformDouble => _library._RNG_UniformDoublePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.UnsignedInt Function(RNG)>> get RNG_Next =>
      _library._RNG_NextPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar)>>
      get RandN => _library._RandNPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat)>> get RandShuffle =>
      _library._RandShufflePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Double, RNG)>>
      get RandShuffleWithParams => _library._RandShuffleWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Scalar, Scalar)>>
      get RandU => _library._RandUPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointVector, Point2fVector)>>
      get copyPointVectorToPoint2fVector =>
          _library._copyPointVectorToPoint2fVectorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get StdByteVectorInitialize => _library._StdByteVectorInitializePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get StdByteVectorFree => _library._StdByteVectorFreePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>
      get StdByteVectorLen => _library._StdByteVectorLenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Void>)>>
      get StdByteVectorData => _library._StdByteVectorDataPtr;
  ffi.Pointer<ffi.NativeFunction<UCharVector Function()>> get UCharVector_New =>
      _library._UCharVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(UCharVector)>>
      get UCharVector_Free => _library._UCharVector_FreePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(UCharVector)>>
      get UCharVector_Size => _library._UCharVector_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(UCharVector, uchar)>>
      get UCharVector_Append => _library._UCharVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<uchar Function(UCharVector, ffi.Int)>>
      get UCharVector_At => _library._UCharVector_AtPtr;
  ffi.Pointer<ffi.NativeFunction<Points2fVector Function()>>
      get Points2fVector_New => _library._Points2fVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<Points2fVector Function(Contours2f)>>
      get Points2fVector_NewFromPoints =>
          _library._Points2fVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Points2fVector)>>
      get Points2fVector_Size => _library._Points2fVector_SizePtr;
  ffi.Pointer<
          ffi.NativeFunction<Point2fVector Function(Points2fVector, ffi.Int)>>
      get Points2fVector_At => _library._Points2fVector_AtPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Points2fVector, Point2fVector)>>
      get Points2fVector_Append => _library._Points2fVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Points2fVector)>>
      get Points2fVector_Close => _library._Points2fVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<Point3fVector Function()>>
      get Point3fVector_New => _library._Point3fVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<Point3fVector Function(Contour3f)>>
      get Point3fVector_NewFromPoints =>
          _library._Point3fVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<Point3fVector Function(Mat)>>
      get Point3fVector_NewFromMat => _library._Point3fVector_NewFromMatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point3fVector, Point3f)>>
      get Point3fVector_Append => _library._Point3fVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<Point3f Function(Point3fVector, ffi.Int)>>
      get Point3fVector_At => _library._Point3fVector_AtPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Point3fVector)>>
      get Point3fVector_Size => _library._Point3fVector_SizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Point3fVector)>>
      get Point3fVector_Close => _library._Point3fVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<Points3fVector Function()>>
      get Points3fVector_New => _library._Points3fVector_NewPtr;
  ffi.Pointer<ffi.NativeFunction<Points3fVector Function(Contours3f)>>
      get Points3fVector_NewFromPoints =>
          _library._Points3fVector_NewFromPointsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(Points3fVector)>>
      get Points3fVector_Size => _library._Points3fVector_SizePtr;
  ffi.Pointer<
          ffi.NativeFunction<Point3fVector Function(Points3fVector, ffi.Int)>>
      get Points3fVector_At => _library._Points3fVector_AtPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Points3fVector, Point3fVector)>>
      get Points3fVector_Append => _library._Points3fVector_AppendPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Points3fVector)>>
      get Points3fVector_Close => _library._Points3fVector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      get SetNumThreads => _library._SetNumThreadsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get GetNumThreads =>
      _library._GetNumThreadsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Net Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get Net_ReadNet => _library._Net_ReadNetPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Net Function(ffi.Pointer<ffi.Char>, ByteArray, ByteArray)>>
      get Net_ReadNetBytes => _library._Net_ReadNetBytesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Net Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get Net_ReadNetFromCaffe => _library._Net_ReadNetFromCaffePtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ByteArray, ByteArray)>>
      get Net_ReadNetFromCaffeBytes => _library._Net_ReadNetFromCaffeBytesPtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>
      get Net_ReadNetFromTensorflow => _library._Net_ReadNetFromTensorflowPtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ByteArray)>>
      get Net_ReadNetFromTensorflowBytes =>
          _library._Net_ReadNetFromTensorflowBytesPtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>
      get Net_ReadNetFromTorch => _library._Net_ReadNetFromTorchPtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ffi.Pointer<ffi.Char>)>>
      get Net_ReadNetFromONNX => _library._Net_ReadNetFromONNXPtr;
  ffi.Pointer<ffi.NativeFunction<Net Function(ByteArray)>>
      get Net_ReadNetFromONNXBytes => _library._Net_ReadNetFromONNXBytesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Mat Function(Mat, ffi.Double, Size, Scalar, ffi.Bool, ffi.Bool)>>
      get Net_BlobFromImage => _library._Net_BlobFromImagePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mats,
              Mat,
              ffi.Double,
              Size,
              Scalar,
              ffi.Bool,
              ffi.Bool,
              ffi.Int)>> get Net_BlobFromImages =>
      _library._Net_BlobFromImagesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, ffi.Pointer<Mats>)>>
      get Net_ImagesFromBlob => _library._Net_ImagesFromBlobPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Net)>> get Net_Close =>
      _library._Net_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Net)>> get Net_Empty =>
      _library._Net_EmptyPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Net, Mat, ffi.Pointer<ffi.Char>)>>
      get Net_SetInput => _library._Net_SetInputPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Net, ffi.Pointer<ffi.Char>)>>
      get Net_Forward => _library._Net_ForwardPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Net, ffi.Pointer<Mats>, CStrings)>>
      get Net_ForwardLayers => _library._Net_ForwardLayersPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Net, ffi.Int)>>
      get Net_SetPreferableBackend => _library._Net_SetPreferableBackendPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Net, ffi.Int)>>
      get Net_SetPreferableTarget => _library._Net_SetPreferableTargetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function(Net)>>
      get Net_GetPerfProfile => _library._Net_GetPerfProfilePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Net, ffi.Pointer<IntVector>)>>
      get Net_GetUnconnectedOutLayers =>
          _library._Net_GetUnconnectedOutLayersPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Net, ffi.Pointer<CStrings>)>>
      get Net_GetLayerNames => _library._Net_GetLayerNamesPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Mat, ffi.Int, ffi.Int)>>
      get Net_GetBlobChannel => _library._Net_GetBlobChannelPtr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function(Mat)>> get Net_GetBlobSize =>
      _library._Net_GetBlobSizePtr;
  ffi.Pointer<ffi.NativeFunction<Layer Function(Net, ffi.Int)>>
      get Net_GetLayer => _library._Net_GetLayerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Layer)>> get Layer_Close =>
      _library._Layer_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(Layer, ffi.Pointer<ffi.Char>)>>
      get Layer_InputNameToIndex => _library._Layer_InputNameToIndexPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(Layer, ffi.Pointer<ffi.Char>)>>
      get Layer_OutputNameToIndex => _library._Layer_OutputNameToIndexPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Layer)>>
      get Layer_GetName => _library._Layer_GetNamePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(Layer)>>
      get Layer_GetType => _library._Layer_GetTypePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Rects, FloatVector, ffi.Float, ffi.Float,
              ffi.Pointer<IntVector>)>> get NMSBoxes => _library._NMSBoxesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Rects,
              FloatVector,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<IntVector>,
              ffi.Float,
              ffi.Int)>> get NMSBoxesWithParams =>
      _library._NMSBoxesWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<AKAZE Function()>> get AKAZE_Create =>
      _library._AKAZE_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AKAZE)>> get AKAZE_Close =>
      _library._AKAZE_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(AKAZE, Mat)>>
      get AKAZE_Detect => _library._AKAZE_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(AKAZE, Mat, Mat, Mat)>>
      get AKAZE_DetectAndCompute => _library._AKAZE_DetectAndComputePtr;
  ffi.Pointer<ffi.NativeFunction<AgastFeatureDetector Function()>>
      get AgastFeatureDetector_Create =>
          _library._AgastFeatureDetector_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AgastFeatureDetector)>>
      get AgastFeatureDetector_Close => _library._AgastFeatureDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(AgastFeatureDetector, Mat)>>
      get AgastFeatureDetector_Detect =>
          _library._AgastFeatureDetector_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<BRISK Function()>> get BRISK_Create =>
      _library._BRISK_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BRISK)>> get BRISK_Close =>
      _library._BRISK_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(BRISK, Mat)>>
      get BRISK_Detect => _library._BRISK_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(BRISK, Mat, Mat, Mat)>>
      get BRISK_DetectAndCompute => _library._BRISK_DetectAndComputePtr;
  ffi.Pointer<ffi.NativeFunction<FastFeatureDetector Function()>>
      get FastFeatureDetector_Create => _library._FastFeatureDetector_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              FastFeatureDetector Function(ffi.Int, ffi.Bool, ffi.Int)>>
      get FastFeatureDetector_CreateWithParams =>
          _library._FastFeatureDetector_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FastFeatureDetector)>>
      get FastFeatureDetector_Close => _library._FastFeatureDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(FastFeatureDetector, Mat)>>
      get FastFeatureDetector_Detect => _library._FastFeatureDetector_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<GFTTDetector Function()>>
      get GFTTDetector_Create => _library._GFTTDetector_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(GFTTDetector)>>
      get GFTTDetector_Close => _library._GFTTDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(GFTTDetector, Mat)>>
      get GFTTDetector_Detect => _library._GFTTDetector_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KAZE Function()>> get KAZE_Create =>
      _library._KAZE_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KAZE)>> get KAZE_Close =>
      _library._KAZE_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(KAZE, Mat)>>
      get KAZE_Detect => _library._KAZE_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(KAZE, Mat, Mat, Mat)>>
      get KAZE_DetectAndCompute => _library._KAZE_DetectAndComputePtr;
  ffi.Pointer<ffi.NativeFunction<MSER Function()>> get MSER_Create =>
      _library._MSER_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MSER)>> get MSER_Close =>
      _library._MSER_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(MSER, Mat)>>
      get MSER_Detect => _library._MSER_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<ORB Function()>> get ORB_Create =>
      _library._ORB_CreatePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ORB Function(
              ffi.Int,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>> get ORB_CreateWithParams =>
      _library._ORB_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ORB)>> get ORB_Close =>
      _library._ORB_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(ORB, Mat)>>
      get ORB_Detect => _library._ORB_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(ORB, Mat, Mat, Mat)>>
      get ORB_DetectAndCompute => _library._ORB_DetectAndComputePtr;
  ffi.Pointer<ffi.NativeFunction<SimpleBlobDetector Function()>>
      get SimpleBlobDetector_Create => _library._SimpleBlobDetector_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              SimpleBlobDetector Function(SimpleBlobDetectorParams)>>
      get SimpleBlobDetector_Create_WithParams =>
          _library._SimpleBlobDetector_Create_WithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SimpleBlobDetector)>>
      get SimpleBlobDetector_Close => _library._SimpleBlobDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(SimpleBlobDetector, Mat)>>
      get SimpleBlobDetector_Detect => _library._SimpleBlobDetector_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<SimpleBlobDetectorParams Function()>>
      get SimpleBlobDetectorParams_Create =>
          _library._SimpleBlobDetectorParams_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<BFMatcher Function()>> get BFMatcher_Create =>
      _library._BFMatcher_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<BFMatcher Function(ffi.Int, ffi.Bool)>>
      get BFMatcher_CreateWithParams => _library._BFMatcher_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BFMatcher)>>
      get BFMatcher_Close => _library._BFMatcher_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<DMatches Function(BFMatcher, Mat, Mat)>>
      get BFMatcher_Match => _library._BFMatcher_MatchPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<MultiDMatches Function(BFMatcher, Mat, Mat, ffi.Int)>>
      get BFMatcher_KnnMatch => _library._BFMatcher_KnnMatchPtr;
  ffi.Pointer<ffi.NativeFunction<FlannBasedMatcher Function()>>
      get FlannBasedMatcher_Create => _library._FlannBasedMatcher_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(FlannBasedMatcher)>>
      get FlannBasedMatcher_Close => _library._FlannBasedMatcher_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              MultiDMatches Function(FlannBasedMatcher, Mat, Mat, ffi.Int)>>
      get FlannBasedMatcher_KnnMatch => _library._FlannBasedMatcher_KnnMatchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, KeyPoints, Mat, Scalar, ffi.Int)>>
      get DrawKeyPoints => _library._DrawKeyPointsPtr;
  ffi.Pointer<ffi.NativeFunction<SIFT Function()>> get SIFT_Create =>
      _library._SIFT_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(SIFT)>> get SIFT_Close =>
      _library._SIFT_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(SIFT, Mat)>>
      get SIFT_Detect => _library._SIFT_DetectPtr;
  ffi.Pointer<ffi.NativeFunction<KeyPoints Function(SIFT, Mat, Mat, Mat)>>
      get SIFT_DetectAndCompute => _library._SIFT_DetectAndComputePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              KeyPoints,
              Mat,
              KeyPoints,
              DMatches,
              Mat,
              Scalar,
              Scalar,
              ByteArray,
              ffi.Int)>> get DrawMatches => _library._DrawMatchesPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Window_New => _library._Window_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get Window_Close => _library._Window_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, Mat)>>
      get Window_IMShow => _library._Window_IMShowPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Window_GetProperty => _library._Window_GetPropertyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double)>>
      get Window_SetProperty => _library._Window_SetPropertyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get Window_SetTitle => _library._Window_SetTitlePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get Window_WaitKey => _library._Window_WaitKeyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>
      get Window_Move => _library._Window_MovePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>
      get Window_Resize => _library._Window_ResizePtr;
  ffi.Pointer<ffi.NativeFunction<Rect Function(ffi.Pointer<ffi.Char>, Mat)>>
      get Window_SelectROI => _library._Window_SelectROIPtr;
  ffi.Pointer<ffi.NativeFunction<Rects Function(ffi.Pointer<ffi.Char>, Mat)>>
      get Window_SelectROIs => _library._Window_SelectROIsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Trackbar_Create => _library._Trackbar_CreatePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>> get Trackbar_CreateWithValue =>
      _library._Trackbar_CreateWithValuePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get Trackbar_GetPos => _library._Trackbar_GetPosPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Trackbar_SetPos => _library._Trackbar_SetPosPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Trackbar_SetMin => _library._Trackbar_SetMinPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Trackbar_SetMax => _library._Trackbar_SetMaxPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Pointer<ffi.Char>, ffi.Int)>>
      get Image_IMRead => _library._Image_IMReadPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, Mat)>>
      get Image_IMWrite => _library._Image_IMWritePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ffi.Char>, Mat, IntVector)>>
      get Image_IMWrite_WithParams => _library._Image_IMWrite_WithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Char>, Mat, ffi.Pointer<ffi.Void>)>>
      get Image_IMEncode => _library._Image_IMEncodePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, Mat, IntVector,
              ffi.Pointer<ffi.Void>)>> get Image_IMEncode_WithParams =>
      _library._Image_IMEncode_WithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(UCharVector, ffi.Int)>>
      get Image_IMDecode => _library._Image_IMDecodePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(UCharVector, ffi.Int, Mat)>>
      get Image_IMDecodeIntoMat => _library._Image_IMDecodeIntoMatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(PointVector, ffi.Bool)>>
      get ArcLength => _library._ArcLengthPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              PointVector Function(PointVector, ffi.Double, ffi.Bool)>>
      get ApproxPolyDP => _library._ApproxPolyDPPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get CvtColor => _library._CvtColorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get EqualizeHist => _library._EqualizeHistPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mats, IntVector, Mat, Mat, IntVector, FloatVector, ffi.Bool)>>
      get CalcHist => _library._CalcHistPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mats, IntVector, Mat, Mat, FloatVector, ffi.Bool)>>
      get CalcBackProject => _library._CalcBackProjectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(Mat, Mat, ffi.Int)>>
      get CompareHist => _library._CompareHistPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(PointVector, Mat, ffi.Bool, ffi.Bool)>>
      get ConvexHull => _library._ConvexHullPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(PointVector, Mat, Mat)>>
      get ConvexityDefects => _library._ConvexityDefectsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>
      get BilateralFilter => _library._BilateralFilterPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size)>> get Blur =>
      _library._BlurPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Size)>>
      get BoxFilter => _library._BoxFilterPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Size)>>
      get SqBoxFilter => _library._SqBoxFilterPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Dilate => _library._DilatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>>
      get DilateWithParams => _library._DilateWithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get DistanceTransform => _library._DistanceTransformPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>> get Erode =>
      _library._ErodePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Mat, Point, ffi.Int, ffi.Int, Scalar)>>
      get ErodeWithParams => _library._ErodeWithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, Mat)>>
      get MatchTemplate => _library._MatchTemplatePtr;
  ffi.Pointer<ffi.NativeFunction<Moment Function(Mat, ffi.Bool)>> get Moments =>
      _library._MomentsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size, ffi.Int)>>
      get PyrDown => _library._PyrDownPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Size, ffi.Int)>>
      get PyrUp => _library._PyrUpPtr;
  ffi.Pointer<ffi.NativeFunction<Rect Function(PointVector)>>
      get BoundingRect => _library._BoundingRectPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(RotatedRect, Mat)>>
      get BoxPoints => _library._BoxPointsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(PointVector)>>
      get ContourArea => _library._ContourAreaPtr;
  ffi.Pointer<ffi.NativeFunction<RotatedRect Function(PointVector)>>
      get MinAreaRect => _library._MinAreaRectPtr;
  ffi.Pointer<ffi.NativeFunction<RotatedRect Function(PointVector)>>
      get FitEllipse => _library._FitEllipsePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  PointVector, ffi.Pointer<Point2f>, ffi.Pointer<ffi.Float>)>>
      get MinEnclosingCircle => _library._MinEnclosingCirclePtr;
  ffi.Pointer<
          ffi.NativeFunction<PointsVector Function(Mat, Mat, ffi.Int, ffi.Int)>>
      get FindContours => _library._FindContoursPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Double Function(PointVector, Point2f, ffi.Bool)>>
      get PointPolygonTest => _library._PointPolygonTestPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get ConnectedComponents => _library._ConnectedComponentsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, ffi.Int)>>
      get ConnectedComponentsWithStats =>
          _library._ConnectedComponentsWithStatsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>>
      get GaussianBlur => _library._GaussianBlurPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, ffi.Double, ffi.Int)>>
      get GetGaussianKernel => _library._GetGaussianKernelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Int, ffi.Int, ffi.Double, ffi.Double, ffi.Int)>>
      get Laplacian => _library._LaplacianPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Mat, ffi.Int, ffi.Int, ffi.Int, ffi.Double,
              ffi.Double, ffi.Int)>> get Scharr => _library._ScharrPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(ffi.Int, Size)>>
      get GetStructuringElement => _library._GetStructuringElementPtr;
  ffi.Pointer<ffi.NativeFunction<Scalar Function()>>
      get MorphologyDefaultBorderValue =>
          _library._MorphologyDefaultBorderValuePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int, Mat)>>
      get MorphologyEx => _library._MorphologyExPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Int, Mat, Point, ffi.Int, ffi.Int)>>
      get MorphologyExWithParams => _library._MorphologyExWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get MedianBlur => _library._MedianBlurPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double)>>
      get Canny => _library._CannyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Size, Size, TermCriteria)>>
      get CornerSubPix => _library._CornerSubPixPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>
      get GoodFeaturesToTrack => _library._GoodFeaturesToTrackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Rect, Mat, Mat, ffi.Int, ffi.Int)>>
      get GrabCut => _library._GrabCutPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Double, ffi.Double)>>
      get HoughCircles => _library._HoughCirclesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Int)>> get HoughCirclesWithParams =>
      _library._HoughCirclesWithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>
      get HoughLines => _library._HoughLinesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>
      get HoughLinesP => _library._HoughLinesPPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Double,
              ffi.Double,
              ffi.Int,
              ffi.Double,
              ffi.Double)>> get HoughLinesPWithParams =>
      _library._HoughLinesPWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> get HoughLinesPointSet =>
      _library._HoughLinesPointSetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Integral => _library._IntegralPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(Mat, Mat, ffi.Double, ffi.Double, ffi.Int)>>
      get Threshold => _library._ThresholdPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Double, ffi.Int, ffi.Int, ffi.Int, ffi.Double)>>
      get AdaptiveThreshold => _library._AdaptiveThresholdPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Point, Point, Scalar, ffi.Int)>>
      get ArrowedLine => _library._ArrowedLinePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Point, ffi.Int, Scalar, ffi.Int)>>
      get Circle => _library._CirclePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Point, ffi.Int, Scalar, ffi.Int, ffi.Int, ffi.Int)>>
      get CircleWithParams => _library._CircleWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Point,
              Point,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int)>> get Ellipse => _library._EllipsePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Point,
              Point,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Int)>> get EllipseWithParams =>
      _library._EllipseWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(Mat, Point, Point, Scalar, ffi.Int)>> get Line =>
      _library._LinePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Rect, Scalar, ffi.Int)>>
      get Rectangle => _library._RectanglePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Rect, Scalar, ffi.Int, ffi.Int, ffi.Int)>>
      get RectangleWithParams => _library._RectangleWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, PointsVector, Scalar)>>
      get FillPoly => _library._FillPolyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, PointsVector, Scalar, ffi.Int, ffi.Int, Point)>>
      get FillPolyWithParams => _library._FillPolyWithParamsPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, PointsVector, ffi.Bool, Scalar, ffi.Int)>>
      get Polylines => _library._PolylinesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Size Function(
                  ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double, ffi.Int)>>
      get GetTextSize => _library._GetTextSizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Size Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>)>> get GetTextSizeWithBaseline =>
      _library._GetTextSizeWithBaselinePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              Point,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int)>> get PutText => _library._PutTextPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              ffi.Pointer<ffi.Char>,
              Point,
              ffi.Int,
              ffi.Double,
              Scalar,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>> get PutTextWithParams =>
      _library._PutTextWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat, Mat, Size, ffi.Double, ffi.Double, ffi.Int)>> get Resize =>
      _library._ResizePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Size, Point2f, Mat)>>
      get GetRectSubPix => _library._GetRectSubPixPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Point2f, ffi.Double, ffi.Double)>>
      get GetRotationMatrix2D => _library._GetRotationMatrix2DPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Size)>>
      get WarpAffine => _library._WarpAffinePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>>
      get WarpAffineWithParams => _library._WarpAffineWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Size)>>
      get WarpPerspective => _library._WarpPerspectivePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, Size, ffi.Int, ffi.Int, Scalar)>>
      get WarpPerspectiveWithParams => _library._WarpPerspectiveWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>> get Watershed =>
      _library._WatershedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Int)>>
      get ApplyColorMap => _library._ApplyColorMapPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get ApplyCustomColorMap => _library._ApplyCustomColorMapPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(PointVector, PointVector)>>
      get GetPerspectiveTransform => _library._GetPerspectiveTransformPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>
      get GetPerspectiveTransform2f => _library._GetPerspectiveTransform2fPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(PointVector, PointVector)>>
      get GetAffineTransform => _library._GetAffineTransformPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(Point2fVector, Point2fVector)>>
      get GetAffineTransform2f => _library._GetAffineTransform2fPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Mat Function(
                  Mat, Mat, ffi.Int, ffi.Double, Mat, ffi.Int, ffi.Double)>>
      get FindHomography => _library._FindHomographyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, PointsVector, ffi.Int, Scalar, ffi.Int)>>
      get DrawContours => _library._DrawContoursPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              PointsVector,
              ffi.Int,
              Scalar,
              ffi.Int,
              ffi.Int,
              Mat,
              ffi.Int,
              Point)>> get DrawContoursWithParams =>
      _library._DrawContoursWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Double,
              ffi.Int)>> get Sobel => _library._SobelPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Int, ffi.Int)>>
      get SpatialGradient => _library._SpatialGradientPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Int, ffi.Int, Scalar)>>
      get Remap => _library._RemapPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Int, Mat, Point, ffi.Double, ffi.Int)>>
      get Filter2D => _library._Filter2DPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Int, Mat, Mat, Point, ffi.Double, ffi.Int)>>
      get SepFilter2D => _library._SepFilter2DPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>>
      get LogPolar => _library._LogPolarPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(PointVector, Mat, ffi.Int, ffi.Double, ffi.Double,
              ffi.Double)>> get FitLine => _library._FitLinePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Point2f, ffi.Double, ffi.Int)>>
      get LinearPolar => _library._LinearPolarPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(
                  PointVector, PointVector, ffi.Int, ffi.Double)>>
      get MatchShapes => _library._MatchShapesPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Size, Point, Point)>>
      get ClipLine => _library._ClipLinePtr;
  ffi.Pointer<ffi.NativeFunction<CLAHE Function()>> get CLAHE_Create =>
      _library._CLAHE_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<CLAHE Function(ffi.Double, Size)>>
      get CLAHE_CreateWithParams => _library._CLAHE_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHE)>> get CLAHE_Close =>
      _library._CLAHE_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CLAHE, Mat, Mat)>>
      get CLAHE_Apply => _library._CLAHE_ApplyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get InvertAffineTransform => _library._InvertAffineTransformPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              Point2f Function(Mat, Mat, Mat, ffi.Pointer<ffi.Double>)>>
      get PhaseCorrelate => _library._PhaseCorrelatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get Mat_Accumulate => _library._Mat_AccumulatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_AccumulateWithMask => _library._Mat_AccumulateWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get Mat_AccumulateSquare => _library._Mat_AccumulateSquarePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_AccumulateSquareWithMask =>
          _library._Mat_AccumulateSquareWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat)>>
      get Mat_AccumulateProduct => _library._Mat_AccumulateProductPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat)>>
      get Mat_AccumulateProductWithMask =>
          _library._Mat_AccumulateProductWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double)>>
      get Mat_AccumulatedWeighted => _library._Mat_AccumulatedWeightedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Double, Mat)>>
      get Mat_AccumulatedWeightedWithMask =>
          _library._Mat_AccumulatedWeightedWithMaskPtr;
  ffi.Pointer<ffi.NativeFunction<CascadeClassifier Function()>>
      get CascadeClassifier_New => _library._CascadeClassifier_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CascadeClassifier)>>
      get CascadeClassifier_Close => _library._CascadeClassifier_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(CascadeClassifier, ffi.Pointer<ffi.Char>)>>
      get CascadeClassifier_Load => _library._CascadeClassifier_LoadPtr;
  ffi.Pointer<ffi.NativeFunction<Rects Function(CascadeClassifier, Mat)>>
      get CascadeClassifier_DetectMultiScale =>
          _library._CascadeClassifier_DetectMultiScalePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Rects Function(
              CascadeClassifier,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              Size,
              Size)>> get CascadeClassifier_DetectMultiScaleWithParams =>
      _library._CascadeClassifier_DetectMultiScaleWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<HOGDescriptor Function()>>
      get HOGDescriptor_New => _library._HOGDescriptor_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptor)>>
      get HOGDescriptor_Close => _library._HOGDescriptor_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(HOGDescriptor, ffi.Pointer<ffi.Char>)>>
      get HOGDescriptor_Load => _library._HOGDescriptor_LoadPtr;
  ffi.Pointer<ffi.NativeFunction<Rects Function(HOGDescriptor, Mat)>>
      get HOGDescriptor_DetectMultiScale =>
          _library._HOGDescriptor_DetectMultiScalePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          Rects Function(
              HOGDescriptor,
              Mat,
              ffi.Double,
              Size,
              Size,
              ffi.Double,
              ffi.Double,
              ffi.Bool)>> get HOGDescriptor_DetectMultiScaleWithParams =>
      _library._HOGDescriptor_DetectMultiScaleWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function()>>
      get HOG_GetDefaultPeopleDetector =>
          _library._HOG_GetDefaultPeopleDetectorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(HOGDescriptor, Mat)>>
      get HOGDescriptor_SetSVMDetector =>
          _library._HOGDescriptor_SetSVMDetectorPtr;
  ffi.Pointer<ffi.NativeFunction<Rects Function(Rects, ffi.Int, ffi.Double)>>
      get GroupRectangles => _library._GroupRectanglesPtr;
  ffi.Pointer<ffi.NativeFunction<QRCodeDetector Function()>>
      get QRCodeDetector_New => _library._QRCodeDetector_NewPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(QRCodeDetector, Mat, Mat, Mat)>>
      get QRCodeDetector_DetectAndDecode =>
          _library._QRCodeDetector_DetectAndDecodePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(QRCodeDetector, Mat, Mat)>>
      get QRCodeDetector_Detect => _library._QRCodeDetector_DetectPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(QRCodeDetector, Mat, Mat, Mat)>>
      get QRCodeDetector_Decode => _library._QRCodeDetector_DecodePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(QRCodeDetector)>>
      get QRCodeDetector_Close => _library._QRCodeDetector_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(QRCodeDetector, Mat, Mat)>>
      get QRCodeDetector_DetectMulti => _library._QRCodeDetector_DetectMultiPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(QRCodeDetector, Mat, ffi.Pointer<CStrings>, Mat,
              ffi.Pointer<Mats>)>> get QRCodeDetector_DetectAndDecodeMulti =>
      _library._QRCodeDetector_DetectAndDecodeMultiPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>>
      get ColorChange => _library._ColorChangePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, Point, Mat, ffi.Int)>>
      get SeamlessClone => _library._SeamlessClonePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, ffi.Float, ffi.Float)>>
      get IlluminationChange => _library._IlluminationChangePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Int)>>
      get TextureFlattening => _library._TextureFlatteningPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mats, Mat, ffi.Int, ffi.Int)>>
      get FastNlMeansDenoisingColoredMulti =>
          _library._FastNlMeansDenoisingColoredMultiPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mats,
              Mat,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ffi.Float,
              ffi.Int,
              ffi.Int)>> get FastNlMeansDenoisingColoredMultiWithParams =>
      _library._FastNlMeansDenoisingColoredMultiWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get FastNlMeansDenoising => _library._FastNlMeansDenoisingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Float, ffi.Int, ffi.Int)>>
      get FastNlMeansDenoisingWithParams =>
          _library._FastNlMeansDenoisingWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Mat, Mat)>>
      get FastNlMeansDenoisingColored =>
          _library._FastNlMeansDenoisingColoredPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>
      get FastNlMeansDenoisingColoredWithParams =>
          _library._FastNlMeansDenoisingColoredWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<MergeMertens Function()>>
      get MergeMertens_Create => _library._MergeMertens_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              MergeMertens Function(ffi.Float, ffi.Float, ffi.Float)>>
      get MergeMertens_CreateWithParams =>
          _library._MergeMertens_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MergeMertens, Mats, Mat)>>
      get MergeMertens_Process => _library._MergeMertens_ProcessPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(MergeMertens)>>
      get MergeMertens_Close => _library._MergeMertens_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<AlignMTB Function()>> get AlignMTB_Create =>
      _library._AlignMTB_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<AlignMTB Function(ffi.Int, ffi.Int, ffi.Bool)>>
      get AlignMTB_CreateWithParams => _library._AlignMTB_CreateWithParamsPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(AlignMTB, Mats, ffi.Pointer<Mats>)>>
      get AlignMTB_Process => _library._AlignMTB_ProcessPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(AlignMTB)>>
      get AlignMTB_Close => _library._AlignMTB_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Float, ffi.Float)>>
      get DetailEnhance => _library._DetailEnhancePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(Mat, Mat, ffi.Int, ffi.Float, ffi.Float)>>
      get EdgePreservingFilter => _library._EdgePreservingFilterPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  Mat, Mat, Mat, ffi.Float, ffi.Float, ffi.Float)>>
      get PencilSketch => _library._PencilSketchPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, ffi.Float, ffi.Float)>>
      get Stylization => _library._StylizationPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(Mat, Mat, Mat, ffi.Float, ffi.Int)>>
      get PhotoInpaint => _library._PhotoInpaintPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, ffi.Int)>>
      get SVD_Compute => _library._SVD_ComputePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>
      get openCVVersion => _library._openCVVersionPtr;
  ffi.Pointer<ffi.NativeFunction<BackgroundSubtractorMOG2 Function()>>
      get BackgroundSubtractorMOG2_Create =>
          _library._BackgroundSubtractorMOG2_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              BackgroundSubtractorMOG2 Function(ffi.Int, ffi.Double, ffi.Bool)>>
      get BackgroundSubtractorMOG2_CreateWithParams =>
          _library._BackgroundSubtractorMOG2_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorMOG2)>>
      get BackgroundSubtractorMOG2_Close =>
          _library._BackgroundSubtractorMOG2_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(BackgroundSubtractorMOG2, Mat, Mat)>>
      get BackgroundSubtractorMOG2_Apply =>
          _library._BackgroundSubtractorMOG2_ApplyPtr;
  ffi.Pointer<ffi.NativeFunction<BackgroundSubtractorKNN Function()>>
      get BackgroundSubtractorKNN_Create =>
          _library._BackgroundSubtractorKNN_CreatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              BackgroundSubtractorKNN Function(ffi.Int, ffi.Double, ffi.Bool)>>
      get BackgroundSubtractorKNN_CreateWithParams =>
          _library._BackgroundSubtractorKNN_CreateWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(BackgroundSubtractorKNN)>>
      get BackgroundSubtractorKNN_Close =>
          _library._BackgroundSubtractorKNN_ClosePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(BackgroundSubtractorKNN, Mat, Mat)>>
      get BackgroundSubtractorKNN_Apply =>
          _library._BackgroundSubtractorKNN_ApplyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(Mat, Mat, Mat, Mat, Mat, Mat)>>
      get CalcOpticalFlowPyrLK => _library._CalcOpticalFlowPyrLKPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              Mat,
              Mat,
              Mat,
              Mat,
              Size,
              ffi.Int,
              TermCriteria,
              ffi.Int,
              ffi.Double)>> get CalcOpticalFlowPyrLKWithParams =>
      _library._CalcOpticalFlowPyrLKWithParamsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              Mat,
              Mat,
              Mat,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Int)>> get CalcOpticalFlowFarneback =>
      _library._CalcOpticalFlowFarnebackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(
                  Mat, Mat, Mat, ffi.Int, TermCriteria, Mat, ffi.Int)>>
      get FindTransformECC => _library._FindTransformECCPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(Tracker, Mat, Rect)>>
      get Tracker_Init => _library._Tracker_InitPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Bool Function(Tracker, Mat, ffi.Pointer<Rect>)>>
      get Tracker_Update => _library._Tracker_UpdatePtr;
  ffi.Pointer<ffi.NativeFunction<TrackerMIL Function()>>
      get TrackerMIL_Create => _library._TrackerMIL_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(TrackerMIL)>>
      get TrackerMIL_Close => _library._TrackerMIL_ClosePtr;
  ffi.Pointer<ffi.NativeFunction<KalmanFilter Function(ffi.Int, ffi.Int)>>
      get KalmanFilter_New => _library._KalmanFilter_NewPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              KalmanFilter Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>
      get KalmanFilter_NewWithParams => _library._KalmanFilter_NewWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter)>>
      get KalmanFilter_Close => _library._KalmanFilter_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(KalmanFilter, ffi.Int, ffi.Int)>>
      get KalmanFilter_Init => _library._KalmanFilter_InitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  KalmanFilter, ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>
      get KalmanFilter_InitWithParams =>
          _library._KalmanFilter_InitWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_Predict => _library._KalmanFilter_PredictPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter, Mat)>>
      get KalmanFilter_PredictWithParams =>
          _library._KalmanFilter_PredictWithParamsPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter, Mat)>>
      get KalmanFilter_Correct => _library._KalmanFilter_CorrectPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetStatePre => _library._KalmanFilter_GetStatePrePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetStatePost => _library._KalmanFilter_GetStatePostPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTransitionMatrix =>
          _library._KalmanFilter_GetTransitionMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetControlMatrix =>
          _library._KalmanFilter_GetControlMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetMeasurementMatrix =>
          _library._KalmanFilter_GetMeasurementMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetProcessNoiseCov =>
          _library._KalmanFilter_GetProcessNoiseCovPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetMeasurementNoiseCov =>
          _library._KalmanFilter_GetMeasurementNoiseCovPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetErrorCovPre =>
          _library._KalmanFilter_GetErrorCovPrePtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetGain => _library._KalmanFilter_GetGainPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetErrorCovPost =>
          _library._KalmanFilter_GetErrorCovPostPtr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTemp1 => _library._KalmanFilter_GetTemp1Ptr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTemp2 => _library._KalmanFilter_GetTemp2Ptr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTemp3 => _library._KalmanFilter_GetTemp3Ptr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTemp4 => _library._KalmanFilter_GetTemp4Ptr;
  ffi.Pointer<ffi.NativeFunction<Mat Function(KalmanFilter)>>
      get KalmanFilter_GetTemp5 => _library._KalmanFilter_GetTemp5Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetStatePre => _library._KalmanFilter_SetStatePrePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetStatePost => _library._KalmanFilter_SetStatePostPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetTransitionMatrix =>
          _library._KalmanFilter_SetTransitionMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetControlMatrix =>
          _library._KalmanFilter_SetControlMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetMeasurementMatrix =>
          _library._KalmanFilter_SetMeasurementMatrixPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetProcessNoiseCov =>
          _library._KalmanFilter_SetProcessNoiseCovPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetMeasurementNoiseCov =>
          _library._KalmanFilter_SetMeasurementNoiseCovPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetErrorCovPre =>
          _library._KalmanFilter_SetErrorCovPrePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetGain => _library._KalmanFilter_SetGainPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(KalmanFilter, Mat)>>
      get KalmanFilter_SetErrorCovPost =>
          _library._KalmanFilter_SetErrorCovPostPtr;
  ffi.Pointer<ffi.NativeFunction<VideoCapture Function()>>
      get VideoCapture_New => _library._VideoCapture_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoCapture)>>
      get VideoCapture_Close => _library._VideoCapture_ClosePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(VideoCapture, ffi.Pointer<ffi.Char>)>>
      get VideoCapture_Open => _library._VideoCapture_OpenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(VideoCapture, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get VideoCapture_OpenWithAPI => _library._VideoCapture_OpenWithAPIPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(VideoCapture, ffi.Int)>>
      get VideoCapture_OpenDevice => _library._VideoCapture_OpenDevicePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(VideoCapture, ffi.Int, ffi.Int)>>
      get VideoCapture_OpenDeviceWithAPI =>
          _library._VideoCapture_OpenDeviceWithAPIPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(VideoCapture, ffi.Int, ffi.Double)>>
      get VideoCapture_Set => _library._VideoCapture_SetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(VideoCapture, ffi.Int)>>
      get VideoCapture_Get => _library._VideoCapture_GetPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(VideoCapture)>>
      get VideoCapture_IsOpened => _library._VideoCapture_IsOpenedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(VideoCapture, Mat)>>
      get VideoCapture_Read => _library._VideoCapture_ReadPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoCapture, ffi.Int)>>
      get VideoCapture_Grab => _library._VideoCapture_GrabPtr;
  ffi.Pointer<ffi.NativeFunction<VideoWriter Function()>> get VideoWriter_New =>
      _library._VideoWriter_NewPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoWriter)>>
      get VideoWriter_Close => _library._VideoWriter_ClosePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              VideoWriter,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Bool)>> get VideoWriter_Open => _library._VideoWriter_OpenPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(VideoWriter)>>
      get VideoWriter_IsOpened => _library._VideoWriter_IsOpenedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(VideoWriter, Mat)>>
      get VideoWriter_Write => _library._VideoWriter_WritePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Char, ffi.Char, ffi.Char, ffi.Char)>>
      get VideoWriter_Fourcc => _library._VideoWriter_FourccPtr;
}

typedef ArucoDetectorParameters = ffi.Pointer<ffi.Void>;
typedef ArucoDictionary = ffi.Pointer<ffi.Void>;
typedef ArucoDetector = ffi.Pointer<ffi.Void>;
typedef Mat = ffi.Pointer<ffi.Void>;
typedef Points2fVector = ffi.Pointer<ffi.Void>;

/// Wrapper for std::vector<int>
final class IntVector extends ffi.Struct {
  external ffi.Pointer<ffi.Int> val;

  @ffi.Int()
  external int length;
}

/// Wrapper for an individual cv::cvScalar
final class Scalar extends ffi.Struct {
  @ffi.Double()
  external double val1;

  @ffi.Double()
  external double val2;

  @ffi.Double()
  external double val3;

  @ffi.Double()
  external double val4;
}

typedef AsyncArray = ffi.Pointer<ffi.Void>;
typedef Net = ffi.Pointer<ffi.Void>;

/// Wrapper for an individual cv::cvSize
final class Size extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

/// Wrapper for an individual cv::cvRect
final class Rect extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

typedef Points3fVector = ffi.Pointer<ffi.Void>;
typedef Point2fVector = ffi.Pointer<ffi.Void>;

/// Wrapper for std::vector<string>
final class CStrings extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> strs;

  @ffi.Int()
  external int length;
}

final class ByteArray extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @ffi.Int()
  external int length;
}

/// Wrapper for std::vector<float>
final class FloatVector extends ffi.Struct {
  external ffi.Pointer<ffi.Float> val;

  @ffi.Int()
  external int length;
}

final class RawData extends ffi.Struct {
  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  external ByteArray data;
}

/// Wrapper for an individual cv::Point2f
final class Point2f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

final class Point3f extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;
}

/// Wrapper for an individual cv::cvPoint
final class Point extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;
}

/// Wrapper for the vector of Point structs aka std::vector<Point>
final class Points extends ffi.Struct {
  external ffi.Pointer<Point> points;

  @ffi.Int()
  external int length;
}

/// Wrapper for the vector of Point2f structs aka std::vector<Point2f>
final class Points2f extends ffi.Struct {
  external ffi.Pointer<Point2f> points;

  @ffi.Int()
  external int length;
}

final class Points3f extends ffi.Struct {
  external ffi.Pointer<Point3f> points;

  @ffi.Int()
  external int length;
}

final class Contours2f extends ffi.Struct {
  external ffi.Pointer<Contour2f> contours;

  @ffi.Int()
  external int length;
}

/// Contour2f is alias for Points2f
typedef Contour2f = Points2f;

/// Wrapper for the vector of Points3f vectors aka std::vector< std::vector<Point3f> >
final class Contours3f extends ffi.Struct {
  external ffi.Pointer<Contour3f> contours;

  @ffi.Int()
  external int length;
}

/// Contour3f is alias for Points3f
typedef Contour3f = Points3f;

/// Wrapper for the vector of Points vectors aka std::vector< std::vector<Point> >
final class Contours extends ffi.Struct {
  external ffi.Pointer<Contour> contours;

  @ffi.Int()
  external int length;
}

/// Contour is alias for Points
typedef Contour = Points;

/// Wrapper for the vector of Rect struct aka std::vector<Rect>
final class Rects extends ffi.Struct {
  external ffi.Pointer<Rect> rects;

  @ffi.Int()
  external int length;
}

/// Wrapper for an individual cv::RotatedRect
final class RotatedRect extends ffi.Struct {
  external Points pts;

  external Rect boundingRect;

  external Point center;

  external Size size;

  @ffi.Double()
  external double angle;
}

/// Wrapper for a individual cv::KeyPoint
final class KeyPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double size;

  @ffi.Double()
  external double angle;

  @ffi.Double()
  external double response;

  @ffi.Int()
  external int octave;

  @ffi.Int()
  external int classID;
}

/// Wrapper for the vector of KeyPoint struct aka std::vector<KeyPoint>
final class KeyPoints extends ffi.Struct {
  external ffi.Pointer<KeyPoint> keypoints;

  @ffi.Int()
  external int length;
}

/// Wrapper for SimpleBlobDetectorParams aka SimpleBlobDetector::Params
final class SimpleBlobDetectorParams extends ffi.Struct {
  @ffi.UnsignedChar()
  external int blobColor;

  @ffi.Bool()
  external bool filterByArea;

  @ffi.Bool()
  external bool filterByCircularity;

  @ffi.Bool()
  external bool filterByColor;

  @ffi.Bool()
  external bool filterByConvexity;

  @ffi.Bool()
  external bool filterByInertia;

  @ffi.Float()
  external double maxArea;

  @ffi.Float()
  external double maxCircularity;

  @ffi.Float()
  external double maxConvexity;

  @ffi.Float()
  external double maxInertiaRatio;

  @ffi.Float()
  external double maxThreshold;

  @ffi.Float()
  external double minArea;

  @ffi.Float()
  external double minCircularity;

  @ffi.Float()
  external double minConvexity;

  @ffi.Float()
  external double minDistBetweenBlobs;

  @ffi.Float()
  external double minInertiaRatio;

  @ffi.Size()
  external int minRepeatability;

  @ffi.Float()
  external double minThreshold;

  @ffi.Float()
  external double thresholdStep;
}

/// Wrapper for an individual cv::DMatch
final class DMatch extends ffi.Struct {
  @ffi.Int()
  external int queryIdx;

  @ffi.Int()
  external int trainIdx;

  @ffi.Int()
  external int imgIdx;

  @ffi.Float()
  external double distance;
}

/// Wrapper for the vector of DMatch struct aka std::vector<DMatch>
final class DMatches extends ffi.Struct {
  external ffi.Pointer<DMatch> dmatches;

  @ffi.Int()
  external int length;
}

/// Wrapper for the vector vector of DMatch struct aka std::vector<std::vector<DMatch>>
final class MultiDMatches extends ffi.Struct {
  external ffi.Pointer<DMatches> dmatches;

  @ffi.Int()
  external int length;
}

/// Wrapper for an individual cv::Moment
final class Moment extends ffi.Struct {
  @ffi.Double()
  external double m00;

  @ffi.Double()
  external double m10;

  @ffi.Double()
  external double m01;

  @ffi.Double()
  external double m20;

  @ffi.Double()
  external double m11;

  @ffi.Double()
  external double m02;

  @ffi.Double()
  external double m30;

  @ffi.Double()
  external double m21;

  @ffi.Double()
  external double m12;

  @ffi.Double()
  external double m03;

  @ffi.Double()
  external double mu20;

  @ffi.Double()
  external double mu11;

  @ffi.Double()
  external double mu02;

  @ffi.Double()
  external double mu30;

  @ffi.Double()
  external double mu21;

  @ffi.Double()
  external double mu12;

  @ffi.Double()
  external double mu03;

  @ffi.Double()
  external double nu20;

  @ffi.Double()
  external double nu11;

  @ffi.Double()
  external double nu02;

  @ffi.Double()
  external double nu30;

  @ffi.Double()
  external double nu21;

  @ffi.Double()
  external double nu12;

  @ffi.Double()
  external double nu03;
}

typedef InputOutputArray = ffi.Pointer<ffi.Void>;

/// Wrapper for the vector of Mat aka std::vector<Mat>
final class Mats extends ffi.Struct {
  external ffi.Pointer<Mat> mats;

  @ffi.Int()
  external int length;
}

typedef TermCriteria = ffi.Pointer<ffi.Void>;
typedef PointVector = ffi.Pointer<ffi.Void>;
typedef PointsVector = ffi.Pointer<ffi.Void>;
typedef RNG = ffi.Pointer<ffi.Void>;
typedef UCharVector = ffi.Pointer<ffi.Void>;
typedef uchar = ffi.UnsignedChar;
typedef Dartuchar = int;
typedef Point3fVector = ffi.Pointer<ffi.Void>;
typedef Layer = ffi.Pointer<ffi.Void>;
typedef AKAZE = ffi.Pointer<ffi.Void>;
typedef AgastFeatureDetector = ffi.Pointer<ffi.Void>;
typedef BRISK = ffi.Pointer<ffi.Void>;
typedef FastFeatureDetector = ffi.Pointer<ffi.Void>;
typedef GFTTDetector = ffi.Pointer<ffi.Void>;
typedef KAZE = ffi.Pointer<ffi.Void>;
typedef MSER = ffi.Pointer<ffi.Void>;
typedef ORB = ffi.Pointer<ffi.Void>;
typedef SimpleBlobDetector = ffi.Pointer<ffi.Void>;
typedef BFMatcher = ffi.Pointer<ffi.Void>;
typedef FlannBasedMatcher = ffi.Pointer<ffi.Void>;
typedef SIFT = ffi.Pointer<ffi.Void>;
typedef CLAHE = ffi.Pointer<ffi.Void>;
typedef CascadeClassifier = ffi.Pointer<ffi.Void>;
typedef HOGDescriptor = ffi.Pointer<ffi.Void>;
typedef QRCodeDetector = ffi.Pointer<ffi.Void>;
typedef MergeMertens = ffi.Pointer<ffi.Void>;
typedef AlignMTB = ffi.Pointer<ffi.Void>;
typedef BackgroundSubtractorMOG2 = ffi.Pointer<ffi.Void>;
typedef BackgroundSubtractorKNN = ffi.Pointer<ffi.Void>;
typedef Tracker = ffi.Pointer<ffi.Void>;
typedef TrackerMIL = ffi.Pointer<ffi.Void>;
typedef KalmanFilter = ffi.Pointer<ffi.Void>;
typedef VideoCapture = ffi.Pointer<ffi.Void>;
typedef VideoWriter = ffi.Pointer<ffi.Void>;
