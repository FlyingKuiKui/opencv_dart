group 'dev.rainyl.opencv_dart'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "de.undercouch:gradle-download-task:5.6.0"
    }
}

apply plugin: "de.undercouch.download"

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'dev.rainyl.opencv_dart'
    }

    // Bumping the plugin compileSdk version requires all clients of this plugin
    // to bump the version in their app.
    compileSdk 33

    // Use the NDK version declared in /android/app/build.gradle file of the Flutter project.
    // Replace it with a version number if this plugin requires a specific NDK version.
    // (e.g. ndkVersion "23.1.7779620")
    ndkVersion android.ndkVersion

    // Invoke the shared CMake build with the Android Gradle Plugin.
    // externalNativeBuild {
    //     cmake {
    //         path "../src/CMakeLists.txt"

    //         // The default CMake version for the Android Gradle Plugin is 3.10.2.
    //         // https://developer.android.com/studio/projects/install-ndk#vanilla_cmake
    //         //
    //         // The Flutter tooling requires that developers have CMake 3.10 or later
    //         // installed. You should not increase this version, as doing so will cause
    //         // the plugin to fail to compile for some customers of the plugin.
    //         // version "3.10.2"
    //     }
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
    }
}

def SOURCE_DIR = project.buildscript.sourceFile.parentFile
def CACHE_DIR = SOURCE_DIR.parentFile
def CVD_VERSION = new File("${project.buildscript.sourceFile.parentFile.parentFile}/binary.version").text
def CVD_LIB_URL_BASE = "https://github.com/rainyl/opencv_dart/releases/download"
def ARCHS = ['x86_64', 'arm64-v8a', 'armeabi-v7a']
def OPENCV_DART_ANDROID_SUPPORT_ARCHS=System.env.OPENCV_DART_ANDROID_SUPPORT_ARCHS ?: null
if(OPENCV_DART_ANDROID_SUPPORT_ARCHS != null){
    println "OPENCV_DART_ANDROID_SUPPORT_ARCHS is defined : $OPENCV_DART_ANDROID_SUPPORT_ARCHS"
    def supportedArchs = OPENCV_DART_ANDROID_SUPPORT_ARCHS.split(",")
    def acceptedArchs = []
    supportedArchs.each { supportArch ->
        if(ARCHS.contains(supportArch)){
            println "Support arch: ${supportArch}"
            acceptedArchs.add(supportArch)
        }else{
            println "Unsupport arch: ${supportArch}"
        }
    }
    println "OPENCV_DART for Android support arch : $acceptedArchs"
    ARCHS = acceptedArchs
}

task downloadLibs(type: Download) {
    println "[opencv_dart] Downloading libraries..."
    def SRC_URLS = ARCHS.collect { ARCH ->
        "${CVD_LIB_URL_BASE}/v${CVD_VERSION}/libopencv_dart-android-${ARCH}.tar.gz"
    }
    src(SRC_URLS)
    dest CACHE_DIR
    overwrite false
}

ARCHS.each { arch ->
    def extractTaskName = "opencv_dart_extract_libs_${arch}"
    task(extractTaskName, type: Copy) {
        def targetDir = new File("${SOURCE_DIR}/src/main/jniLibs/${arch}")
        onlyIf {
            !file("${targetDir}/libopencv_dart.so").exists()
        }
        from tarTree(resources.gzip("${CACHE_DIR}/libopencv_dart-android-${arch}.tar.gz"))
        into targetDir
    }
}

task cleanupExtractLibs(type: Delete) {
    println "Cleaning up opencv_dart libraries..."
    delete "${SOURCE_DIR}/src/main/jniLibs"
}

task extractLibs(dependsOn: [downloadLibs,cleanupExtractLibs]) {
    println "[opencv_dart] Extracting libraries..."
    ARCHS.each { arch ->
        finalizedBy "opencv_dart_extract_libs_${arch}"
    }
    doLast {
      println "[opencv_dart] Extract finished."
    }
}

def OPENCV_DART_DISABLE_AUTO_BUILD = System.env.OPENCV_DART_DISABLE_AUTO_BUILD ?: null
if (OPENCV_DART_DISABLE_AUTO_BUILD != null) {
    println "[opencv_dart] Found OPENCV_DART_DISABLE_AUTO_BUILD, skip auto build"
} else {
    println "[opencv_dart] OPENCV_DART_DISABLE_AUTO_BUILD is not set, running setup"
    preBuild.dependsOn extractLibs
}
