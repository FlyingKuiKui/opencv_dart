group 'dev.rainyl.opencv_dart'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'dev.rainyl.opencv_dart'
    }

    // Bumping the plugin compileSdk version requires all clients of this plugin
    // to bump the version in their app.
    compileSdk 33

    // Use the NDK version declared in /android/app/build.gradle file of the Flutter project.
    // Replace it with a version number if this plugin requires a specific NDK version.
    // (e.g. ndkVersion "23.1.7779620")
    ndkVersion android.ndkVersion

    // Invoke the shared CMake build with the Android Gradle Plugin.
    // externalNativeBuild {
    //     cmake {
    //         path "../src/CMakeLists.txt"

    //         // The default CMake version for the Android Gradle Plugin is 3.10.2.
    //         // https://developer.android.com/studio/projects/install-ndk#vanilla_cmake
    //         //
    //         // The Flutter tooling requires that developers have CMake 3.10 or later
    //         // installed. You should not increase this version, as doing so will cause
    //         // the plugin to fail to compile for some customers of the plugin.
    //         // version "3.10.2"
    //     }
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
    }
}

def setupCmd=['dart', 'run', 'opencv:setup', 'android', '--arch']
def currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
// 'dart' and 'dart.bat' both exists on windwos, the former is a bash script and won't work
// correctly on windows, so use `dart.bat`
if(currentOS.isWindows()){
  setupCmd[0] = "dart.bat"
}

task runOpenCVSetup(type: Exec) {
    // Set working directory to the parent directory of the root directory
    workingDir project.buildscript.sourceFile.parentFile.parentFile
    commandLine setupCmd + ['x86_64']
    doFirst {
        println "Running OpenCV setup for x86_64 in ${workingDir}"
    }
}

task runOpenCVSetupArm64(type: Exec) {
    // Set working directory to the parent directory of the root directory
    workingDir project.buildscript.sourceFile.parentFile.parentFile
    commandLine setupCmd + ['arm64-v8a']
    doFirst {
        println "Running OpenCV setup for arm64-v8a in ${workingDir}"
    }
}

task runOpenCVSetupArmeabi(type: Exec) {
    // Set working directory to the parent directory of the root directory
    workingDir project.buildscript.sourceFile.parentFile.parentFile
    commandLine setupCmd + ['armeabi-v7a']
    doFirst {
        println "Running OpenCV setup for armeabi-v7a in ${workingDir}"
    }
}

def OPENCV_DART_DISABLE_AUTO_BUILD=System.env.OPENCV_DART_DISABLE_AUTO_BUILD ?: null
if (OPENCV_DART_DISABLE_AUTO_BUILD != null) {
    println "Found OPENCV_DART_DISABLE_AUTO_BUILD, skip auto build"
} else {
    println "OPENCV_DART_DISABLE_AUTO_BUILD is not set, running OpenCV setup"
    preBuild.dependsOn runOpenCVSetup, runOpenCVSetupArm64, runOpenCVSetupArmeabi
}
