group 'dev.rainyl.opencv_dart'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "de.undercouch:gradle-download-task:5.6.0"
    }
}

apply plugin: "de.undercouch.download"

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'dev.rainyl.opencv_dart'
    }

    // Bumping the plugin compileSdk version requires all clients of this plugin
    // to bump the version in their app.
    compileSdk 33

    // Use the NDK version declared in /android/app/build.gradle file of the Flutter project.
    // Replace it with a version number if this plugin requires a specific NDK version.
    // (e.g. ndkVersion "23.1.7779620")
    ndkVersion android.ndkVersion

    // Invoke the shared CMake build with the Android Gradle Plugin.
    // externalNativeBuild {
    //     cmake {
    //         path "../src/CMakeLists.txt"

    //         // The default CMake version for the Android Gradle Plugin is 3.10.2.
    //         // https://developer.android.com/studio/projects/install-ndk#vanilla_cmake
    //         //
    //         // The Flutter tooling requires that developers have CMake 3.10 or later
    //         // installed. You should not increase this version, as doing so will cause
    //         // the plugin to fail to compile for some customers of the plugin.
    //         // version "3.10.2"
    //     }
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 19
    }
}

def SOURCE_DIR = project.buildscript.sourceFile.parentFile
def ROOT_DIR = SOURCE_DIR.parentFile
def CACHE_DIR = new File("${ROOT_DIR}/.dart_tool/.cache")
def CVD_VERSION = new File("${ROOT_DIR}/binary.version").text
def CVD_LIB_URL_BASE = "https://github.com/rainyl/opencv_dart/releases/download"
def ABI_ALL = ['x86_64', 'arm64-v8a', 'armeabi-v7a']
def ABI_ACCEPTED = ['x86_64', 'arm64-v8a', 'armeabi-v7a']

def OPENCV_DART_ANDROID_ENABLED_ABI = System.env.OPENCV_DART_ANDROID_ENABLED_ABI ?: null
if(OPENCV_DART_ANDROID_ENABLED_ABI != null){
    println "[opencv_dart] detected OPENCV_DART_ANDROID_ENABLED_ABI: $OPENCV_DART_ANDROID_ENABLED_ABI"
    def enabledABI = OPENCV_DART_ANDROID_ENABLED_ABI.split(",")
    def acceptedABI = []
    enabledABI.each { abi ->
        if(ABI_ALL.contains(abi)){
            println "[opencv_dart] add abi: ${abi}"
            acceptedABI.add(abi)
        } else {
            println "[opencv_dart] invalid abi: ${abi}, ignored"
        }
    }
    println "[opencv_dart] accepted abi: $acceptedABI"
    if (acceptedABI){
        ABI_ACCEPTED = acceptedABI
    } else {
        println "[opencv_dart] invalid OPENCV_DART_ANDROID_ENABLED_ABI: $OPENCV_DART_ANDROID_ENABLED_ABI"
        println "[opencv_dart] will enable all supported ABI: $ABI_ACCEPTED"
    }
}

ABI_ALL.each { arch ->
    def extractTaskName = "opencv_dart_extract_libs_${arch}"
    def targetDir = new File("${SOURCE_DIR}/src/main/jniLibs/${arch}")
    if (targetDir.exists() && !ABI_ACCEPTED.contains(arch)) {
        println "[opencv_dart] Deleting libraries for ${arch}..."
        delete targetDir
    }
    task(extractTaskName, type: Copy) {
        mustRunAfter "downloadLibs"
        onlyIf {
          ABI_ACCEPTED.contains(arch) && !file("${targetDir}/libopencv_dart.so").exists()
        }
        doFirst {
            println "[opencv_dart] Extracting libraries for ${arch}..."
        }
        from tarTree(resources.gzip("${CACHE_DIR}/libopencv_dart-android-${arch}.tar.gz"))
        into targetDir
    }
}

task downloadLibs(type: Download) {
    println "[opencv_dart] Downloading libraries..."
    def SRC_URLS = ABI_ACCEPTED.collect { ARCH ->
        "${CVD_LIB_URL_BASE}/v${CVD_VERSION}/libopencv_dart-android-${ARCH}.tar.gz"
    }
    src(SRC_URLS)
    dest CACHE_DIR
    overwrite false
}

task extractLibs(dependsOn: downloadLibs) {
    println "[opencv_dart] Extracting libraries..."
    ABI_ALL.each { arch ->
        dependsOn "opencv_dart_extract_libs_${arch}"
    }

    doLast {
      println "[opencv_dart] Extract finished."
    }
}

def OPENCV_DART_DISABLE_AUTO_BUILD = System.env.OPENCV_DART_DISABLE_AUTO_BUILD ?: null
if (OPENCV_DART_DISABLE_AUTO_BUILD != null) {
    println "[opencv_dart] Found OPENCV_DART_DISABLE_AUTO_BUILD, skip auto build"
} else {
    println "[opencv_dart] OPENCV_DART_DISABLE_AUTO_BUILD is not set, running setup"
    preBuild.dependsOn extractLibs
}
