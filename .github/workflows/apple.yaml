name: Release

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "main" ]

env:
  IOS_DEPLOYMENT_TARGET: '13.0'
  MAC_DEPLOYMENT_TARGET: '11.0'
  ENABLE_BITCODE: OFF
  ENABLE_ARC: OFF
  ENABLE_VISIBILITY: OFF

jobs:
  macos:
    name: macos
    strategy:
      matrix:
        osname:
          - {os: macos-13, arch: x64, platform: MAC}
          - {os: macos-14, arch: arm64, platform: MAC_ARM64}
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../profiles/ios.toolchain.cmake \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=$ENABLE_BITCODE \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    runs-on: ${{ matrix.osname.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: setup
        run: |
          brew install --force --overwrite ninja ccache ffmpeg@6 nasm
          brew link --overwrite ffmpeg@6
      - uses: robinraju/release-downloader@v1.10
        with:
          repository: "rainyl/opencv.full"
          latest: true
          fileName: "libopencv-macos-${{ matrix.osname.arch }}.tar.gz"
          out-file-path: "build/opencv"
          extract: true
      - name: build
        run: |
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DPLATFORM=${{ matrix.osname.platform }} \
          -DOpenCV_DIR=${{ github.workspace }}/build/opencv/lib/cmake/opencv4 \
          ..

          cmake --build . --config Release -j $(nproc)
          cmake --build . --config Release --target install
      - name: package
        run: |
          tar -C build/install -zcvf libopencv_dart-macos-${{ matrix.osname.arch }}.tar.gz .
      - uses: actions/upload-artifact@v4
        name: upload
        with:
          path: libopencv_dart-macos-${{ matrix.osname.arch }}.tar.gz
          name: libopencv_dart-macos-${{ matrix.osname.arch }}.tar.gz
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: false
          files: |
            libopencv_dart-macos-${{ matrix.osname.arch }}.tar.gz
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.6'
          channel: "stable"
      - name: test
        run: |
          cp -rf build/install/* macos/
          ls -alh macos
          export OPENCV_DART_LIB_PATH="${{github.workspace}}/macos/libopencv_dart.dylib"
          dart pub get
          dart test -x skip-workflow,no-local-files
  ios:
    name: ios
    runs-on: macos-14
    strategy:
      matrix:
        platform:
          - {arch: x64, name: SIMULATOR64}
          - {arch: arm64, name: OS64}
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=../profiles/ios.toolchain.cmake \
        -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET \
        -DENABLE_BITCODE=$ENABLE_BITCODE \
        -DENABLE_ARC=$ENABLE_ARC \
        -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: robinraju/release-downloader@v1.10
        with:
          repository: "rainyl/opencv.full"
          latest: true
          fileName: "libopencv-ios-${{ matrix.platform.arch }}.tar.gz"
          out-file-path: "build/opencv"
          extract: true
      - name: build
        run: |
          cd build
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} -DPLATFORM=${{ matrix.platform.name }} \
          -DOpenCV_DIR=${{ github.workspace }}/build/opencv/lib/cmake/opencv4 \
          ..
      - uses: actions/upload-artifact@v4
        name: upload
        with:
          path: libopencv_dart-ios-${{ matrix.platform.arch }}.tar.gz
          name: libopencv_dart-ios-${{ matrix.platform.arch }}.tar.gz

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
    needs: [ios, macos]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-universal
      run: |
        cd artifacts
        find . -name "*.tar.gz" -exec tar -zxvf {} \;
        ls -alh .
        # xcodebuild -create-xcframework \
        #     -framework build/ios/x86_64/install/opencv_dart.framework \
        #     -framework build/ios/armv8/install/opencv_dart.framework \
        #     -output ios/opencv_dart.xcframework
        # tar -zcvf libopencv_dart-ios-os64.tar.gz -C ios opencv_dart.xcframework

    - name: release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        prerelease: false
        files: |
          libopencv_dart-ios-os64.tar.gz
